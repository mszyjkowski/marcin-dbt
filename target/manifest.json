{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.1", "generated_at": "2022-12-01T12:43:57.973235Z", "invocation_id": "c5b1dd02-d7d1-4f55-a386-adee09d89fbc", "env": {}, "project_id": "fad58de7366495db4650cfefac2fcd61", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "redshift"}, "nodes": {"model.main.health_metrics": {"raw_sql": "WITH companies as (\n    SELECT\n        DISTINCT a.company,\n        a.company_id,\n        a.sfdc_id,\n        a.seats,\n        product_group,\n        product_subgroup,\n        a.segment_company,\n        a.segment_customer\n    FROM\n        prod.arr_daily a\n        JOIN prod.products p on p.product_id = a.product_id\n    WHERE\n        a.date = date_add('days', -1, current_date) -- most recent zuora data\n        AND p.product_group <> 'Miscellaneous'\n        AND a.booked_not_active = FALSE\n        AND a.company_id IS NOT NULL\n    UNION\n    --adding 15five\n    SELECT\n        '15Five' as company,\n        2 as company_id,\n        NULL as sfdc_id,\n        NULL as seats,\n        'Total Platform' as product_group,\n        'Total Platform' as product_subgroup,\n        NULL as segment_company,\n        NULL as segment_customer\n),\nfeatures as (\n    SELECT\n        za.company_id,\n        MAX(\n            CASE\n                WHEN za.product_group NOT IN (\n                    'Engage',\n                    'Transform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as checkin_available,\n        MAX(\n            CASE\n                WHEN za.product_group NOT IN (\n                    'Engage',\n                    'Transform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as one_on_one_available,\n        MAX(\n            CASE\n                WHEN za.product_group NOT IN (\n                    'Engage',\n                    'Transform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as highfives_available,\n        MAX(\n            CASE\n                WHEN za.product_group IN (\n                    'Engage',\n                    'Perform',\n                    'Total Platform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as engagement_survey_available,\n        MAX(\n            CASE\n                WHEN za.product_subgroup IN (\n                    'Transform - Coaching',\n                    'Transform - Hybrid'\n                )\n                OR company_id = 2 THEN 1\n                ELSE 0\n            END\n        ) as transform_coaching_available,\n        MAX(\n            CASE\n                WHEN za.product_subgroup IN (\n                    'Transform - Online',\n                    'Transform - Hybrid'\n                )\n                OR company_id = 2 THEN 1\n                ELSE 0\n            END\n        ) as transform_online_available,\n        MAX(\n            CASE\n                WHEN za.product_group IN ('Perform', '15Five Plus', 'Total Platform') THEN 1\n                ELSE 0\n            END\n        ) as bsr_available,\n        MAX(\n            CASE\n                WHEN za.product_group IN ('Focus', '15Five Plus', 'Total Platform') THEN 1\n                ELSE 0\n            END\n        ) as okr_available\n    FROM\n        companies za\n    GROUP BY\n        za.company_id\n),\n--- % of reviewers have reviewed a check-in within the last 28 days, 40% considered healthy\ncheckins as (\n    SELECT\n        u.company_id,\n        COUNT(DISTINCT u.id) as reviewer_count,\n        COUNT(DISTINCT reviewed_by_id) as reviewer_reviewed_checkin_28d,\n        reviewer_reviewed_checkin_28d :: DECIMAL * 100 / reviewer_count AS percent_reviewers_reviewed_checkins_28d\n    FROM\n        pg.ff_user u\n        JOIN pg.ff_company c on c.id = u.company_id -- needed to remove trial data\n        LEFT JOIN companies cz on cz.company_id = c.id\n        LEFT JOIN pg.report ci on ci.reviewed_by_id = u.id -- checkin reviewers\n        AND ci.submit_ts IS NOT NULL -- account for buggy data, only checkins submitted can be reviewed\n        AND trunc(ci.reviewed_ts) >= date_add('days', -29, CURRENT_DATE) -- 28 days look back\n        AND trunc(ci.reviewed_ts) > c.converted_to_paying_ts -- exclude trial data\n        AND ci.is_example_support = FALSE\n        AND ci.is_example = FALSE\n    WHERE\n        cz.company_id IS NOT NULL --paying companies OR 15Five\n        AND u.is_reviewer -- user is a reviewer\n        AND u.deactivate_ts IS NULL -- user is not deactivated\n        AND u.first_login_ts IS NOT NULL -- user has logged in at least once\n    GROUP BY\n        u.company_id\n),\n--- count of users created highfives last 30 days\nhighfives as (\n    SELECT\n        hf.company_id,\n        COUNT(DISTINCT hf.user_id) as users_created_highfives_30d\n    FROM\n        pg.high_fives_highfive hf ---prod?\n        JOIN pg.ff_company c on c.id = hf.company_id\n    WHERE\n        trunc(hf.create_ts) >= date_add('days', -31, SYSDATE)\n        AND hf.create_ts >= c.converted_to_paying_ts -- exclude trial data\n        AND hf.delete_ts IS NULL\n    GROUP BY\n        hf.company_id\n),\n--- users with 1:1s last 30 days\none_on_ones as (\n    SELECT\n        oo.company_id,\n        COUNT(DISTINCT oo.user_id) as users_w_one_on_ones_30d\n    FROM\n        (\n            SELECT\n                DISTINCT u.company_id,\n                ooo.user_id\n            FROM\n                pg.x_oneonone ooo\n                JOIN pg.ff_user u on u.id = ooo.user_id\n                JOIN pg.ff_company c on c.id = u.company_id\n            WHERE\n                ooo.for_date >= date_add('days', -31, SYSDATE)\n                AND ooo.for_date >= c.converted_to_paying_ts -- exclude trial data\n                AND (\n                    u.deactivate_ts IS NULL\n                    OR u.deactivate_ts :: DATE > ooo.for_date :: DATE\n                ) -- not deactivated at time of 1:1\n            UNION\n            SELECT\n                DISTINCT u.company_id,\n                ooo2.reporter_id as user_id\n            FROM\n                pg.x_oneonone ooo2\n                JOIN pg.ff_user u on u.id = ooo2.reporter_id\n                JOIN pg.ff_company c on c.id = u.company_id\n            WHERE\n                ooo2.for_date >= date_add('days', -31, SYSDATE)\n                AND ooo2.for_date >= c.converted_to_paying_ts -- exclude trial data\n                AND (\n                    u.deactivate_ts IS NULL\n                    OR u.deactivate_ts :: DATE > ooo2.for_date :: DATE\n                )\n        ) as oo\n    GROUP BY\n        oo.company_id\n),\n-- bsr company-wide Review cycles (\u226570% of employees participating) completed in the last 365 days\nbsr as (\n    SELECT\n        cc.company_id,\n        COUNT(\n            DISTINCT CASE\n                WHEN cc.percent_employees_in_cycle >= 70 THEN cc.cycle_id\n            END\n        ) as company_wide_cycles_365d\n    FROM\n        (\n            SELECT\n                rc.company_id,\n                rc.id as cycle_id,\n                CAST(COUNT(DISTINCT rp.user_id) AS DECIMAL) * 100 / sp.value as percent_employees_in_cycle\n            FROM\n                pg.reviews_cycle rc\n                JOIN pg.reviews_reviewpack rp ON rp.cycle_id = rc.id\n                LEFT JOIN pg.stats_point sp ON sp.company_id = rc.company_id\n                AND date_trunc('week', cal_week_start_dt + interval '1 week') = date_trunc('week', rc.actual_start_ts) -- week before the review how many active employees?\n                AND sp.generator = 'TotalUsers'\n            WHERE\n                rc.is_draft = false\n                AND rc.delete_ts is null\n                AND rc.name NOT ILIKE '%test%'\n                AND trunc(rc.actual_start_ts) >= date_add('days', -365, CURRENT_DATE) --cycle began in last 365 days\n                AND rp.delete_ts IS NULL\n                AND rc.cycle_end_ts IS NOT NULL --- completed\n                AND rc.cycle_end_ts < CURRENT_DATE --- ended in past, no future dates\n            GROUP BY\n                rc.company_id,\n                rc.id,\n                sp.value\n        ) cc\n    GROUP BY\n        cc.company_id\n),\nlast_bsr_cycle_date as (\n    SELECT\n        rc.company_id,\n        MAX(cycle_end_ts) as last_completed_bsr_cycle\n    FROM\n        pg.reviews_cycle rc\n    WHERE\n        rc.is_draft = false\n        AND rc.delete_ts is null\n        AND rc.name NOT ILIKE '%test%'\n        AND rc.cycle_end_ts IS NOT NULL --- completed\n        AND rc.cycle_end_ts < CURRENT_DATE --- ended in past, no future dates\n    GROUP BY\n        rc.company_id\n),\ntotal_users_30d AS (\n    SELECT\n        company_id,\n        max(value) as total_users_30d\n    FROM\n        pg.stats_point\n    WHERE\n        generator = 'TotalUsers'\n        AND cal_week_start_dt >= date_add('days', -31, SYSDATE)\n        AND cal_week_start_dt <= SYSDATE\n    GROUP BY\n        company_id\n),\n--okrs % of users that create or comment on OKRs each month\nokr as (\n    SELECT\n        c.company_id,\n        COUNT(DISTINCT u.id) as activated_user_count,\n        COUNT(DISTINCT e.user_id) as users_engaged_with_okr_last30days_count,\n        users_engaged_with_okr_last30days_count :: DECIMAL * 100 / NULLIF(activated_user_count, 0) as percent_users_engaged_w_okr_30d\n    FROM\n        companies c\n        LEFT JOIN pg.ff_user u on u.company_id = c.company_id\n        AND (\n            u.deactivate_ts IS NULL -- not deactivated\n            OR deactivate_ts >= date_add('days', 31, current_date)\n        ) -- or deactivated within last 30 days\n        AND u.first_login_ts IS NOT NULL -- has logged in\n        LEFT JOIN atomic.events e on e.user_id = u.id\n        AND e.collector_tstamp :: DATE >= '2021-12-01'\n        AND e.se_action IN (\n            'career_hub_objective_created',\n            'career_hub_objective_updated',\n            'comment_objective_feed_entry_commented',\n            'complete_objective',\n            'left_objective_feed_entry_comment_via_email',\n            'like_objective_comment',\n            'link_goal_to_objective',\n            'objective_bulk_marked_completed',\n            'objective_created',\n            'objective_edited',\n            'objective_followed',\n            'objective_marked_completed',\n            'objective_marked_uncompleted',\n            'objective_reactivate',\n            'objective_status_updated',\n            'unlink_goal_from_objective',\n            'update_objective_status',\n            'reactivate_objective',\n            'career_hub_key_result_comment_created',\n            'career_hub_key_result_updated',\n            'key_result_status_updated',\n            'update_key_result',\n            'user_assigns_key_result_for_user',\n            'user_creates_key_result_for_user',\n            'user_edits_key_result_linked_to_jira',\n            'user_edits_key_result_linked_to_salesforce',\n            'user_links_key_result_to_jira',\n            'user_links_key_result_to_salesforce',\n            'user_unassigns_key_result_from_user',\n            'user_updates_key_result_for_user'\n        )\n        AND app_id Ilike 'production%'\n    GROUP BY\n        c.company_id\n),\nengage_campaigns_details as (\n    SELECT\n        *\n    FROM\n        (\n            SELECT\n                zd.company_id,\n                ec.id as campaign_id,\n                ec.organization_id,\n                ec.started_at,\n                ec.ended_at,\n                ec.scheduled_ended_at,\n                ec.status,\n                CASE\n                    WHEN COUNT(DISTINCT bs.id) >= 1 THEN 1\n                    ELSE 0\n                END AS briefing_within_30d,\n                ec.emplify_score,\n                LAG(ec.emplify_score) OVER (\n                    PARTITION BY ec.organization_id\n                    ORDER BY\n                        ec.ended_at\n                ) as previous_emplify_score,\n                CASE\n                    WHEN ec.ended_at IS NOT NULL\n                    AND previous_emplify_score IS NOT NULL THEN ec.emplify_score - previous_emplify_score\n                END as emplify_score_difference,\n                CASE\n                    WHEN emplify_score_difference = 0 THEN 'no change'\n                    WHEN emplify_score_difference > 0 THEN 'increased'\n                    WHEN emplify_score_difference < 0 THEN 'decreased'\n                END as emplify_score_change_category\n            FROm\n                companies zd\n                JOIN engage.organizations eo on eo.ff_company_id = zd.company_id\n                LEFT JOIN prod.engage_campaigns ec on ec.organization_id = eo.id\n                AND (\n                    ec.quarterly_survey_count >= 1\n                    OR topic_based_survey_count >= 1\n                )\n                LEFT JOIN engage.coaching_sessions bs on bs.organization_id = eo.id\n                AND bs.coaching_session_type_id = 8 -- briefings\n                AND bs.status IN ('completed', 'scheduled')\n                AND bs.started_at <= date_add(\n                    'days',\n                    30,\n                    coalesce(ec.ended_at, ec.scheduled_ended_at)\n                )\n                AND bs.started_at >= coalesce(ec.ended_at, ec.scheduled_ended_at)\n            WHERE\n                eo.ff_company_id IS NOT NULL\n            GROUP BY\n                zd.company_id,\n                ec.id,\n                ec.organization_id,\n                ec.started_at,\n                ec.ended_at,\n                ec.scheduled_ended_at,\n                ec.status,\n                ec.emplify_score\n        ) sub\n    WHERE\n        (\n            (\n                trunc(ended_at) >= date_add('days', -180, CURRENT_DATE)\n                AND status = 'finished'\n            ) -- completed in last 180 days\n            OR status = 'inprogress' --in progress\n            OR (\n                trunc(started_at) > CURRENT_DATE\n                AND status = 'active'\n            ) -- scheduled (confirmed by customer)\n        )\n),\n-- count of engage campaings completed, inprogress or active(scheduled and confirmed) status\n-- where the campaign completed within the last 180 days or is in progress  or is schduled for the future and the user has confirmed the campaign start\nengage_campaign_cnt_180d as (\n    SELECT\n        company_id,\n        organization_id,\n        COUNT(DISTINCT campaign_id) as campaign_cnt_180d\n    FROM\n        engage_campaigns_details\n    GROUP BY\n        company_id,\n        organization_id\n),\n-- briefing within 30 days - considers most recently started that is not \u201cactive\u201d (scheduled for future) status\nengage_briefing_within_30d as (\n    SELECT\n        bd.company_id,\n        bd.organization_id,\n        cd.briefing_within_30d\n    FROM\n        (\n            SELECT\n                company_id,\n                organization_id,\n                MAX(started_at) as max_date\n            FROM\n                engage_campaigns_details\n            WHERE\n                status <> 'active'\n            GROUP BY\n                company_id,\n                organization_id\n        ) bd\n        JOIN engage_campaigns_details cd on cd.organization_id = bd.organization_id\n        AND cd.started_at = bd.max_date\n),\n-- emplify score - last finished survey - include the score difference as well as category\nlast_engage_score as (\n    SELECT\n        bd.company_id,\n        bd.organization_id,\n        cd.emplify_score as most_recent_emplify_score,\n        cd.emplify_score_difference,\n        cd.emplify_score_change_category\n    FROM\n        (\n            SELECT\n                company_id,\n                organization_id,\n                MAX(ended_at) as max_date\n            FROM\n                engage_campaigns_details\n            WHERE\n                status = 'finished'\n                AND emplify_score IS NOT NULL\n            GROUP BY\n                company_id,\n                organization_id\n        ) bd\n        JOIN engage_campaigns_details cd on cd.organization_id = bd.organization_id\n        AND cd.ended_at = bd.max_date\n),\n-- entitlement redemption, send score as well as months into subscription\nengage_entitlement_redemption as (\n    SELECT\n        zd.company_id,\n        o.id as emplify_id,\n        ce.entitlements_limit,\n        date_diff(\n            'month',\n            o.subscription_contract_date,\n            o.renewal_contract_date\n        ) subscription_month_cnt,\n        greatest(\n            date_diff(\n                'month',\n                o.subscription_contract_date,\n                current_date\n            ),\n            1\n        ) as months_since_subscription_start,\n        (\n            ce.entitlements_limit :: DECIMAL / subscription_month_cnt\n        ) * months_since_subscription_start as entitlements_pacing_count,\n        COUNT(cse.id) as entitlements_completed_scheduled,\n        LEAST(\n            entitlements_completed_scheduled :: DECIMAL * 100 / entitlements_pacing_count,\n            100\n        ) as percent_entitlements_redeemed_paced\n    FROM\n        companies zd\n        LEFT JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.coaching_entitlements ce on ce.organization_id = o.id\n        AND ce.coaching_subscription_type_id = 10 -- breifing\n        AND ce.entitlements_limit > 0\n        LEFT JOIN engage.coaching_subscriptions cs on cs.organization_id = ce.organization_id\n        AND cs.coaching_subscription_type_id = ce.coaching_subscription_type_id\n        AND cs.started_at >= o.subscription_contract_date\n        AND cs.started_at < o.renewal_contract_date\n        AND cs.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions cse on cse.organization_id = ce.organization_id\n        AND cse.coaching_subscription_id = cs.id\n        AND cse.deleted_at IS NULL\n        AND cse.status IN ('completed', 'scheduled')\n    WHERE\n        zd.product_group IN (\n            'Engage',\n            'Perform',\n            'Total Platform'\n        )\n    GROUP BY\n        zd.company_id,\n        o.id,\n        ce.entitlements_limit,\n        o.subscription_contract_date,\n        o.renewal_contract_date\n),\n-- of people with access to the results, what percentage have logged in since the last campaign ended?\nlast_campaign as (\n    SELECT\n        o.id as engage_organization_id,\n        zd.company_id,\n        MAX(ended_at) as last_campaign_ended\n    FROM\n        companies zd\n        JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.campaigns ec on ec.organization_id = o.id\n        AND ec.deleted_at IS NULL\n        AND ec.ended_at IS NOT NULL -- should this look at last 180 days as well?\n    GROUP BY\n        o.id,\n        zd.company_id\n),\nengage_results_login as (\n    SELECT\n        zd.company_id,\n        o.id as engage_organization_id,\n        lc.last_campaign_ended,\n        COUNT (DISTINCT p.id) as people_can_access_results_count,\n        COUNT (\n            DISTINCT CASE\n                WHEN lc.last_campaign_ended IS NOT NULL\n                AND p.last_web_portal_login > lc.last_campaign_ended THEN p.id\n            END\n        ) as people_logged_in_post_last_campaign,\n        CASE\n            WHEN lc.last_campaign_ended IS NULL THEN NULL\n            ELSE people_logged_in_post_last_campaign :: DECIMAL * 100 / NULLIF (people_can_access_results_count, 0)\n        END as percent_engage_results_users_login_after_survey_ended\n    FROM\n        companies zd\n        JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.explicit_permissions ep on ep.organization_id = o.id\n        AND ep.accessible_type IN (\n            'organizations-results',\n            'organizations-results-v3groups'\n        )\n        JOIN engage.people p on p.id = ep.person_id\n        AND o.deleted_at IS NULL\n        LEFT JOIN last_campaign lc on lc.company_id = zd.company_id\n    GROUP BY\n        zd.company_id,\n        o.id,\n        lc.last_campaign_ended\n),\n-- transform 80% or higher users logged into course or completed a coaching session last 30 days\n--transform online can use atomic.events for sso since we don't have logged into course, may update once this data is available,\n-- 15five data will need to user total user count because zuora data does not exist for transform seat count\ntransform_online as (\n    select\n        zd.company_id as company_id,\n        COUNT(DISTINCT ae.user_id) as users_sso_transform_online,\n        max(zd.seats) as purchased_transform_online_seats,\n        users_sso_transform_online :: DECIMAL * 100 / purchased_transform_online_seats as percent_users_purchased_sso_transform_online\n    from\n        atomic.events ae\n        join pg.ff_user u on ae.user_id = u.id\n        LEFT JOIN companies zd on zd.company_id = u.company_id\n        AND zd.product_subgroup IN (\n            'Transform - Online',\n            'Transform - Hybrid'\n        )\n        LEFT JOIN total_users_30d tu on tu.company_id = zd.company_id\n    WHERE\n        ae.se_action = 'transform_manager_accelerator_skilljar_sso_login'\n        and ae.collector_tstamp :: DATE >= date_add('days', -31, CURRENT_DATE)\n        and ae.app_id = 'production_web'\n    GROUP BY\n        zd.company_id,\n        tu.total_users_30d\n),\ntransform_coaching as (\n    SELECT\n        zd.company_id,\n        o.id as emplify_id,\n        COUNT(DISTINCT csp.person_id) as transform_coaching_subscription_participants,\n        COUNT(\n            DISTINCT CASE\n                WHEN cssp.person_id IS NOT NULL THEN cssp.person_id\n            END\n        ) as transform_coaching_session_particpants_30d_cnt,\n        transform_coaching_session_particpants_30d_cnt :: DECIMAL / NULLIF(transform_coaching_subscription_participants, 0) as percent_transform_coaching_participants_in_sessions_30d\n    FROM\n        companies zd\n        JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.coaching_subscriptions cs on cs.organization_id = o.id\n        AND cs.coaching_subscription_type_id <> 10 -- exclude briefings\n        AND cs.deleted_at IS NULL\n        AND cs.status = 'active' -- active subscriptions\n        JOIN engage.coaching_subscription_participants csp on csp.coaching_subscription_id = cs.id --subscription participants\n        LEFT JOIN engage.coaching_sessions css on css.organization_id = cs.organization_id -- sessions belonging to subscriptions\n        AND css.coaching_subscription_id = cs.id\n        AND trunc(css.started_at) >= dateadd('days', -31, current_date)\n        AND trunc(css.ended_at) <= current_date -- sessions in last 30 days of date\n        AND css.status = 'completed'\n        ANd css.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions_participants cssp on cssp.coaching_session_id = css.id -- participants in sessions\n        --                                                                      AND cssp.person_id = csp.person_id -- do i need this or no?\n    WHERE\n        zd.product_subgroup IN (\n            'Transform - Coaching',\n            'Transform - Hybrid'\n        )\n    GROUP BY\n        zd.company_id,\n        o.id\n),\nwau_mau as (\n    SELECT\n        c.company_id,\n        COUNT(\n            DISTINCT CASE\n                WHEN ua.time_day >= date_add('days', -7, current_date) THEN ua.id\n            END\n        ) as weekly_active_users,\n        COUNT(DISTINCT ua.id) as monthly_active_users,\n        ISNULL(\n            weekly_active_users :: DECIMAL * 100 / NULLIF(monthly_active_users, 0),\n            0\n        ) as wau_mau\n    FROM\n        companies c\n        LEFT JOIN analytics.user_activity ua on ua.company_id = c.company_id\n        AND ua.time_day >= dateadd('days', -28, current_date)\n    GROUP BY\n        c.company_id\n),\nfinal as (\n    select\n        zd.company_id,\n        zd.segment_customer,\n        zd.segment_company,\n        oe.id as emplify_id,\n        c.name as company_name,\n        coalesce(c.converted_to_paying_ts, oe.created_at) as converted_to_paying,\n        MAX(zd.seats) as current_paid_seats,\n        COUNT(\n            DISTINCT CASE\n                WHEN u.first_login_ts IS NULL\n                AND u.is_active\n                AND u.invite_status IN (\n                    'created',\n                    'saml_created',\n                    'scim_created',\n                    'invited',\n                    'active'\n                ) THEN u.id\n            END\n        ) as users_created_invited,\n        COUNT(\n            DISTINCT CASE\n                WHEN u.first_login_ts IS NOT NULL -- this could include users that were brought back and have not accepted invite\n                AND u.invite_status = 'active' THEN u.id\n            END\n        ) as users_accepted_invite,\n        100 - (\n            CAST(\n                users_accepted_invite + users_created_invited AS DECIMAL\n            ) * 100 / NULLIF(MAX(zd.seats), 0)\n        ) as percent_seats_not_created,\n        tu.total_users_30d,\n        -- max activated user count 30d\n        f.checkin_available,\n        f.one_on_one_available,\n        f.highfives_available,\n        f.engagement_survey_available,\n        f.bsr_available,\n        f.okr_available,\n        f.transform_coaching_available,\n        f.transform_online_available,\n        f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available + f.transform_coaching_available + f.transform_online_available as product_available_cnt,\n        CASE\n            WHEN f.checkin_available = 1 THEN least(\n                NVL(percent_reviewers_reviewed_checkins_28d, 0),\n                100\n            )\n        END as percent_reviewers_reviewed_checkins_28d,\n        CASE\n            WHEN percent_reviewers_reviewed_checkins_28d >= 60 THEN 1\n            ELSE 0\n        END as checkin_active,\n        -- 40% or greater reviewers reviewed a checkin in last 28 days\n        CASE\n            WHEN f.highfives_available = 1 THEN NVL(h.users_created_highfives_30d, 0)\n        END as users_created_highfives_30d,\n        users_created_highfives_30d :: DECIMAL * 100 / NULLIF(tu.total_users_30d, 0) as percent_users_created_highfives,\n        CASE\n            WHEN percent_users_created_highfives >= 50 THEN 1\n            ELSE 0\n        END as highfives_active,\n        --60% or greater of users created highfives in last 30 days\n        CASE\n            WHEN f.one_on_one_available = 1 THEN NVL(o.users_w_one_on_ones_30d, 0)\n        END as users_w_one_on_ones_30d,\n        users_w_one_on_ones_30d :: DECIMAL * 100 / NULLIF(tu.total_users_30d, 0) as percent_users_w_one_on_one,\n        CASE\n            WHEN percent_users_w_one_on_one >= 50 THEN 1\n            ELSE 0\n        END as one_on_one_active,\n        -- 50% or greater users had one on one in last 30 dasy\n        CASE\n            WHEN f.bsr_available = 1 THEN NVL(bsr.company_wide_cycles_365d, 0)\n        END as company_wide_cycle_cnt_365d,\n        CASE\n            WHEN company_wide_cycle_cnt_365d >= 1 THEN 1\n            ELSE 0\n        END as bsr_active,\n        -- 1 or more company wide (70% or greater employees) in last 365 days\n        CASE\n            WHEN f.okr_available = 1 THEN least(NVL(okr.percent_users_engaged_w_okr_30d, 0), 100)\n        END as percent_users_engaged_okr_30d,\n        CASE\n            WHEN percent_users_engaged_okr_30d >= 33 THEN 1\n            ELSE 0\n        END as okr_active,\n        -- 33% or more users engaged with an okr\n        CASE\n            WHEN f.engagement_survey_available = 1 THEN NVL(ec.campaign_cnt_180d, 0)\n        END as engage_campaign_cnt_180d,\n        CASE\n            WHEN engage_campaign_cnt_180d >= 1 THEN 1\n            ELSE 0\n        END as engagement_survey_active,\n        -- one or more completed engage survey last 365 days\n        CASE\n            WHEN f.transform_online_available = 1 THEN least(\n                NVL(\n                    tro.percent_users_purchased_sso_transform_online,\n                    0\n                ),\n                100\n            )\n        END as percent_users_seen_transform_online_30d,\n        CASE\n            WHEN percent_users_seen_transform_online_30d >= 80 THEN 1\n            ELSE 0\n        END as transform_online_active,\n        -- 80% or greater transform online users seen last 30 days\n        transform_coaching_subscription_participants,\n        CASE\n            WHEN f.transform_coaching_available = 1 THEN least(\n                NVL(\n                    tc.percent_transform_coaching_participants_in_sessions_30d,\n                    0\n                ),\n                1\n            )\n        END as percent_transform_coaching_participants_in_sessions_30d,\n        CASE\n            WHEN percent_transform_coaching_participants_in_sessions_30d >= 80 THEN 1\n            ELSE 0\n        END as transform_coaching_active,\n        -- 80% or greater transform coaching users seen last 30 days\n        checkin_active + highfives_active + one_on_one_active + bsr_active + okr_active + engagement_survey_active + transform_online_active + transform_coaching_active AS products_w_usage,\n        products_w_usage :: DECIMAL * 100 / product_available_cnt as percent_purchased_products_used,\n        CASE\n            WHEN f.transform_online_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available + f.transform_coaching_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as transform_online_only,\n        CASE\n            WHEN f.transform_coaching_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available + f.transform_online_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as transform_coaching_only,\n        CASE\n            WHEN f.transform_online_available = 1\n            AND f.transform_coaching_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as transform_hybrid_only,\n        CASE\n            WHEN f.engagement_survey_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.bsr_available + f.okr_available + f.transform_coaching_available + f.transform_online_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as engage_only,\n        lr.last_completed_bsr_cycle,\n        eb.briefing_within_30d,\n        eer.percent_entitlements_redeemed_paced,\n        eer.months_since_subscription_start,\n        les.most_recent_emplify_score,\n        les.emplify_score_difference,\n        les.emplify_score_change_category,\n        erl.percent_engage_results_users_login_after_survey_ended,\n        wm.weekly_active_users,\n        wm.monthly_active_users,\n        wm.wau_mau\n    FROM\n        companies zd\n        LEFT JOIN prod.company c on c.ff_company_id = zd.company_id\n        LEFT JOIN pg.ff_user u ON u.company_id = c.ff_company_id -- activated users\n        AND u.deactivate_ts IS NULL\n        AND u.invite_status <> 'bot'\n        LEFT JOIN engage.organizations oe on oe.ff_company_id = zd.company_id\n        LEFT JOIN features f ON f.company_id = zd.company_id -- returns avaialable features for paying companies\n        LEFT JOIN checkins ci on ci.company_id = zd.company_id\n        LEFT JOIN highfives h on h.company_id = zd.company_id\n        LEFT JOIN one_on_ones o on o.company_id = zd.company_id\n        LEFT JOIN bsr ON bsr.company_id = zd.company_id\n        LEFT JOIN last_bsr_cycle_date lr on lr.company_id = zd.company_id\n        LEFT JOIN okr okr ON okr.company_id = zd.company_id\n        LEFT JOIN engage_campaign_cnt_180d ec on ec.company_id = zd.company_id\n        LEFT JOIN transform_online tro on tro.company_id = zd.company_id\n        LEFT JOIN transform_coaching tc on tc.company_id = zd.company_id\n        LEFT JOIN total_users_30d tu ON tu.company_id = zd.company_id\n        LEFT JOIN engage_briefing_within_30d eb on eb.company_id = zd.company_id\n        LEFT JOIN engage_entitlement_redemption eer on eer.company_id = zd.company_id\n        LEFT JOIN last_engage_score les on les.company_id = zd.company_id\n        LEFT JOIN engage_results_login erl on erl.company_id = zd.company_id\n        LEFT JOIN wau_mau wm on wm.company_id = zd.company_id\n    GROUP BY\n        zd.company_id,\n        oe.id,\n        oe.name,\n        c.name,\n        converted_to_paying,\n        f.checkin_available,\n        f.transform_coaching_available,\n        f.transform_online_available,\n        f.one_on_one_available,\n        f.highfives_available,\n        f.bsr_available,\n        f.okr_available,\n        f.engagement_survey_available,\n        ci.percent_reviewers_reviewed_checkins_28d,\n        h.users_created_highfives_30d,\n        o.users_w_one_on_ones_30d,\n        bsr.company_wide_cycles_365d,\n        okr.percent_users_engaged_w_okr_30d,\n        ec.campaign_cnt_180d,\n        tu.total_users_30d,\n        percent_users_seen_transform_online_30d,\n        percent_transform_coaching_participants_in_sessions_30d,\n        lr.last_completed_bsr_cycle,\n        eb.briefing_within_30d,\n        eer.percent_entitlements_redeemed_paced,\n        eer.months_since_subscription_start,\n        les.most_recent_emplify_score,\n        les.emplify_score_difference,\n        les.emplify_score_change_category,\n        erl.percent_engage_results_users_login_after_survey_ended,\n        wm.wau_mau,\n        wm.weekly_active_users,\n        wm.monthly_active_users,\n        zd.segment_company,\n        zd.segment_customer,\n        tc.transform_coaching_subscription_participants\n)\nSELECT\n    company_id,\n    segment_company,\n    segment_customer,\n    emplify_id,\n    company_name,\n    converted_to_paying,\n    current_paid_seats,\n    users_created_invited,\n    users_accepted_invite,\n    percent_seats_not_created,\n    checkin_available,\n    one_on_one_available,\n    highfives_available,\n    engagement_survey_available,\n    bsr_available,\n    okr_available,\n    transform_coaching_available,\n    transform_online_available,\n    product_available_cnt,\n    products_w_usage as products_healthy_usage,\n    percent_purchased_products_used as percent_purchased_products_healthy,\n    CASE\n        WHEN checkin_available THEN percent_reviewers_reviewed_checkins_28d\n    END as percent_reviewers_reviewed_checkins_28d,\n    CASE\n        WHEN checkin_available THEN checkin_active -- 40% of greater reviewers reviewed checkin last 28 days\n    END as checkin_active,\n    CASE\n        WHEN highfives_available THEN least(NVL(percent_users_created_highfives, 0), 100)\n    END AS percent_users_created_highfives,\n    CASE\n        WHEN highfives_available THEN highfives_active -- 60% or greater users created high five last 30 days\n    END as highfives_active,\n    CASE\n        WHEN one_on_one_available THEN least(NVL(percent_users_w_one_on_one, 0), 100)\n    END AS percent_users_w_one_on_one,\n    CASE\n        WHEN one_on_one_available THEN one_on_one_active -- 50% of greater users with one on ones last 30 days\n    END as one_on_one_active,\n    company_wide_cycle_cnt_365d,\n    CASE\n        WHEN bsr_available THEN bsr_active -- 1 or more company wide (70> or more employeees) cycles\n    END as bsr_active,\n    percent_users_engaged_okr_30d,\n    CASE\n        WHEN okr_available THEN okr_active -- 33% or more users engaged with okr last 30 days\n    END as okr_active,\n    CASE\n        WHEN engagement_survey_available THEN engagement_survey_active -- 1 or more finished engagement_survey,\n    END as engagement_survey_active,\n    engage_campaign_cnt_180d as engagement_survey_cnt,\n    percent_users_seen_transform_online_30d,\n    percent_transform_coaching_participants_in_sessions_30d,\n    transform_coaching_subscription_participants,\n    CASE\n        WHEN transform_online_available THEN transform_online_active\n    END as transform_online_active,\n    --80% or more seats purchased seen on transform online last 30days\n    CASE\n        WHEN transform_coaching_available THEN transform_coaching_active\n    END as transform_coaching_active,\n    -- 80% of more seats purchased in coaching sessions last 30days\n    last_completed_bsr_cycle,\n    transform_coaching_only,\n    transform_online_only,\n    transform_hybrid_only,\n    engage_only,\n    briefing_within_30d,\n    percent_entitlements_redeemed_paced,\n    months_since_subscription_start as months_into_engage_entitlement_subscription,\n    most_recent_emplify_score,\n    emplify_score_difference,\n    emplify_score_change_category,\n    percent_engage_results_users_login_after_survey_ended,\n    weekly_active_users,\n    monthly_active_users,\n    wau_mau\nFROM\n    final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "health", "health_metrics"], "unique_id": "model.main.health_metrics", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "health/health_metrics.sql", "original_file_path": "models/health/health_metrics.sql", "name": "health_metrics", "alias": "health_metrics", "checksum": {"name": "sha256", "checksum": "a1b165454006624d496a6b7cb2fa054dcdf7c26d6a36b367792bc2729d7a78bf"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/health/health_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.4086437, "compiled_sql": "WITH companies as (\n    SELECT\n        DISTINCT a.company,\n        a.company_id,\n        a.sfdc_id,\n        a.seats,\n        product_group,\n        product_subgroup,\n        a.segment_company,\n        a.segment_customer\n    FROM\n        prod.arr_daily a\n        JOIN prod.products p on p.product_id = a.product_id\n    WHERE\n        a.date = date_add('days', -1, current_date) -- most recent zuora data\n        AND p.product_group <> 'Miscellaneous'\n        AND a.booked_not_active = FALSE\n        AND a.company_id IS NOT NULL\n    UNION\n    --adding 15five\n    SELECT\n        '15Five' as company,\n        2 as company_id,\n        NULL as sfdc_id,\n        NULL as seats,\n        'Total Platform' as product_group,\n        'Total Platform' as product_subgroup,\n        NULL as segment_company,\n        NULL as segment_customer\n),\nfeatures as (\n    SELECT\n        za.company_id,\n        MAX(\n            CASE\n                WHEN za.product_group NOT IN (\n                    'Engage',\n                    'Transform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as checkin_available,\n        MAX(\n            CASE\n                WHEN za.product_group NOT IN (\n                    'Engage',\n                    'Transform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as one_on_one_available,\n        MAX(\n            CASE\n                WHEN za.product_group NOT IN (\n                    'Engage',\n                    'Transform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as highfives_available,\n        MAX(\n            CASE\n                WHEN za.product_group IN (\n                    'Engage',\n                    'Perform',\n                    'Total Platform'\n                ) THEN 1\n                ELSE 0\n            END\n        ) as engagement_survey_available,\n        MAX(\n            CASE\n                WHEN za.product_subgroup IN (\n                    'Transform - Coaching',\n                    'Transform - Hybrid'\n                )\n                OR company_id = 2 THEN 1\n                ELSE 0\n            END\n        ) as transform_coaching_available,\n        MAX(\n            CASE\n                WHEN za.product_subgroup IN (\n                    'Transform - Online',\n                    'Transform - Hybrid'\n                )\n                OR company_id = 2 THEN 1\n                ELSE 0\n            END\n        ) as transform_online_available,\n        MAX(\n            CASE\n                WHEN za.product_group IN ('Perform', '15Five Plus', 'Total Platform') THEN 1\n                ELSE 0\n            END\n        ) as bsr_available,\n        MAX(\n            CASE\n                WHEN za.product_group IN ('Focus', '15Five Plus', 'Total Platform') THEN 1\n                ELSE 0\n            END\n        ) as okr_available\n    FROM\n        companies za\n    GROUP BY\n        za.company_id\n),\n--- % of reviewers have reviewed a check-in within the last 28 days, 40% considered healthy\ncheckins as (\n    SELECT\n        u.company_id,\n        COUNT(DISTINCT u.id) as reviewer_count,\n        COUNT(DISTINCT reviewed_by_id) as reviewer_reviewed_checkin_28d,\n        reviewer_reviewed_checkin_28d :: DECIMAL * 100 / reviewer_count AS percent_reviewers_reviewed_checkins_28d\n    FROM\n        pg.ff_user u\n        JOIN pg.ff_company c on c.id = u.company_id -- needed to remove trial data\n        LEFT JOIN companies cz on cz.company_id = c.id\n        LEFT JOIN pg.report ci on ci.reviewed_by_id = u.id -- checkin reviewers\n        AND ci.submit_ts IS NOT NULL -- account for buggy data, only checkins submitted can be reviewed\n        AND trunc(ci.reviewed_ts) >= date_add('days', -29, CURRENT_DATE) -- 28 days look back\n        AND trunc(ci.reviewed_ts) > c.converted_to_paying_ts -- exclude trial data\n        AND ci.is_example_support = FALSE\n        AND ci.is_example = FALSE\n    WHERE\n        cz.company_id IS NOT NULL --paying companies OR 15Five\n        AND u.is_reviewer -- user is a reviewer\n        AND u.deactivate_ts IS NULL -- user is not deactivated\n        AND u.first_login_ts IS NOT NULL -- user has logged in at least once\n    GROUP BY\n        u.company_id\n),\n--- count of users created highfives last 30 days\nhighfives as (\n    SELECT\n        hf.company_id,\n        COUNT(DISTINCT hf.user_id) as users_created_highfives_30d\n    FROM\n        pg.high_fives_highfive hf ---prod?\n        JOIN pg.ff_company c on c.id = hf.company_id\n    WHERE\n        trunc(hf.create_ts) >= date_add('days', -31, SYSDATE)\n        AND hf.create_ts >= c.converted_to_paying_ts -- exclude trial data\n        AND hf.delete_ts IS NULL\n    GROUP BY\n        hf.company_id\n),\n--- users with 1:1s last 30 days\none_on_ones as (\n    SELECT\n        oo.company_id,\n        COUNT(DISTINCT oo.user_id) as users_w_one_on_ones_30d\n    FROM\n        (\n            SELECT\n                DISTINCT u.company_id,\n                ooo.user_id\n            FROM\n                pg.x_oneonone ooo\n                JOIN pg.ff_user u on u.id = ooo.user_id\n                JOIN pg.ff_company c on c.id = u.company_id\n            WHERE\n                ooo.for_date >= date_add('days', -31, SYSDATE)\n                AND ooo.for_date >= c.converted_to_paying_ts -- exclude trial data\n                AND (\n                    u.deactivate_ts IS NULL\n                    OR u.deactivate_ts :: DATE > ooo.for_date :: DATE\n                ) -- not deactivated at time of 1:1\n            UNION\n            SELECT\n                DISTINCT u.company_id,\n                ooo2.reporter_id as user_id\n            FROM\n                pg.x_oneonone ooo2\n                JOIN pg.ff_user u on u.id = ooo2.reporter_id\n                JOIN pg.ff_company c on c.id = u.company_id\n            WHERE\n                ooo2.for_date >= date_add('days', -31, SYSDATE)\n                AND ooo2.for_date >= c.converted_to_paying_ts -- exclude trial data\n                AND (\n                    u.deactivate_ts IS NULL\n                    OR u.deactivate_ts :: DATE > ooo2.for_date :: DATE\n                )\n        ) as oo\n    GROUP BY\n        oo.company_id\n),\n-- bsr company-wide Review cycles (\u226570% of employees participating) completed in the last 365 days\nbsr as (\n    SELECT\n        cc.company_id,\n        COUNT(\n            DISTINCT CASE\n                WHEN cc.percent_employees_in_cycle >= 70 THEN cc.cycle_id\n            END\n        ) as company_wide_cycles_365d\n    FROM\n        (\n            SELECT\n                rc.company_id,\n                rc.id as cycle_id,\n                CAST(COUNT(DISTINCT rp.user_id) AS DECIMAL) * 100 / sp.value as percent_employees_in_cycle\n            FROM\n                pg.reviews_cycle rc\n                JOIN pg.reviews_reviewpack rp ON rp.cycle_id = rc.id\n                LEFT JOIN pg.stats_point sp ON sp.company_id = rc.company_id\n                AND date_trunc('week', cal_week_start_dt + interval '1 week') = date_trunc('week', rc.actual_start_ts) -- week before the review how many active employees?\n                AND sp.generator = 'TotalUsers'\n            WHERE\n                rc.is_draft = false\n                AND rc.delete_ts is null\n                AND rc.name NOT ILIKE '%test%'\n                AND trunc(rc.actual_start_ts) >= date_add('days', -365, CURRENT_DATE) --cycle began in last 365 days\n                AND rp.delete_ts IS NULL\n                AND rc.cycle_end_ts IS NOT NULL --- completed\n                AND rc.cycle_end_ts < CURRENT_DATE --- ended in past, no future dates\n            GROUP BY\n                rc.company_id,\n                rc.id,\n                sp.value\n        ) cc\n    GROUP BY\n        cc.company_id\n),\nlast_bsr_cycle_date as (\n    SELECT\n        rc.company_id,\n        MAX(cycle_end_ts) as last_completed_bsr_cycle\n    FROM\n        pg.reviews_cycle rc\n    WHERE\n        rc.is_draft = false\n        AND rc.delete_ts is null\n        AND rc.name NOT ILIKE '%test%'\n        AND rc.cycle_end_ts IS NOT NULL --- completed\n        AND rc.cycle_end_ts < CURRENT_DATE --- ended in past, no future dates\n    GROUP BY\n        rc.company_id\n),\ntotal_users_30d AS (\n    SELECT\n        company_id,\n        max(value) as total_users_30d\n    FROM\n        pg.stats_point\n    WHERE\n        generator = 'TotalUsers'\n        AND cal_week_start_dt >= date_add('days', -31, SYSDATE)\n        AND cal_week_start_dt <= SYSDATE\n    GROUP BY\n        company_id\n),\n--okrs % of users that create or comment on OKRs each month\nokr as (\n    SELECT\n        c.company_id,\n        COUNT(DISTINCT u.id) as activated_user_count,\n        COUNT(DISTINCT e.user_id) as users_engaged_with_okr_last30days_count,\n        users_engaged_with_okr_last30days_count :: DECIMAL * 100 / NULLIF(activated_user_count, 0) as percent_users_engaged_w_okr_30d\n    FROM\n        companies c\n        LEFT JOIN pg.ff_user u on u.company_id = c.company_id\n        AND (\n            u.deactivate_ts IS NULL -- not deactivated\n            OR deactivate_ts >= date_add('days', 31, current_date)\n        ) -- or deactivated within last 30 days\n        AND u.first_login_ts IS NOT NULL -- has logged in\n        LEFT JOIN atomic.events e on e.user_id = u.id\n        AND e.collector_tstamp :: DATE >= '2021-12-01'\n        AND e.se_action IN (\n            'career_hub_objective_created',\n            'career_hub_objective_updated',\n            'comment_objective_feed_entry_commented',\n            'complete_objective',\n            'left_objective_feed_entry_comment_via_email',\n            'like_objective_comment',\n            'link_goal_to_objective',\n            'objective_bulk_marked_completed',\n            'objective_created',\n            'objective_edited',\n            'objective_followed',\n            'objective_marked_completed',\n            'objective_marked_uncompleted',\n            'objective_reactivate',\n            'objective_status_updated',\n            'unlink_goal_from_objective',\n            'update_objective_status',\n            'reactivate_objective',\n            'career_hub_key_result_comment_created',\n            'career_hub_key_result_updated',\n            'key_result_status_updated',\n            'update_key_result',\n            'user_assigns_key_result_for_user',\n            'user_creates_key_result_for_user',\n            'user_edits_key_result_linked_to_jira',\n            'user_edits_key_result_linked_to_salesforce',\n            'user_links_key_result_to_jira',\n            'user_links_key_result_to_salesforce',\n            'user_unassigns_key_result_from_user',\n            'user_updates_key_result_for_user'\n        )\n        AND app_id Ilike 'production%'\n    GROUP BY\n        c.company_id\n),\nengage_campaigns_details as (\n    SELECT\n        *\n    FROM\n        (\n            SELECT\n                zd.company_id,\n                ec.id as campaign_id,\n                ec.organization_id,\n                ec.started_at,\n                ec.ended_at,\n                ec.scheduled_ended_at,\n                ec.status,\n                CASE\n                    WHEN COUNT(DISTINCT bs.id) >= 1 THEN 1\n                    ELSE 0\n                END AS briefing_within_30d,\n                ec.emplify_score,\n                LAG(ec.emplify_score) OVER (\n                    PARTITION BY ec.organization_id\n                    ORDER BY\n                        ec.ended_at\n                ) as previous_emplify_score,\n                CASE\n                    WHEN ec.ended_at IS NOT NULL\n                    AND previous_emplify_score IS NOT NULL THEN ec.emplify_score - previous_emplify_score\n                END as emplify_score_difference,\n                CASE\n                    WHEN emplify_score_difference = 0 THEN 'no change'\n                    WHEN emplify_score_difference > 0 THEN 'increased'\n                    WHEN emplify_score_difference < 0 THEN 'decreased'\n                END as emplify_score_change_category\n            FROm\n                companies zd\n                JOIN engage.organizations eo on eo.ff_company_id = zd.company_id\n                LEFT JOIN prod.engage_campaigns ec on ec.organization_id = eo.id\n                AND (\n                    ec.quarterly_survey_count >= 1\n                    OR topic_based_survey_count >= 1\n                )\n                LEFT JOIN engage.coaching_sessions bs on bs.organization_id = eo.id\n                AND bs.coaching_session_type_id = 8 -- briefings\n                AND bs.status IN ('completed', 'scheduled')\n                AND bs.started_at <= date_add(\n                    'days',\n                    30,\n                    coalesce(ec.ended_at, ec.scheduled_ended_at)\n                )\n                AND bs.started_at >= coalesce(ec.ended_at, ec.scheduled_ended_at)\n            WHERE\n                eo.ff_company_id IS NOT NULL\n            GROUP BY\n                zd.company_id,\n                ec.id,\n                ec.organization_id,\n                ec.started_at,\n                ec.ended_at,\n                ec.scheduled_ended_at,\n                ec.status,\n                ec.emplify_score\n        ) sub\n    WHERE\n        (\n            (\n                trunc(ended_at) >= date_add('days', -180, CURRENT_DATE)\n                AND status = 'finished'\n            ) -- completed in last 180 days\n            OR status = 'inprogress' --in progress\n            OR (\n                trunc(started_at) > CURRENT_DATE\n                AND status = 'active'\n            ) -- scheduled (confirmed by customer)\n        )\n),\n-- count of engage campaings completed, inprogress or active(scheduled and confirmed) status\n-- where the campaign completed within the last 180 days or is in progress  or is schduled for the future and the user has confirmed the campaign start\nengage_campaign_cnt_180d as (\n    SELECT\n        company_id,\n        organization_id,\n        COUNT(DISTINCT campaign_id) as campaign_cnt_180d\n    FROM\n        engage_campaigns_details\n    GROUP BY\n        company_id,\n        organization_id\n),\n-- briefing within 30 days - considers most recently started that is not \u201cactive\u201d (scheduled for future) status\nengage_briefing_within_30d as (\n    SELECT\n        bd.company_id,\n        bd.organization_id,\n        cd.briefing_within_30d\n    FROM\n        (\n            SELECT\n                company_id,\n                organization_id,\n                MAX(started_at) as max_date\n            FROM\n                engage_campaigns_details\n            WHERE\n                status <> 'active'\n            GROUP BY\n                company_id,\n                organization_id\n        ) bd\n        JOIN engage_campaigns_details cd on cd.organization_id = bd.organization_id\n        AND cd.started_at = bd.max_date\n),\n-- emplify score - last finished survey - include the score difference as well as category\nlast_engage_score as (\n    SELECT\n        bd.company_id,\n        bd.organization_id,\n        cd.emplify_score as most_recent_emplify_score,\n        cd.emplify_score_difference,\n        cd.emplify_score_change_category\n    FROM\n        (\n            SELECT\n                company_id,\n                organization_id,\n                MAX(ended_at) as max_date\n            FROM\n                engage_campaigns_details\n            WHERE\n                status = 'finished'\n                AND emplify_score IS NOT NULL\n            GROUP BY\n                company_id,\n                organization_id\n        ) bd\n        JOIN engage_campaigns_details cd on cd.organization_id = bd.organization_id\n        AND cd.ended_at = bd.max_date\n),\n-- entitlement redemption, send score as well as months into subscription\nengage_entitlement_redemption as (\n    SELECT\n        zd.company_id,\n        o.id as emplify_id,\n        ce.entitlements_limit,\n        date_diff(\n            'month',\n            o.subscription_contract_date,\n            o.renewal_contract_date\n        ) subscription_month_cnt,\n        greatest(\n            date_diff(\n                'month',\n                o.subscription_contract_date,\n                current_date\n            ),\n            1\n        ) as months_since_subscription_start,\n        (\n            ce.entitlements_limit :: DECIMAL / subscription_month_cnt\n        ) * months_since_subscription_start as entitlements_pacing_count,\n        COUNT(cse.id) as entitlements_completed_scheduled,\n        LEAST(\n            entitlements_completed_scheduled :: DECIMAL * 100 / entitlements_pacing_count,\n            100\n        ) as percent_entitlements_redeemed_paced\n    FROM\n        companies zd\n        LEFT JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.coaching_entitlements ce on ce.organization_id = o.id\n        AND ce.coaching_subscription_type_id = 10 -- breifing\n        AND ce.entitlements_limit > 0\n        LEFT JOIN engage.coaching_subscriptions cs on cs.organization_id = ce.organization_id\n        AND cs.coaching_subscription_type_id = ce.coaching_subscription_type_id\n        AND cs.started_at >= o.subscription_contract_date\n        AND cs.started_at < o.renewal_contract_date\n        AND cs.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions cse on cse.organization_id = ce.organization_id\n        AND cse.coaching_subscription_id = cs.id\n        AND cse.deleted_at IS NULL\n        AND cse.status IN ('completed', 'scheduled')\n    WHERE\n        zd.product_group IN (\n            'Engage',\n            'Perform',\n            'Total Platform'\n        )\n    GROUP BY\n        zd.company_id,\n        o.id,\n        ce.entitlements_limit,\n        o.subscription_contract_date,\n        o.renewal_contract_date\n),\n-- of people with access to the results, what percentage have logged in since the last campaign ended?\nlast_campaign as (\n    SELECT\n        o.id as engage_organization_id,\n        zd.company_id,\n        MAX(ended_at) as last_campaign_ended\n    FROM\n        companies zd\n        JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.campaigns ec on ec.organization_id = o.id\n        AND ec.deleted_at IS NULL\n        AND ec.ended_at IS NOT NULL -- should this look at last 180 days as well?\n    GROUP BY\n        o.id,\n        zd.company_id\n),\nengage_results_login as (\n    SELECT\n        zd.company_id,\n        o.id as engage_organization_id,\n        lc.last_campaign_ended,\n        COUNT (DISTINCT p.id) as people_can_access_results_count,\n        COUNT (\n            DISTINCT CASE\n                WHEN lc.last_campaign_ended IS NOT NULL\n                AND p.last_web_portal_login > lc.last_campaign_ended THEN p.id\n            END\n        ) as people_logged_in_post_last_campaign,\n        CASE\n            WHEN lc.last_campaign_ended IS NULL THEN NULL\n            ELSE people_logged_in_post_last_campaign :: DECIMAL * 100 / NULLIF (people_can_access_results_count, 0)\n        END as percent_engage_results_users_login_after_survey_ended\n    FROM\n        companies zd\n        JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.explicit_permissions ep on ep.organization_id = o.id\n        AND ep.accessible_type IN (\n            'organizations-results',\n            'organizations-results-v3groups'\n        )\n        JOIN engage.people p on p.id = ep.person_id\n        AND o.deleted_at IS NULL\n        LEFT JOIN last_campaign lc on lc.company_id = zd.company_id\n    GROUP BY\n        zd.company_id,\n        o.id,\n        lc.last_campaign_ended\n),\n-- transform 80% or higher users logged into course or completed a coaching session last 30 days\n--transform online can use atomic.events for sso since we don't have logged into course, may update once this data is available,\n-- 15five data will need to user total user count because zuora data does not exist for transform seat count\ntransform_online as (\n    select\n        zd.company_id as company_id,\n        COUNT(DISTINCT ae.user_id) as users_sso_transform_online,\n        max(zd.seats) as purchased_transform_online_seats,\n        users_sso_transform_online :: DECIMAL * 100 / purchased_transform_online_seats as percent_users_purchased_sso_transform_online\n    from\n        atomic.events ae\n        join pg.ff_user u on ae.user_id = u.id\n        LEFT JOIN companies zd on zd.company_id = u.company_id\n        AND zd.product_subgroup IN (\n            'Transform - Online',\n            'Transform - Hybrid'\n        )\n        LEFT JOIN total_users_30d tu on tu.company_id = zd.company_id\n    WHERE\n        ae.se_action = 'transform_manager_accelerator_skilljar_sso_login'\n        and ae.collector_tstamp :: DATE >= date_add('days', -31, CURRENT_DATE)\n        and ae.app_id = 'production_web'\n    GROUP BY\n        zd.company_id,\n        tu.total_users_30d\n),\ntransform_coaching as (\n    SELECT\n        zd.company_id,\n        o.id as emplify_id,\n        COUNT(DISTINCT csp.person_id) as transform_coaching_subscription_participants,\n        COUNT(\n            DISTINCT CASE\n                WHEN cssp.person_id IS NOT NULL THEN cssp.person_id\n            END\n        ) as transform_coaching_session_particpants_30d_cnt,\n        transform_coaching_session_particpants_30d_cnt :: DECIMAL / NULLIF(transform_coaching_subscription_participants, 0) as percent_transform_coaching_participants_in_sessions_30d\n    FROM\n        companies zd\n        JOIN engage.organizations o on o.ff_company_id = zd.company_id\n        JOIN engage.coaching_subscriptions cs on cs.organization_id = o.id\n        AND cs.coaching_subscription_type_id <> 10 -- exclude briefings\n        AND cs.deleted_at IS NULL\n        AND cs.status = 'active' -- active subscriptions\n        JOIN engage.coaching_subscription_participants csp on csp.coaching_subscription_id = cs.id --subscription participants\n        LEFT JOIN engage.coaching_sessions css on css.organization_id = cs.organization_id -- sessions belonging to subscriptions\n        AND css.coaching_subscription_id = cs.id\n        AND trunc(css.started_at) >= dateadd('days', -31, current_date)\n        AND trunc(css.ended_at) <= current_date -- sessions in last 30 days of date\n        AND css.status = 'completed'\n        ANd css.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions_participants cssp on cssp.coaching_session_id = css.id -- participants in sessions\n        --                                                                      AND cssp.person_id = csp.person_id -- do i need this or no?\n    WHERE\n        zd.product_subgroup IN (\n            'Transform - Coaching',\n            'Transform - Hybrid'\n        )\n    GROUP BY\n        zd.company_id,\n        o.id\n),\nwau_mau as (\n    SELECT\n        c.company_id,\n        COUNT(\n            DISTINCT CASE\n                WHEN ua.time_day >= date_add('days', -7, current_date) THEN ua.id\n            END\n        ) as weekly_active_users,\n        COUNT(DISTINCT ua.id) as monthly_active_users,\n        ISNULL(\n            weekly_active_users :: DECIMAL * 100 / NULLIF(monthly_active_users, 0),\n            0\n        ) as wau_mau\n    FROM\n        companies c\n        LEFT JOIN analytics.user_activity ua on ua.company_id = c.company_id\n        AND ua.time_day >= dateadd('days', -28, current_date)\n    GROUP BY\n        c.company_id\n),\nfinal as (\n    select\n        zd.company_id,\n        zd.segment_customer,\n        zd.segment_company,\n        oe.id as emplify_id,\n        c.name as company_name,\n        coalesce(c.converted_to_paying_ts, oe.created_at) as converted_to_paying,\n        MAX(zd.seats) as current_paid_seats,\n        COUNT(\n            DISTINCT CASE\n                WHEN u.first_login_ts IS NULL\n                AND u.is_active\n                AND u.invite_status IN (\n                    'created',\n                    'saml_created',\n                    'scim_created',\n                    'invited',\n                    'active'\n                ) THEN u.id\n            END\n        ) as users_created_invited,\n        COUNT(\n            DISTINCT CASE\n                WHEN u.first_login_ts IS NOT NULL -- this could include users that were brought back and have not accepted invite\n                AND u.invite_status = 'active' THEN u.id\n            END\n        ) as users_accepted_invite,\n        100 - (\n            CAST(\n                users_accepted_invite + users_created_invited AS DECIMAL\n            ) * 100 / NULLIF(MAX(zd.seats), 0)\n        ) as percent_seats_not_created,\n        tu.total_users_30d,\n        -- max activated user count 30d\n        f.checkin_available,\n        f.one_on_one_available,\n        f.highfives_available,\n        f.engagement_survey_available,\n        f.bsr_available,\n        f.okr_available,\n        f.transform_coaching_available,\n        f.transform_online_available,\n        f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available + f.transform_coaching_available + f.transform_online_available as product_available_cnt,\n        CASE\n            WHEN f.checkin_available = 1 THEN least(\n                NVL(percent_reviewers_reviewed_checkins_28d, 0),\n                100\n            )\n        END as percent_reviewers_reviewed_checkins_28d,\n        CASE\n            WHEN percent_reviewers_reviewed_checkins_28d >= 60 THEN 1\n            ELSE 0\n        END as checkin_active,\n        -- 40% or greater reviewers reviewed a checkin in last 28 days\n        CASE\n            WHEN f.highfives_available = 1 THEN NVL(h.users_created_highfives_30d, 0)\n        END as users_created_highfives_30d,\n        users_created_highfives_30d :: DECIMAL * 100 / NULLIF(tu.total_users_30d, 0) as percent_users_created_highfives,\n        CASE\n            WHEN percent_users_created_highfives >= 50 THEN 1\n            ELSE 0\n        END as highfives_active,\n        --60% or greater of users created highfives in last 30 days\n        CASE\n            WHEN f.one_on_one_available = 1 THEN NVL(o.users_w_one_on_ones_30d, 0)\n        END as users_w_one_on_ones_30d,\n        users_w_one_on_ones_30d :: DECIMAL * 100 / NULLIF(tu.total_users_30d, 0) as percent_users_w_one_on_one,\n        CASE\n            WHEN percent_users_w_one_on_one >= 50 THEN 1\n            ELSE 0\n        END as one_on_one_active,\n        -- 50% or greater users had one on one in last 30 dasy\n        CASE\n            WHEN f.bsr_available = 1 THEN NVL(bsr.company_wide_cycles_365d, 0)\n        END as company_wide_cycle_cnt_365d,\n        CASE\n            WHEN company_wide_cycle_cnt_365d >= 1 THEN 1\n            ELSE 0\n        END as bsr_active,\n        -- 1 or more company wide (70% or greater employees) in last 365 days\n        CASE\n            WHEN f.okr_available = 1 THEN least(NVL(okr.percent_users_engaged_w_okr_30d, 0), 100)\n        END as percent_users_engaged_okr_30d,\n        CASE\n            WHEN percent_users_engaged_okr_30d >= 33 THEN 1\n            ELSE 0\n        END as okr_active,\n        -- 33% or more users engaged with an okr\n        CASE\n            WHEN f.engagement_survey_available = 1 THEN NVL(ec.campaign_cnt_180d, 0)\n        END as engage_campaign_cnt_180d,\n        CASE\n            WHEN engage_campaign_cnt_180d >= 1 THEN 1\n            ELSE 0\n        END as engagement_survey_active,\n        -- one or more completed engage survey last 365 days\n        CASE\n            WHEN f.transform_online_available = 1 THEN least(\n                NVL(\n                    tro.percent_users_purchased_sso_transform_online,\n                    0\n                ),\n                100\n            )\n        END as percent_users_seen_transform_online_30d,\n        CASE\n            WHEN percent_users_seen_transform_online_30d >= 80 THEN 1\n            ELSE 0\n        END as transform_online_active,\n        -- 80% or greater transform online users seen last 30 days\n        transform_coaching_subscription_participants,\n        CASE\n            WHEN f.transform_coaching_available = 1 THEN least(\n                NVL(\n                    tc.percent_transform_coaching_participants_in_sessions_30d,\n                    0\n                ),\n                1\n            )\n        END as percent_transform_coaching_participants_in_sessions_30d,\n        CASE\n            WHEN percent_transform_coaching_participants_in_sessions_30d >= 80 THEN 1\n            ELSE 0\n        END as transform_coaching_active,\n        -- 80% or greater transform coaching users seen last 30 days\n        checkin_active + highfives_active + one_on_one_active + bsr_active + okr_active + engagement_survey_active + transform_online_active + transform_coaching_active AS products_w_usage,\n        products_w_usage :: DECIMAL * 100 / product_available_cnt as percent_purchased_products_used,\n        CASE\n            WHEN f.transform_online_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available + f.transform_coaching_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as transform_online_only,\n        CASE\n            WHEN f.transform_coaching_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available + f.transform_online_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as transform_coaching_only,\n        CASE\n            WHEN f.transform_online_available = 1\n            AND f.transform_coaching_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.engagement_survey_available + f.bsr_available + f.okr_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as transform_hybrid_only,\n        CASE\n            WHEN f.engagement_survey_available = 1\n            AND SUM(\n                f.checkin_available + f.one_on_one_available + f.highfives_available + f.bsr_available + f.okr_available + f.transform_coaching_available + f.transform_online_available\n            ) = 0 THEN 1\n            ELSE 0\n        END as engage_only,\n        lr.last_completed_bsr_cycle,\n        eb.briefing_within_30d,\n        eer.percent_entitlements_redeemed_paced,\n        eer.months_since_subscription_start,\n        les.most_recent_emplify_score,\n        les.emplify_score_difference,\n        les.emplify_score_change_category,\n        erl.percent_engage_results_users_login_after_survey_ended,\n        wm.weekly_active_users,\n        wm.monthly_active_users,\n        wm.wau_mau\n    FROM\n        companies zd\n        LEFT JOIN prod.company c on c.ff_company_id = zd.company_id\n        LEFT JOIN pg.ff_user u ON u.company_id = c.ff_company_id -- activated users\n        AND u.deactivate_ts IS NULL\n        AND u.invite_status <> 'bot'\n        LEFT JOIN engage.organizations oe on oe.ff_company_id = zd.company_id\n        LEFT JOIN features f ON f.company_id = zd.company_id -- returns avaialable features for paying companies\n        LEFT JOIN checkins ci on ci.company_id = zd.company_id\n        LEFT JOIN highfives h on h.company_id = zd.company_id\n        LEFT JOIN one_on_ones o on o.company_id = zd.company_id\n        LEFT JOIN bsr ON bsr.company_id = zd.company_id\n        LEFT JOIN last_bsr_cycle_date lr on lr.company_id = zd.company_id\n        LEFT JOIN okr okr ON okr.company_id = zd.company_id\n        LEFT JOIN engage_campaign_cnt_180d ec on ec.company_id = zd.company_id\n        LEFT JOIN transform_online tro on tro.company_id = zd.company_id\n        LEFT JOIN transform_coaching tc on tc.company_id = zd.company_id\n        LEFT JOIN total_users_30d tu ON tu.company_id = zd.company_id\n        LEFT JOIN engage_briefing_within_30d eb on eb.company_id = zd.company_id\n        LEFT JOIN engage_entitlement_redemption eer on eer.company_id = zd.company_id\n        LEFT JOIN last_engage_score les on les.company_id = zd.company_id\n        LEFT JOIN engage_results_login erl on erl.company_id = zd.company_id\n        LEFT JOIN wau_mau wm on wm.company_id = zd.company_id\n    GROUP BY\n        zd.company_id,\n        oe.id,\n        oe.name,\n        c.name,\n        converted_to_paying,\n        f.checkin_available,\n        f.transform_coaching_available,\n        f.transform_online_available,\n        f.one_on_one_available,\n        f.highfives_available,\n        f.bsr_available,\n        f.okr_available,\n        f.engagement_survey_available,\n        ci.percent_reviewers_reviewed_checkins_28d,\n        h.users_created_highfives_30d,\n        o.users_w_one_on_ones_30d,\n        bsr.company_wide_cycles_365d,\n        okr.percent_users_engaged_w_okr_30d,\n        ec.campaign_cnt_180d,\n        tu.total_users_30d,\n        percent_users_seen_transform_online_30d,\n        percent_transform_coaching_participants_in_sessions_30d,\n        lr.last_completed_bsr_cycle,\n        eb.briefing_within_30d,\n        eer.percent_entitlements_redeemed_paced,\n        eer.months_since_subscription_start,\n        les.most_recent_emplify_score,\n        les.emplify_score_difference,\n        les.emplify_score_change_category,\n        erl.percent_engage_results_users_login_after_survey_ended,\n        wm.wau_mau,\n        wm.weekly_active_users,\n        wm.monthly_active_users,\n        zd.segment_company,\n        zd.segment_customer,\n        tc.transform_coaching_subscription_participants\n)\nSELECT\n    company_id,\n    segment_company,\n    segment_customer,\n    emplify_id,\n    company_name,\n    converted_to_paying,\n    current_paid_seats,\n    users_created_invited,\n    users_accepted_invite,\n    percent_seats_not_created,\n    checkin_available,\n    one_on_one_available,\n    highfives_available,\n    engagement_survey_available,\n    bsr_available,\n    okr_available,\n    transform_coaching_available,\n    transform_online_available,\n    product_available_cnt,\n    products_w_usage as products_healthy_usage,\n    percent_purchased_products_used as percent_purchased_products_healthy,\n    CASE\n        WHEN checkin_available THEN percent_reviewers_reviewed_checkins_28d\n    END as percent_reviewers_reviewed_checkins_28d,\n    CASE\n        WHEN checkin_available THEN checkin_active -- 40% of greater reviewers reviewed checkin last 28 days\n    END as checkin_active,\n    CASE\n        WHEN highfives_available THEN least(NVL(percent_users_created_highfives, 0), 100)\n    END AS percent_users_created_highfives,\n    CASE\n        WHEN highfives_available THEN highfives_active -- 60% or greater users created high five last 30 days\n    END as highfives_active,\n    CASE\n        WHEN one_on_one_available THEN least(NVL(percent_users_w_one_on_one, 0), 100)\n    END AS percent_users_w_one_on_one,\n    CASE\n        WHEN one_on_one_available THEN one_on_one_active -- 50% of greater users with one on ones last 30 days\n    END as one_on_one_active,\n    company_wide_cycle_cnt_365d,\n    CASE\n        WHEN bsr_available THEN bsr_active -- 1 or more company wide (70> or more employeees) cycles\n    END as bsr_active,\n    percent_users_engaged_okr_30d,\n    CASE\n        WHEN okr_available THEN okr_active -- 33% or more users engaged with okr last 30 days\n    END as okr_active,\n    CASE\n        WHEN engagement_survey_available THEN engagement_survey_active -- 1 or more finished engagement_survey,\n    END as engagement_survey_active,\n    engage_campaign_cnt_180d as engagement_survey_cnt,\n    percent_users_seen_transform_online_30d,\n    percent_transform_coaching_participants_in_sessions_30d,\n    transform_coaching_subscription_participants,\n    CASE\n        WHEN transform_online_available THEN transform_online_active\n    END as transform_online_active,\n    --80% or more seats purchased seen on transform online last 30days\n    CASE\n        WHEN transform_coaching_available THEN transform_coaching_active\n    END as transform_coaching_active,\n    -- 80% of more seats purchased in coaching sessions last 30days\n    last_completed_bsr_cycle,\n    transform_coaching_only,\n    transform_online_only,\n    transform_hybrid_only,\n    engage_only,\n    briefing_within_30d,\n    percent_entitlements_redeemed_paced,\n    months_since_subscription_start as months_into_engage_entitlement_subscription,\n    most_recent_emplify_score,\n    emplify_score_difference,\n    emplify_score_change_category,\n    percent_engage_results_users_login_after_survey_ended,\n    weekly_active_users,\n    monthly_active_users,\n    wau_mau\nFROM\n    final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"health_metrics\""}, "model.main.health_engage": {"raw_sql": "with companies as (\n    SELECT\n        DISTINCT company_id,\n        company,\n        o.id as emplify_id\n    FROM\n        prod.arr_daily ad\n        JOIN prod.products p on p.product_id = ad.product_id\n        LEFT JOIN engage.organizations o on o.ff_company_id = ad.company_id\n    WHERE\n        ad.date = (\n            SELECT\n                max(date)\n            FROM\n                prod.arr_daily\n        )\n        AND p.product_group IN ('Engage', 'Perform', 'Total Platform')\n),\n-- data points around the first engage survey\nfirst_survey as (\n    SELECT\n        company_id,\n        emplify_id,\n        started_at as first_survey_start_date,\n        CASE\n            WHEN created_at IS NULL then FALSE\n            else TRUE\n        END as first_survey_created,\n        CASE\n            WHEN started_at IS NULL then FALSE\n            else TRUE\n        END as first_survey_scheduled,\n        status as first_survey_status\n    FROM\n        (\n            SELECT\n                c.emplify_id,\n                c.company_id,\n                created_at,\n                started_at,\n                status,\n                RANK() OVER (\n                    PARTITION BY organization_id\n                    ORDER BY\n                        created_at,\n                        started_at ASC\n                ) as rank\n            FROM\n                companies c\n                LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        )\n    WHERE\n        rank = 1\n),\n-- when does the next engage survey begin?\nnext_scheduled_survey as(\n    SELECT\n        c.company_id,\n        c.emplify_id,\n        MIN(started_at) as next_scheduled_survey_start\n    FROM\n        companies c\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        AND started_at > CURRENT_DATE\n    GROUP BY\n        c.company_id,\n        c.emplify_id\n),\n-- when does the current survey (started previous to today but ends after today) end?\ncurrent_survey_end as (\n    SELECT\n        c.company_id,\n        c.emplify_id,\n        MIN(scheduled_ended_at) as current_survey_end_date\n    FROM\n        companies c\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        AND started_at < CURRENT_DATE\n        AND scheduled_ended_at > CURRENT_DATE\n        AND ended_at IS NULL -- not completed\n    GROUP BY\n        c.company_id,\n        c.emplify_id\n),\n-- data points are the most recent \"finished\" survey\nlast_survey_ended as (\n    SELECT\n        c.company_id,\n        c.emplify_id,\n        MAX(ended_at) as last_survey_end_date,\n        date_diff('days', last_survey_end_date, CURRENT_DATE) AS days_since_last_survey_ended\n    FROM\n        companies c\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        AND status = 'finished'\n    GROUP BY\n        c.company_id,\n        c.emplify_id\n),\n--for those that were fist billed in 2022, what was the first date they were paying for a product that includes Engage?\nfirst_purchase_date as (\n    SELECT\n        c.company_id,\n        MIN(date) as first_purchase_date\n    FROM\n        companies c\n        JOIN (\n            SELECT\n                c.company_id,\n                MIN(ad.date) as first_billed_at\n            FROM\n                companies c\n                JOIN prod.arr_daily ad on ad.company_id = c.company_id\n            GROUP BY\n                c.company_id\n            HAVING\n                min(date) >= '2022-01-01'\n        ) cp on cp.company_id = c.company_id -- companies first billed in 2022 because we do not have product data prior\n        JOIN prod.arr_daily ad on ad.company_id = c.company_id\n        JOIN prod.products p on p.product_id = ad.product_id\n        AND p.product_group IN ('Engage', 'Perform', 'Total Platform') --- first date purchased Engage\n    GROUP BY\n        c.company_id\n)\nSELECT\n    c.company_id,\n    c.emplify_id,\n    c.company,\n    p.first_name || ' ' || p.last_name as engage_admin,\n    e.email_address as engage_admin_email,\n    fs.first_survey_start_date,\n    fs.first_survey_created,\n    fs.first_survey_scheduled,\n    fs.first_survey_status,\n    ns.next_scheduled_survey_start,\n    cs.current_survey_end_date,\n    ls.last_survey_end_date,\n    ls.days_since_last_survey_ended,\n    fpd.first_purchase_date,\n    CASE\n        WHEN (\n            fs.first_survey_scheduled = FALSE\n            OR fs.first_survey_scheduled IS NULL\n        )\n        AND first_purchase_date < CURRENT_DATE THEN date_diff('days', first_purchase_date, CURRENT_DATE)\n    END as days_from_purchase_without_survey_scheduled,\n    CASE\n        WHEN cs.current_survey_end_date IS NULL THEN NULL\n        WHEN COUNT(\n            DISTINCT CASE\n                WHEN bs.started_at > cs.current_survey_end_date THEN bs.id\n            END\n        ) >= 1 THEN TRUE\n        ELSE FALSE\n    END as briefing_scheduled_after_current_survey,\n    CASE\n        WHEN ns.next_scheduled_survey_start IS NULL THEN NULL\n        WHEN COUNT(\n            DISTINCT CASE\n                WHEN bs.started_at > ns.next_scheduled_survey_start THEN bs.id\n            END\n        ) >= 1 THEN TRUE\n        ELSE FALSE\n    END as briefing_scheduled_after_future_survey,\n    CASE\n        WHEN ls.last_survey_end_date IS NULL THEN NULL\n        WHEN COUNT(\n            DISTINCT CASE\n                WHEN bs.started_at > ls.last_survey_end_date THEN bs.id\n            END\n        ) >= 1 THEN TRUE\n        ELSE FALSE\n    END as briefing_after_last_survey\nFROM\n    companies c\n    JOIN first_survey fs on fs.company_id = c.company_id\n    JOIN next_scheduled_survey ns on ns.company_id = c.company_id\n    JOIN current_survey_end cs on cs.company_id = c.company_id\n    JOIN last_survey_ended ls on ls.company_id = c.company_id\n    LEFT JOIN first_purchase_date fpd on fpd.company_id = c.company_id\n    LEFT JOIN engage.coaching_sessions bs on bs.organization_id = c.emplify_id\n    AND coaching_session_type_id = 8\n    AND status in('scheduled', 'completed')\n    LEFT JOIN -- in case of more than one engage admin\n    (\n        SELECT\n            *,\n            row_number() OVER (\n                PARTITION BY pr.organization_id\n                ORDER BY\n                    created_at desc\n            ) AS row_n\n        FROM\n            engage.people_roles pr\n        WHERE\n            pr.role_id = 8\n    ) pr ON pr.organization_id = c.emplify_id\n    AND pr.row_n = 1\n    LEFT JOIN engage.people p on p.id = pr.person_id\n    LEFT JOIN engage.employees e on e.person_id = pr.person_id\n    AND e.organization_id = pr.organization_id\n    AND e.deleted_at IS NULL\nGROUP BY\n    c.company_id,\n    c.emplify_id,\n    c.company,\n    p.first_name || ' ' || p.last_name,\n    e.email_address,\n    fs.first_survey_start_date,\n    fs.first_survey_created,\n    fs.first_survey_scheduled,\n    fs.first_survey_status,\n    ns.next_scheduled_survey_start,\n    cs.current_survey_end_date,\n    ls.last_survey_end_date,\n    ls.days_since_last_survey_ended,\n    fpd.first_purchase_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "health", "health_engage"], "unique_id": "model.main.health_engage", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "health/health_engage.sql", "original_file_path": "models/health/health_engage.sql", "name": "health_engage", "alias": "health_engage", "checksum": {"name": "sha256", "checksum": "ba72f4fe1dc9eea73fb7b635a2f0b1d782510ac63fb33b2ff684e2d2baf0cdd4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/health/health_engage.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.4201097, "compiled_sql": "with companies as (\n    SELECT\n        DISTINCT company_id,\n        company,\n        o.id as emplify_id\n    FROM\n        prod.arr_daily ad\n        JOIN prod.products p on p.product_id = ad.product_id\n        LEFT JOIN engage.organizations o on o.ff_company_id = ad.company_id\n    WHERE\n        ad.date = (\n            SELECT\n                max(date)\n            FROM\n                prod.arr_daily\n        )\n        AND p.product_group IN ('Engage', 'Perform', 'Total Platform')\n),\n-- data points around the first engage survey\nfirst_survey as (\n    SELECT\n        company_id,\n        emplify_id,\n        started_at as first_survey_start_date,\n        CASE\n            WHEN created_at IS NULL then FALSE\n            else TRUE\n        END as first_survey_created,\n        CASE\n            WHEN started_at IS NULL then FALSE\n            else TRUE\n        END as first_survey_scheduled,\n        status as first_survey_status\n    FROM\n        (\n            SELECT\n                c.emplify_id,\n                c.company_id,\n                created_at,\n                started_at,\n                status,\n                RANK() OVER (\n                    PARTITION BY organization_id\n                    ORDER BY\n                        created_at,\n                        started_at ASC\n                ) as rank\n            FROM\n                companies c\n                LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        )\n    WHERE\n        rank = 1\n),\n-- when does the next engage survey begin?\nnext_scheduled_survey as(\n    SELECT\n        c.company_id,\n        c.emplify_id,\n        MIN(started_at) as next_scheduled_survey_start\n    FROM\n        companies c\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        AND started_at > CURRENT_DATE\n    GROUP BY\n        c.company_id,\n        c.emplify_id\n),\n-- when does the current survey (started previous to today but ends after today) end?\ncurrent_survey_end as (\n    SELECT\n        c.company_id,\n        c.emplify_id,\n        MIN(scheduled_ended_at) as current_survey_end_date\n    FROM\n        companies c\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        AND started_at < CURRENT_DATE\n        AND scheduled_ended_at > CURRENT_DATE\n        AND ended_at IS NULL -- not completed\n    GROUP BY\n        c.company_id,\n        c.emplify_id\n),\n-- data points are the most recent \"finished\" survey\nlast_survey_ended as (\n    SELECT\n        c.company_id,\n        c.emplify_id,\n        MAX(ended_at) as last_survey_end_date,\n        date_diff('days', last_survey_end_date, CURRENT_DATE) AS days_since_last_survey_ended\n    FROM\n        companies c\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = c.emplify_id\n        AND status = 'finished'\n    GROUP BY\n        c.company_id,\n        c.emplify_id\n),\n--for those that were fist billed in 2022, what was the first date they were paying for a product that includes Engage?\nfirst_purchase_date as (\n    SELECT\n        c.company_id,\n        MIN(date) as first_purchase_date\n    FROM\n        companies c\n        JOIN (\n            SELECT\n                c.company_id,\n                MIN(ad.date) as first_billed_at\n            FROM\n                companies c\n                JOIN prod.arr_daily ad on ad.company_id = c.company_id\n            GROUP BY\n                c.company_id\n            HAVING\n                min(date) >= '2022-01-01'\n        ) cp on cp.company_id = c.company_id -- companies first billed in 2022 because we do not have product data prior\n        JOIN prod.arr_daily ad on ad.company_id = c.company_id\n        JOIN prod.products p on p.product_id = ad.product_id\n        AND p.product_group IN ('Engage', 'Perform', 'Total Platform') --- first date purchased Engage\n    GROUP BY\n        c.company_id\n)\nSELECT\n    c.company_id,\n    c.emplify_id,\n    c.company,\n    p.first_name || ' ' || p.last_name as engage_admin,\n    e.email_address as engage_admin_email,\n    fs.first_survey_start_date,\n    fs.first_survey_created,\n    fs.first_survey_scheduled,\n    fs.first_survey_status,\n    ns.next_scheduled_survey_start,\n    cs.current_survey_end_date,\n    ls.last_survey_end_date,\n    ls.days_since_last_survey_ended,\n    fpd.first_purchase_date,\n    CASE\n        WHEN (\n            fs.first_survey_scheduled = FALSE\n            OR fs.first_survey_scheduled IS NULL\n        )\n        AND first_purchase_date < CURRENT_DATE THEN date_diff('days', first_purchase_date, CURRENT_DATE)\n    END as days_from_purchase_without_survey_scheduled,\n    CASE\n        WHEN cs.current_survey_end_date IS NULL THEN NULL\n        WHEN COUNT(\n            DISTINCT CASE\n                WHEN bs.started_at > cs.current_survey_end_date THEN bs.id\n            END\n        ) >= 1 THEN TRUE\n        ELSE FALSE\n    END as briefing_scheduled_after_current_survey,\n    CASE\n        WHEN ns.next_scheduled_survey_start IS NULL THEN NULL\n        WHEN COUNT(\n            DISTINCT CASE\n                WHEN bs.started_at > ns.next_scheduled_survey_start THEN bs.id\n            END\n        ) >= 1 THEN TRUE\n        ELSE FALSE\n    END as briefing_scheduled_after_future_survey,\n    CASE\n        WHEN ls.last_survey_end_date IS NULL THEN NULL\n        WHEN COUNT(\n            DISTINCT CASE\n                WHEN bs.started_at > ls.last_survey_end_date THEN bs.id\n            END\n        ) >= 1 THEN TRUE\n        ELSE FALSE\n    END as briefing_after_last_survey\nFROM\n    companies c\n    JOIN first_survey fs on fs.company_id = c.company_id\n    JOIN next_scheduled_survey ns on ns.company_id = c.company_id\n    JOIN current_survey_end cs on cs.company_id = c.company_id\n    JOIN last_survey_ended ls on ls.company_id = c.company_id\n    LEFT JOIN first_purchase_date fpd on fpd.company_id = c.company_id\n    LEFT JOIN engage.coaching_sessions bs on bs.organization_id = c.emplify_id\n    AND coaching_session_type_id = 8\n    AND status in('scheduled', 'completed')\n    LEFT JOIN -- in case of more than one engage admin\n    (\n        SELECT\n            *,\n            row_number() OVER (\n                PARTITION BY pr.organization_id\n                ORDER BY\n                    created_at desc\n            ) AS row_n\n        FROM\n            engage.people_roles pr\n        WHERE\n            pr.role_id = 8\n    ) pr ON pr.organization_id = c.emplify_id\n    AND pr.row_n = 1\n    LEFT JOIN engage.people p on p.id = pr.person_id\n    LEFT JOIN engage.employees e on e.person_id = pr.person_id\n    AND e.organization_id = pr.organization_id\n    AND e.deleted_at IS NULL\nGROUP BY\n    c.company_id,\n    c.emplify_id,\n    c.company,\n    p.first_name || ' ' || p.last_name,\n    e.email_address,\n    fs.first_survey_start_date,\n    fs.first_survey_created,\n    fs.first_survey_scheduled,\n    fs.first_survey_status,\n    ns.next_scheduled_survey_start,\n    cs.current_survey_end_date,\n    ls.last_survey_end_date,\n    ls.days_since_last_survey_ended,\n    fpd.first_purchase_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"health_engage\""}, "model.main.main_billing_plans": {"raw_sql": "WITH billing_plans as (\n    SELECT\n        date,\n        company_id,\n        products.product_group,\n        sfdc_id,\n        arr,\n        s.termenddate\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n),\ntransform_billing_plans as (\n    SELECT\n        date,\n        company_id,\n        sfdc_id,\n        product_group,\n        True as is_transform,\n        termenddate\n    FROM\n        billing_plans\n    WHERE\n        product_group = 'Transform'\n),\ntransform_ONLY_billing_plans as (\n    SELECT\n        DISTINCT bp.*\n    FROM\n        transform_billing_plans bp\n        LEFT JOIN billing_plans bp_sub ON (\n            bp_sub.company_id = bp.company_id\n            OR bp_sub.sfdc_id = bp.sfdc_id\n        ) AND bp_sub.date = bp.date\n        -- no other record then transform in billing plans means this is Transform only customer\n        AND bp_sub.product_group != 'Transform'\n    WHERE\n        bp_sub.product_group IS null\n),\nnon_transform_billing_plans AS (\n    SELECT\n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY date,\n            company_id,\n            sfdc_id\n            ORDER BY\n                arr DESC\n        ) AS relevant_record\n    FROM\n        billing_plans\n    WHERE\n        product_group != 'Transform'\n),\nmain_non_transform_billing_plans AS (\n    SELECT DISTINCT\n        ntbp.date,\n        ntbp.company_id,\n        ntbp.sfdc_id,\n        ntbp.product_group,\n        CASE\n            WHEN tbp.company_id IS NULL THEN False\n            ELSE True\n        END AS is_transform,\n        ntbp.termenddate\n    FROM\n        non_transform_billing_plans ntbp\n        LEFT JOIN transform_billing_plans tbp ON (tbp.company_id = ntbp.company_id\n        OR tbp.sfdc_id = ntbp.sfdc_id) AND tbp.date = ntbp.date\n    WHERE\n        relevant_record = 1\n),\nmain_billing_plans as (\n    SELECT\n        DISTINCT *\n    FROM\n        main_non_transform_billing_plans\n    UNION\n    ALL\n    SELECT\n        DISTINCT *\n    FROM\n        transform_ONLY_billing_plans\n)\n\nSELECT\n    *,\n    row_number() over (partition by company_id order by date desc) as latest_record\nFROM main_billing_plans", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "helpers", "prod", "main_billing_plans"], "unique_id": "model.main.main_billing_plans", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "helpers/prod/main_billing_plans.sql", "original_file_path": "models/helpers/prod/main_billing_plans.sql", "name": "main_billing_plans", "alias": "main_billing_plans", "checksum": {"name": "sha256", "checksum": "b095271e76888673e6fe55d0b431b22f8f8daea97c4418c7d862728805391911"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/helpers/prod/main_billing_plans.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "ephemeral", "bind": false}, "created_at": 1669795234.4225678, "compiled_sql": "WITH billing_plans as (\n    SELECT\n        date,\n        company_id,\n        products.product_group,\n        sfdc_id,\n        arr,\n        s.termenddate\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n),\ntransform_billing_plans as (\n    SELECT\n        date,\n        company_id,\n        sfdc_id,\n        product_group,\n        True as is_transform,\n        termenddate\n    FROM\n        billing_plans\n    WHERE\n        product_group = 'Transform'\n),\ntransform_ONLY_billing_plans as (\n    SELECT\n        DISTINCT bp.*\n    FROM\n        transform_billing_plans bp\n        LEFT JOIN billing_plans bp_sub ON (\n            bp_sub.company_id = bp.company_id\n            OR bp_sub.sfdc_id = bp.sfdc_id\n        ) AND bp_sub.date = bp.date\n        -- no other record then transform in billing plans means this is Transform only customer\n        AND bp_sub.product_group != 'Transform'\n    WHERE\n        bp_sub.product_group IS null\n),\nnon_transform_billing_plans AS (\n    SELECT\n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY date,\n            company_id,\n            sfdc_id\n            ORDER BY\n                arr DESC\n        ) AS relevant_record\n    FROM\n        billing_plans\n    WHERE\n        product_group != 'Transform'\n),\nmain_non_transform_billing_plans AS (\n    SELECT DISTINCT\n        ntbp.date,\n        ntbp.company_id,\n        ntbp.sfdc_id,\n        ntbp.product_group,\n        CASE\n            WHEN tbp.company_id IS NULL THEN False\n            ELSE True\n        END AS is_transform,\n        ntbp.termenddate\n    FROM\n        non_transform_billing_plans ntbp\n        LEFT JOIN transform_billing_plans tbp ON (tbp.company_id = ntbp.company_id\n        OR tbp.sfdc_id = ntbp.sfdc_id) AND tbp.date = ntbp.date\n    WHERE\n        relevant_record = 1\n),\nmain_billing_plans as (\n    SELECT\n        DISTINCT *\n    FROM\n        main_non_transform_billing_plans\n    UNION\n    ALL\n    SELECT\n        DISTINCT *\n    FROM\n        transform_ONLY_billing_plans\n)\n\nSELECT\n    *,\n    row_number() over (partition by company_id order by date desc) as latest_record\nFROM main_billing_plans", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.main.edge_bill_ts": {"raw_sql": "WITH zuora_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n        AND source = 'zuora'\n        AND arr > 0\n),\nhistorical_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n    WHERE\n        booked_not_active is null\n        AND source in ('historical_emplify', 'historical_15five')\n        AND arr > 0\n)\nSELECT * FROM zuora_arr_records\nUNION ALL\nSELECT * FROM historical_arr_records", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "helpers", "prod", "edge_bill_ts"], "unique_id": "model.main.edge_bill_ts", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "helpers/prod/edge_bill_ts.sql", "original_file_path": "models/helpers/prod/edge_bill_ts.sql", "name": "edge_bill_ts", "alias": "edge_bill_ts", "checksum": {"name": "sha256", "checksum": "b00c18a3c03718749d6f17cba415dadeeb87aefeecf281b9a379673826a2610b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/helpers/prod/edge_bill_ts.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "ephemeral", "bind": false}, "created_at": 1669795234.4249997, "compiled_sql": "WITH zuora_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n        AND source = 'zuora'\n        AND arr > 0\n),\nhistorical_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n    WHERE\n        booked_not_active is null\n        AND source in ('historical_emplify', 'historical_15five')\n        AND arr > 0\n)\nSELECT * FROM zuora_arr_records\nUNION ALL\nSELECT * FROM historical_arr_records", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.main.transform_accounts": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith accounts_from_zuora as (\n    select id as zuora_acc_id,\n    name as name,\n    crmid, \n    x15five_com_company_id__c\n    from zuora.account\n),\n\ntransform_accounts as (\n    select afz.*\n    from accounts_from_zuora afz\n    join {{ ref('bi_billing_plans') }} bp on bp.zuora_acc_id = afz.zuora_acc_id and bp.product_name = 'Transform' \n),\n\ntransform_only_accounts as (\n    select toa.*\n    from transform_accounts toa\n    left join {{ ref('bi_billing_plans') }} bp on bp.zuora_acc_id = toa.zuora_acc_id and bp.product_name != 'Transform'\n    -- some of the account are already in 15Five db and in customer table so we would exclude them here to avoid duplicates\n    left join pg.ff_zuoraaccount ffz on toa.zuora_acc_id = ffz.account_id\n    where bp.product_name is null\n    and ffz.id is null\n)\n\nselect distinct * from transform_only_accounts toa", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.bi_billing_plans", "model.main.bi_billing_plans"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "transform", "transform_accounts"], "unique_id": "model.main.transform_accounts", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "transform/transform_accounts.sql", "original_file_path": "models/transform/transform_accounts.sql", "name": "transform_accounts", "alias": "transform_accounts", "checksum": {"name": "sha256", "checksum": "ce6ea84a55361a5459e8b64d56853d26cc46a0de86bc8776c65b30231ed20912"}, "tags": [], "refs": [["bi_billing_plans"], ["bi_billing_plans"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/transform/transform_accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.427767, "compiled_sql": "\n\nwith accounts_from_zuora as (\n    select id as zuora_acc_id,\n    name as name,\n    crmid, \n    x15five_com_company_id__c\n    from zuora.account\n),\n\ntransform_accounts as (\n    select afz.*\n    from accounts_from_zuora afz\n    join \"snowdb\".\"analytics\".\"bi_billing_plans\" bp on bp.zuora_acc_id = afz.zuora_acc_id and bp.product_name = 'Transform' \n),\n\ntransform_only_accounts as (\n    select toa.*\n    from transform_accounts toa\n    left join \"snowdb\".\"analytics\".\"bi_billing_plans\" bp on bp.zuora_acc_id = toa.zuora_acc_id and bp.product_name != 'Transform'\n    -- some of the account are already in 15Five db and in customer table so we would exclude them here to avoid duplicates\n    left join pg.ff_zuoraaccount ffz on toa.zuora_acc_id = ffz.account_id\n    where bp.product_name is null\n    and ffz.id is null\n)\n\nselect distinct * from transform_only_accounts toa", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"transform_accounts\""}, "model.main.transform_customers": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n{% set pref_sfdc = \"sfdc\" %}\n\nwith transform_only_customers as (\n    select \n        ta.zuora_acc_id as transform_id,\n        ta.name,\n        ta.crmid as sfdc_id,\n        ta.zuora_acc_id as zuora_acc_id\n    from {{ ref('transform_accounts') }} ta\n)\n\nselect * from transform_only_customers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.transform_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "transform", "transform_customers"], "unique_id": "model.main.transform_customers", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "transform/transform_customers.sql", "original_file_path": "models/transform/transform_customers.sql", "name": "transform_customers", "alias": "transform_customers", "checksum": {"name": "sha256", "checksum": "3e4711e9c8dd405e5fd49600da179c14b3d4ebd3a7195e7393a39c51ef19aa5b"}, "tags": [], "refs": [["transform_accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/transform/transform_customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.4301908, "compiled_sql": "\n\n\n\nwith transform_only_customers as (\n    select \n        ta.zuora_acc_id as transform_id,\n        ta.name,\n        ta.crmid as sfdc_id,\n        ta.zuora_acc_id as zuora_acc_id\n    from \"snowdb\".\"analytics\".\"transform_accounts\" ta\n)\n\nselect * from transform_only_customers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"transform_customers\""}, "model.main.ff_highfivecomment": {"raw_sql": "with c100_hf_c as (\n    select\n        100 as cloud,\n        hc.*\n    from pg.high_fives_highfivecomment hc\n    join pg.high_fives_highfive hf on hc.high_five_id = hf.id\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_hf_c as (\n    select\n        101 as cloud,\n        hc.*\n    from c101.high_fives_highfivecomment hc\n    join c101.high_fives_highfive hf on hc.high_five_id = hf.id\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_hf_c as (\n    select\n        102 as cloud,\n        hc.*\n    from c102.high_fives_highfivecomment hc\n    join c102.high_fives_highfive hf on hc.high_five_id = hf.id\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_hf_c\n    union all\n    select * from c101_hf_c\n    union all\n    select * from c102_hf_c\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_highfivecomment"], "unique_id": "model.main.ff_highfivecomment", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_highfivecomment.sql", "original_file_path": "models/stage/ff_highfivecomment.sql", "name": "ff_highfivecomment", "alias": "ff_highfivecomment", "checksum": {"name": "sha256", "checksum": "ef1651fbe670895ce9d60ca8b577bdac1d4b163c0bc7c03c5dcbbf9e65b1a586"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_highfivecomment.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4334822, "compiled_sql": "with c100_hf_c as (\n    select\n        100 as cloud,\n        hc.*\n    from pg.high_fives_highfivecomment hc\n    join pg.high_fives_highfive hf on hc.high_five_id = hf.id\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_hf_c as (\n    select\n        101 as cloud,\n        hc.*\n    from c101.high_fives_highfivecomment hc\n    join c101.high_fives_highfive hf on hc.high_five_id = hf.id\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = 34572\n),\n\nc102_hf_c as (\n    select\n        102 as cloud,\n        hc.*\n    from c102.high_fives_highfivecomment hc\n    join c102.high_fives_highfive hf on hc.high_five_id = hf.id\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = 55006\n)\n\nselect * from (\n    select * from c100_hf_c\n    union all\n    select * from c101_hf_c\n    union all\n    select * from c102_hf_c\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_highfivecomment\""}, "model.main.ff_reportintermediatemodel": {"raw_sql": "with c100_reportintermediatemodel as (\n    select\n        100 as cloud,\n        rim.*\n    from pg.reportintermediatemodel rim\n    join pg.ff_company c on c.id = rim.company_id\n    where c.id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_reportintermediatemodel as (\n    select\n        101 as cloud,\n        rim.*\n    from c101.reportintermediatemodel rim\n    join c101.ff_company c on c.id = rim.company_id\n    where c.id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_reportintermediatemodel as (\n    select\n        102 as cloud,\n        rim.*\n    from c102.reportintermediatemodel rim\n    join c102.ff_company c on c.id = rim.company_id\n    where c.id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_reportintermediatemodel\n    union all\n    select * from c101_reportintermediatemodel\n    union all\n    select * from c102_reportintermediatemodel\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_reportintermediatemodel"], "unique_id": "model.main.ff_reportintermediatemodel", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_reportintermediatemodel.sql", "original_file_path": "models/stage/ff_reportintermediatemodel.sql", "name": "ff_reportintermediatemodel", "alias": "ff_reportintermediatemodel", "checksum": {"name": "sha256", "checksum": "da44140f6136dbeddc2ca45a3880aa0376fba88d54213e54bf5f4e26f6284b40"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_reportintermediatemodel.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4376774, "compiled_sql": "with c100_reportintermediatemodel as (\n    select\n        100 as cloud,\n        rim.*\n    from pg.reportintermediatemodel rim\n    join pg.ff_company c on c.id = rim.company_id\n    where c.id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_reportintermediatemodel as (\n    select\n        101 as cloud,\n        rim.*\n    from c101.reportintermediatemodel rim\n    join c101.ff_company c on c.id = rim.company_id\n    where c.id = 34572\n),\n\nc102_reportintermediatemodel as (\n    select\n        102 as cloud,\n        rim.*\n    from c102.reportintermediatemodel rim\n    join c102.ff_company c on c.id = rim.company_id\n    where c.id = 55006\n)\n\nselect * from (\n    select * from c100_reportintermediatemodel\n    union all\n    select * from c101_reportintermediatemodel\n    union all\n    select * from c102_reportintermediatemodel\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_reportintermediatemodel\""}, "model.main.ff_company": {"raw_sql": "with c100_company as (\n    select\n        100 as cloud,\n        *\n    from pg.ff_company\n    where id not in {{ var(\"ext_cloud_id_list\") }}\n),\n\nc101_company as (\n    select\n        101 as cloud,\n        *\n    from c101.ff_company\n    where id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_company as (\n    select\n        102 as cloud,\n        *\n    from c102.ff_company\n    where id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_company\n    union all\n    select * from c101_company\n    union all\n    select * from c102_company\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_company"], "unique_id": "model.main.ff_company", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_company.sql", "original_file_path": "models/stage/ff_company.sql", "name": "ff_company", "alias": "ff_company", "checksum": {"name": "sha256", "checksum": "af5af06e35510eff8529f14e35f641ab43247490a02cb44abf3b4b9e107d4ced"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_company.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4416635, "compiled_sql": "with c100_company as (\n    select\n        100 as cloud,\n        *\n    from pg.ff_company\n    where id not in ('34572', '55006', '58539')\n),\n\nc101_company as (\n    select\n        101 as cloud,\n        *\n    from c101.ff_company\n    where id = 34572\n),\n\nc102_company as (\n    select\n        102 as cloud,\n        *\n    from c102.ff_company\n    where id = 55006\n)\n\nselect * from (\n    select * from c100_company\n    union all\n    select * from c101_company\n    union all\n    select * from c102_company\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_company\""}, "model.main.ff_highfive": {"raw_sql": "with c100_hfs as (\n    select\n        100 as cloud,\n        hf.*\n    from pg.high_fives_highfive hf\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_hfs as (\n    select\n        101 as cloud,\n        hf.*\n    from c101.high_fives_highfive hf\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_hfs as (\n    select\n        102 as cloud,\n        hf.*\n    from c102.high_fives_highfive hf\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_hfs\n    union all\n    select * from c101_hfs\n    union all\n    select * from c102_hfs\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_highfive"], "unique_id": "model.main.ff_highfive", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_highfive.sql", "original_file_path": "models/stage/ff_highfive.sql", "name": "ff_highfive", "alias": "ff_highfive", "checksum": {"name": "sha256", "checksum": "721a5ec8fa31f37e1d8effcbf26c589a526ebee96219dedaa04e99b0f3ffc1a9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_highfive.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4454784, "compiled_sql": "with c100_hfs as (\n    select\n        100 as cloud,\n        hf.*\n    from pg.high_fives_highfive hf\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_hfs as (\n    select\n        101 as cloud,\n        hf.*\n    from c101.high_fives_highfive hf\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = 34572\n),\n\nc102_hfs as (\n    select\n        102 as cloud,\n        hf.*\n    from c102.high_fives_highfive hf\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = 55006\n)\n\nselect * from (\n    select * from c100_hfs\n    union all\n    select * from c101_hfs\n    union all\n    select * from c102_hfs\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_highfive\""}, "model.main.ff_user": {"raw_sql": "with c100_users as (\n    select\n        100 as cloud,\n        u.*\n    from pg.ff_user u\n    join pg.ff_company c on c.id = u.company_id\n    where company_id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\n\nc101_users as (\n    select\n        101 as cloud,\n        *\n    from c101.ff_user\n    where company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_users as (\n    select\n        102 as cloud,\n        *\n    from c102.ff_user\n    where company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from c100_users\nunion all\nselect * from c101_users\nunion all\nselect * from c102_users", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_user"], "unique_id": "model.main.ff_user", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_user.sql", "original_file_path": "models/stage/ff_user.sql", "name": "ff_user", "alias": "ff_user", "checksum": {"name": "sha256", "checksum": "0ff5585d3ed96205d5f65ab1c29ea66e0f2271e50b9ebf79818b9a2315df4190"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4722242, "compiled_sql": "with c100_users as (\n    select\n        100 as cloud,\n        u.*\n    from pg.ff_user u\n    join pg.ff_company c on c.id = u.company_id\n    where company_id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\n\nc101_users as (\n    select\n        101 as cloud,\n        *\n    from c101.ff_user\n    where company_id = 34572\n),\n\nc102_users as (\n    select\n        102 as cloud,\n        *\n    from c102.ff_user\n    where company_id = 55006\n)\n\nselect * from c100_users\nunion all\nselect * from c101_users\nunion all\nselect * from c102_users", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_user\""}, "model.main.ff_zuoraaccount": {"raw_sql": "with c100_zuoraaccount as (\n    select\n        100 as cloud,\n        *\n    from pg.ff_zuoraaccount\n    where company_id not in {{ var(\"ext_cloud_id_list\") }}\n),\n\nc101_zuoraaccount as (\n    select\n        101 as cloud,\n        *\n    from c101.ff_zuoraaccount\n    where company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_zuoraaccount as (\n    select\n        102 as cloud,\n        *\n    from c102.ff_zuoraaccount\n    where company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_zuoraaccount\n    union all\n    select * from c101_zuoraaccount\n    union all\n    select * from c102_zuoraaccount\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_zuoraaccount"], "unique_id": "model.main.ff_zuoraaccount", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_zuoraaccount.sql", "original_file_path": "models/stage/ff_zuoraaccount.sql", "name": "ff_zuoraaccount", "alias": "ff_zuoraaccount", "checksum": {"name": "sha256", "checksum": "258b88634321f7af605b936558640ab00ef7ef4702ced18c1f03aaa9902010e0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_zuoraaccount.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4760342, "compiled_sql": "with c100_zuoraaccount as (\n    select\n        100 as cloud,\n        *\n    from pg.ff_zuoraaccount\n    where company_id not in ('34572', '55006', '58539')\n),\n\nc101_zuoraaccount as (\n    select\n        101 as cloud,\n        *\n    from c101.ff_zuoraaccount\n    where company_id = 34572\n),\n\nc102_zuoraaccount as (\n    select\n        102 as cloud,\n        *\n    from c102.ff_zuoraaccount\n    where company_id = 55006\n)\n\nselect * from (\n    select * from c100_zuoraaccount\n    union all\n    select * from c101_zuoraaccount\n    union all\n    select * from c102_zuoraaccount\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_zuoraaccount\""}, "model.main.ff_answer": {"raw_sql": "with c100_answer as (\n    select\n        100 as cloud,\n        answer.*\n    from pg.x_ff_answer answer\n    join pg.ff_user u on u.id = answer.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where c.id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_answer as (\n    select\n        101 as cloud,\n        answer.*\n    from c101.x_ff_answer answer\n    join c101.ff_user u on u.id = answer.user_id\n    where u.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_answer as (\n    select\n        102 as cloud,\n        answer.*\n    from c102.x_ff_answer answer\n    join c102.ff_user u on u.id = answer.user_id\n    where u.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_answer\n    union all\n    select * from c101_answer\n    union all\n    select * from c102_answer\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_answer"], "unique_id": "model.main.ff_answer", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_answer.sql", "original_file_path": "models/stage/ff_answer.sql", "name": "ff_answer", "alias": "ff_answer", "checksum": {"name": "sha256", "checksum": "41b785f4c802fcf0c33820f2753e9ced3ac4994ee33c4008d9a028f2c49edaf3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_answer.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4798205, "compiled_sql": "with c100_answer as (\n    select\n        100 as cloud,\n        answer.*\n    from pg.x_ff_answer answer\n    join pg.ff_user u on u.id = answer.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where c.id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_answer as (\n    select\n        101 as cloud,\n        answer.*\n    from c101.x_ff_answer answer\n    join c101.ff_user u on u.id = answer.user_id\n    where u.company_id = 34572\n),\n\nc102_answer as (\n    select\n        102 as cloud,\n        answer.*\n    from c102.x_ff_answer answer\n    join c102.ff_user u on u.id = answer.user_id\n    where u.company_id = 55006\n)\n\nselect * from (\n    select * from c100_answer\n    union all\n    select * from c101_answer\n    union all\n    select * from c102_answer\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_answer\""}, "model.main.ff_highfivemention": {"raw_sql": "with c100_hf_mention as (\n    select\n        100 as cloud,\n        hfm.*\n    from pg.high_fives_highfivemention hfm\n    join pg.high_fives_highfive hf on hfm.high_five_id = hf.id\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_hf_mention as (\n    select\n        101 as cloud,\n        hfm.*\n    from c101.high_fives_highfivemention hfm\n    join c101.high_fives_highfive hf on hfm.high_five_id = hf.id\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_hf_mention as (\n    select\n        102 as cloud,\n        hfm.*\n    from c102.high_fives_highfivemention hfm\n    join c102.high_fives_highfive hf on hfm.high_five_id = hf.id\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_hf_mention\n    union all\n    select * from c101_hf_mention\n    union all\n    select * from c102_hf_mention\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_highfivemention"], "unique_id": "model.main.ff_highfivemention", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_highfivemention.sql", "original_file_path": "models/stage/ff_highfivemention.sql", "name": "ff_highfivemention", "alias": "ff_highfivemention", "checksum": {"name": "sha256", "checksum": "d7aea8352fab13e017fa6533d4ed0c469faec5f1927043dbfdd1b6d2e9246c24"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_highfivemention.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.483616, "compiled_sql": "with c100_hf_mention as (\n    select\n        100 as cloud,\n        hfm.*\n    from pg.high_fives_highfivemention hfm\n    join pg.high_fives_highfive hf on hfm.high_five_id = hf.id\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_hf_mention as (\n    select\n        101 as cloud,\n        hfm.*\n    from c101.high_fives_highfivemention hfm\n    join c101.high_fives_highfive hf on hfm.high_five_id = hf.id\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = 34572\n),\n\nc102_hf_mention as (\n    select\n        102 as cloud,\n        hfm.*\n    from c102.high_fives_highfivemention hfm\n    join c102.high_fives_highfive hf on hfm.high_five_id = hf.id\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = 55006\n)\n\nselect * from (\n    select * from c100_hf_mention\n    union all\n    select * from c101_hf_mention\n    union all\n    select * from c102_hf_mention\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_highfivemention\""}, "model.main.ff_report": {"raw_sql": "with c100_report as (\n    select\n        100 as cloud,\n        r.*\n    from pg.report r\n    join pg.ff_user u on u.id = r.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where c.id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_report as (\n    select\n        101 as cloud,\n        r.*\n    from c101.report r\n    join c101.ff_user u on u.id = r.user_id\n    where u.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_report as (\n    select\n        102 as cloud,\n        r.*\n    from c102.report r\n    join c102.ff_user u on u.id = r.user_id\n    where u.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_report\n    union all\n    select * from c101_report\n    union all\n    select * from c102_report\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_report"], "unique_id": "model.main.ff_report", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_report.sql", "original_file_path": "models/stage/ff_report.sql", "name": "ff_report", "alias": "ff_report", "checksum": {"name": "sha256", "checksum": "29c31b0d29829268c1e2f3f37b8698ae47fb7e3a558ce887173b53169b348e44"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4873943, "compiled_sql": "with c100_report as (\n    select\n        100 as cloud,\n        r.*\n    from pg.report r\n    join pg.ff_user u on u.id = r.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where c.id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_report as (\n    select\n        101 as cloud,\n        r.*\n    from c101.report r\n    join c101.ff_user u on u.id = r.user_id\n    where u.company_id = 34572\n),\n\nc102_report as (\n    select\n        102 as cloud,\n        r.*\n    from c102.report r\n    join c102.ff_user u on u.id = r.user_id\n    where u.company_id = 55006\n)\n\nselect * from (\n    select * from c100_report\n    union all\n    select * from c101_report\n    union all\n    select * from c102_report\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_report\""}, "model.main.ff_salesforcecompanyaccount": {"raw_sql": "with c100_sfdc as (\n    select\n        100 as cloud,\n        *\n    from pg.salesforce_salesforcecompanyaccount\n    where company_id not in {{ var(\"ext_cloud_id_list\") }}\n),\n\nc101_sfdc as (\n    select\n        101 as cloud,\n        *\n    from c101.salesforce_salesforcecompanyaccount\n    where company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_sfdc as (\n    select\n        102 as cloud,\n        *\n    from c102.salesforce_salesforcecompanyaccount\n    where company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_sfdc\n    union all\n    select * from c101_sfdc\n    union all\n    select * from c102_sfdc\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_salesforcecompanyaccount"], "unique_id": "model.main.ff_salesforcecompanyaccount", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_salesforcecompanyaccount.sql", "original_file_path": "models/stage/ff_salesforcecompanyaccount.sql", "name": "ff_salesforcecompanyaccount", "alias": "ff_salesforcecompanyaccount", "checksum": {"name": "sha256", "checksum": "1e58234863ed58e1b7f2e7d8a7fa7b4d4a21344271ab195bcf0e38d1ce5b7b67"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_salesforcecompanyaccount.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4918475, "compiled_sql": "with c100_sfdc as (\n    select\n        100 as cloud,\n        *\n    from pg.salesforce_salesforcecompanyaccount\n    where company_id not in ('34572', '55006', '58539')\n),\n\nc101_sfdc as (\n    select\n        101 as cloud,\n        *\n    from c101.salesforce_salesforcecompanyaccount\n    where company_id = 34572\n),\n\nc102_sfdc as (\n    select\n        102 as cloud,\n        *\n    from c102.salesforce_salesforcecompanyaccount\n    where company_id = 55006\n)\n\nselect * from (\n    select * from c100_sfdc\n    union all\n    select * from c101_sfdc\n    union all\n    select * from c102_sfdc\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_salesforcecompanyaccount\""}, "model.main.ff_highfivelike": {"raw_sql": "with c100_hf_like as (\n    select\n        100 as cloud,\n        hfl.*\n    from pg.high_fives_highfivelike hfl\n    join pg.high_fives_highfive hf on hfl.high_five_id = hf.id\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_hf_like as (\n    select\n        101 as cloud,\n        hfl.*\n    from c101.high_fives_highfivelike hfl\n    join c101.high_fives_highfive hf on hfl.high_five_id = hf.id\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_hf_like as (\n    select\n        102 as cloud,\n        hfl.*\n    from c102.high_fives_highfivelike hfl\n    join c102.high_fives_highfive hf on hfl.high_five_id = hf.id\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_hf_like\n    union all\n    select * from c101_hf_like\n    union all\n    select * from c102_hf_like\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_highfivelike"], "unique_id": "model.main.ff_highfivelike", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_highfivelike.sql", "original_file_path": "models/stage/ff_highfivelike.sql", "name": "ff_highfivelike", "alias": "ff_highfivelike", "checksum": {"name": "sha256", "checksum": "c5b1895e954f5bcedc759255758d4f366b37a0aa27de6bf9808b2f6edf1d098f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_highfivelike.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4957407, "compiled_sql": "with c100_hf_like as (\n    select\n        100 as cloud,\n        hfl.*\n    from pg.high_fives_highfivelike hfl\n    join pg.high_fives_highfive hf on hfl.high_five_id = hf.id\n    join pg.ff_user u on u.id = hf.user_id\n    join pg.ff_company c on c.id = u.company_id\n    where u.company_id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_hf_like as (\n    select\n        101 as cloud,\n        hfl.*\n    from c101.high_fives_highfivelike hfl\n    join c101.high_fives_highfive hf on hfl.high_five_id = hf.id\n    join c101.ff_user u on u.id = hf.user_id\n    where u.company_id = 34572\n),\n\nc102_hf_like as (\n    select\n        102 as cloud,\n        hfl.*\n    from c102.high_fives_highfivelike hfl\n    join c102.high_fives_highfive hf on hfl.high_five_id = hf.id\n    join c102.ff_user u on u.id = hf.user_id\n    where u.company_id = 55006\n)\n\nselect * from (\n    select * from c100_hf_like\n    union all\n    select * from c101_hf_like\n    union all\n    select * from c102_hf_like\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_highfivelike\""}, "model.main.ff_question": {"raw_sql": "with c100_question as (\n    select\n        100 as cloud,\n        ffq.*\n    from pg.ff_question ffq\n    join pg.ff_company c on c.id = ffq.company_id\n    where c.id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_question as (\n    select\n        101 as cloud,\n        ffq.*\n    from c101.ff_question ffq\n    join c101.ff_company c on c.id = ffq.company_id\n    where c.id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_question as (\n    select\n        102 as cloud,\n        ffq.*\n    from c102.ff_question ffq\n    join c102.ff_company c on c.id = ffq.company_id\n    where c.id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_question\n    union all\n    select * from c101_question\n    union all\n    select * from c102_question\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_question"], "unique_id": "model.main.ff_question", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_question.sql", "original_file_path": "models/stage/ff_question.sql", "name": "ff_question", "alias": "ff_question", "checksum": {"name": "sha256", "checksum": "928c30eee959ab2e926a0fdc48b57b4c71162ece4ef39c1336f9032321859c13"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_question.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.4995198, "compiled_sql": "with c100_question as (\n    select\n        100 as cloud,\n        ffq.*\n    from pg.ff_question ffq\n    join pg.ff_company c on c.id = ffq.company_id\n    where c.id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_question as (\n    select\n        101 as cloud,\n        ffq.*\n    from c101.ff_question ffq\n    join c101.ff_company c on c.id = ffq.company_id\n    where c.id = 34572\n),\n\nc102_question as (\n    select\n        102 as cloud,\n        ffq.*\n    from c102.ff_question ffq\n    join c102.ff_company c on c.id = ffq.company_id\n    where c.id = 55006\n)\n\nselect * from (\n    select * from c100_question\n    union all\n    select * from c101_question\n    union all\n    select * from c102_question\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_question\""}, "model.main.ff_metricsvalue": {"raw_sql": "with c100_metricsvalue as (\n    select\n        100 as cloud,\n        metricsvalue.*\n    from pg.ff_metricsvalue metricsvalue\n    join pg.report r on r.id = metricsvalue.report_id\n    join pg.ff_company c on c.id = r.company_id\n    where c.id not in {{ var(\"ext_cloud_id_list\") }}\n    and c.is_in_analytics\n),\n\nc101_metricsvalue as (\n    select\n        101 as cloud,\n        metricsvalue.*\n    from c101.ff_metricsvalue metricsvalue\n    join c101.report r on r.id = metricsvalue.report_id\n    where r.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_metricsvalue as (\n    select\n        102 as cloud,\n        metricsvalue.*\n    from c102.ff_metricsvalue metricsvalue\n    join c102.report r on r.id = metricsvalue.user_id\n    where r.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_metricsvalue\n    union all\n    select * from c101_metricsvalue\n    union all\n    select * from c102_metricsvalue\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "stage", "fqn": ["main", "stage", "ff_metricsvalue"], "unique_id": "model.main.ff_metricsvalue", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "stage/ff_metricsvalue.sql", "original_file_path": "models/stage/ff_metricsvalue.sql", "name": "ff_metricsvalue", "alias": "ff_metricsvalue", "checksum": {"name": "sha256", "checksum": "9d010eeec2e40fbc1077738c53a6f5c24464998b11db6eb920ed42434d0d9555"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/stage/ff_metricsvalue.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "stage", "bind": false}, "created_at": 1669795234.503313, "compiled_sql": "with c100_metricsvalue as (\n    select\n        100 as cloud,\n        metricsvalue.*\n    from pg.ff_metricsvalue metricsvalue\n    join pg.report r on r.id = metricsvalue.report_id\n    join pg.ff_company c on c.id = r.company_id\n    where c.id not in ('34572', '55006', '58539')\n    and c.is_in_analytics\n),\n\nc101_metricsvalue as (\n    select\n        101 as cloud,\n        metricsvalue.*\n    from c101.ff_metricsvalue metricsvalue\n    join c101.report r on r.id = metricsvalue.report_id\n    where r.company_id = 34572\n),\n\nc102_metricsvalue as (\n    select\n        102 as cloud,\n        metricsvalue.*\n    from c102.ff_metricsvalue metricsvalue\n    join c102.report r on r.id = metricsvalue.user_id\n    where r.company_id = 55006\n)\n\nselect * from (\n    select * from c100_metricsvalue\n    union all\n    select * from c101_metricsvalue\n    union all\n    select * from c102_metricsvalue\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"stage\".\"ff_metricsvalue\""}, "model.main.company": {"raw_sql": "{{ config(materialized='table', bind=False) }}\n\n\nwith current_arr as (\n    SELECT\n        company_id,\n        SUM(arr) arr\n    FROM\n        prod.arr_daily\n    WHERE\n        date = (\n            SELECT\n                MAX(date)\n            FROM\n                prod.arr_daily\n        )\n    GROUP BY\n        date,\n        company_id,\n        sfdc_id\n),\n\nusers_reviewiers as (\n    SELECT\n        company_id,\n        cloud,\n        COUNT(id) as created_user_count,\n        COUNT(\n            CASE\n                WHEN invite_status = 'active'\n                AND first_login_ts IS NOT NULL THEN u.id\n            END\n        ) as activated_user_count,\n        COUNT(\n            CASE\n                WHEN u.is_reviewer\n                AND invite_status = 'active'\n                AND first_login_ts IS NOT NULL THEN u.id\n            END\n        ) as reviewer_count\n    FROM\n        {{ ref('ff_user') }} u\n    WHERE\n        u.deactivate_ts IS NULL\n        AND u.invite_status NOT IN ('bot', 'expired')\n    GROUP BY\n        company_id,\n        cloud\n)\nSELECT\n    c.id as ff_company_id,\n    c.name,\n    c.global_id,\n    c.cloud,\n    c.create_ts,\n    c.converted_to_paying_ts,\n    c.stopped_paying_ts,\n    c.deactivate_ts,\n    c.is_active,\n    c.is_comped,\n    CASE\n        WHEN ca.arr IS NOT NULL\n        AND ca.arr > 0 THEN true\n        ELSE false\n    END as is_paying,\n    c.country,\n    c.state,\n    c.subdomain,\n    c.timezone_name,\n    c.client_success_manager,\n    c.sales_rep_id,\n    sf.salesforce_id as sfdc_id,\n    sfdc_account.industry as industry,\n    sfdc_account.account_owner_name__c as account_owner,\n    sfdc_account.numberofemployees as number_of_employees,\n    sfdc_opportunity.main_deal_driver__c as main_deal_driver,\n    ff_za.account_id as zuora_acc_id,\n    users_reviewiers.created_user_count,\n    users_reviewiers.activated_user_count,\n    users_reviewiers.reviewer_count,\n    c.reporting_period as checkins_company_reporting_period,\n    mbp.product_group as main_billing_plan,\n    mbp.is_transform,\n    mbp.termenddate as main_billingplan_termenddate,\n    last_billed.date as last_billed_ts,\n    -- currently first_billed_ts only from Zuora data, since 2022-01-01\n    first_billed.date as first_billed_ts,\n    sfdc_account.company_segment__c as company_segment,\n    za.revenuesegment__c as revenue_segment,\n    za.customersegment__c as customer_segment,\n    engage.id as engage_id\nFROM\n    {{ ref('ff_company') }} c\n    LEFT JOIN {{ ref('ff_salesforcecompanyaccount') }} sf on sf.company_id = c.id\n    and sf.cloud = c.cloud\n    LEFT JOIN ext.sfdc_account sfdc_account on left(sfdc_account.id, 15) = left(sf.salesforce_id, 15)\n    LEFT JOIN (\n       -- get only the latest record (by lastmodifieddate)\n       select *,\n              row_number() over (partition by accountid order by lastmodifieddate desc) as row_n\n       from ext.sfdc_opportunity\n    ) sfdc_opportunity ON sfdc_opportunity.accountid = sfdc_account.id and sfdc_opportunity.row_n = 1\n    LEFT JOIN {{ ref('ff_zuoraaccount') }} ff_za on ff_za.company_id = c.id\n    and ff_za.cloud = c.cloud\n    LEFT JOIN zuora.account za on ff_za.account_id = za.id\n    LEFT JOIN users_reviewiers users_reviewiers on users_reviewiers.company_id = c.id\n    and users_reviewiers.cloud = c.cloud\n    LEFT JOIN current_arr ca on ca.company_id = c.id\n    LEFT JOIN {{ ref('main_billing_plans')}} mbp on mbp.company_id = c.id and mbp.latest_record = 1\n    LEFT JOIN (\n        SELECT\n            *,\n            row_number() over (partition by company_id order by date desc) as latest_record\n        FROM {{ ref('edge_bill_ts')}}\n    ) last_billed on last_billed.company_id = c.id and last_billed.latest_record = 1\n    LEFT JOIN (\n        SELECT\n            *,\n            row_number() over (partition by company_id order by date asc) as first_record\n        FROM {{ ref('edge_bill_ts')}}\n    ) first_billed\n    ON first_billed.company_id = c.id\n    AND first_billed.first_record = 1\n    AND first_billed.date > '2022-01-01'\n    LEFT JOIN engage.organizations engage on engage.ff_company_id = c.id\nWHERE\n    c.is_dev = false\n    AND c.is_in_analytics", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.ff_user", "model.main.ff_company", "model.main.ff_salesforcecompanyaccount", "model.main.ff_zuoraaccount", "model.main.main_billing_plans", "model.main.edge_bill_ts", "model.main.edge_bill_ts"]}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "company"], "unique_id": "model.main.company", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/company.sql", "original_file_path": "models/prod/company.sql", "name": "company", "alias": "company", "checksum": {"name": "sha256", "checksum": "9bfe4502a0779b4bc3fa9643531e11ee3169113234162e5c4c9f294d986f5d7f"}, "tags": [], "refs": [["ff_user"], ["ff_company"], ["ff_salesforcecompanyaccount"], ["ff_zuoraaccount"], ["main_billing_plans"], ["edge_bill_ts"], ["edge_bill_ts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/company.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "prod", "bind": false}, "created_at": 1669795234.5070546, "compiled_sql": "\n\n\nwith  __dbt__cte__main_billing_plans as (\nWITH billing_plans as (\n    SELECT\n        date,\n        company_id,\n        products.product_group,\n        sfdc_id,\n        arr,\n        s.termenddate\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n),\ntransform_billing_plans as (\n    SELECT\n        date,\n        company_id,\n        sfdc_id,\n        product_group,\n        True as is_transform,\n        termenddate\n    FROM\n        billing_plans\n    WHERE\n        product_group = 'Transform'\n),\ntransform_ONLY_billing_plans as (\n    SELECT\n        DISTINCT bp.*\n    FROM\n        transform_billing_plans bp\n        LEFT JOIN billing_plans bp_sub ON (\n            bp_sub.company_id = bp.company_id\n            OR bp_sub.sfdc_id = bp.sfdc_id\n        ) AND bp_sub.date = bp.date\n        -- no other record then transform in billing plans means this is Transform only customer\n        AND bp_sub.product_group != 'Transform'\n    WHERE\n        bp_sub.product_group IS null\n),\nnon_transform_billing_plans AS (\n    SELECT\n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY date,\n            company_id,\n            sfdc_id\n            ORDER BY\n                arr DESC\n        ) AS relevant_record\n    FROM\n        billing_plans\n    WHERE\n        product_group != 'Transform'\n),\nmain_non_transform_billing_plans AS (\n    SELECT DISTINCT\n        ntbp.date,\n        ntbp.company_id,\n        ntbp.sfdc_id,\n        ntbp.product_group,\n        CASE\n            WHEN tbp.company_id IS NULL THEN False\n            ELSE True\n        END AS is_transform,\n        ntbp.termenddate\n    FROM\n        non_transform_billing_plans ntbp\n        LEFT JOIN transform_billing_plans tbp ON (tbp.company_id = ntbp.company_id\n        OR tbp.sfdc_id = ntbp.sfdc_id) AND tbp.date = ntbp.date\n    WHERE\n        relevant_record = 1\n),\nmain_billing_plans as (\n    SELECT\n        DISTINCT *\n    FROM\n        main_non_transform_billing_plans\n    UNION\n    ALL\n    SELECT\n        DISTINCT *\n    FROM\n        transform_ONLY_billing_plans\n)\n\nSELECT\n    *,\n    row_number() over (partition by company_id order by date desc) as latest_record\nFROM main_billing_plans\n),  __dbt__cte__edge_bill_ts as (\nWITH zuora_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n        AND source = 'zuora'\n        AND arr > 0\n),\nhistorical_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n    WHERE\n        booked_not_active is null\n        AND source in ('historical_emplify', 'historical_15five')\n        AND arr > 0\n)\nSELECT * FROM zuora_arr_records\nUNION ALL\nSELECT * FROM historical_arr_records\n),current_arr as (\n    SELECT\n        company_id,\n        SUM(arr) arr\n    FROM\n        prod.arr_daily\n    WHERE\n        date = (\n            SELECT\n                MAX(date)\n            FROM\n                prod.arr_daily\n        )\n    GROUP BY\n        date,\n        company_id,\n        sfdc_id\n),\n\nusers_reviewiers as (\n    SELECT\n        company_id,\n        cloud,\n        COUNT(id) as created_user_count,\n        COUNT(\n            CASE\n                WHEN invite_status = 'active'\n                AND first_login_ts IS NOT NULL THEN u.id\n            END\n        ) as activated_user_count,\n        COUNT(\n            CASE\n                WHEN u.is_reviewer\n                AND invite_status = 'active'\n                AND first_login_ts IS NOT NULL THEN u.id\n            END\n        ) as reviewer_count\n    FROM\n        \"snowdb\".\"stage\".\"ff_user\" u\n    WHERE\n        u.deactivate_ts IS NULL\n        AND u.invite_status NOT IN ('bot', 'expired')\n    GROUP BY\n        company_id,\n        cloud\n)\nSELECT\n    c.id as ff_company_id,\n    c.name,\n    c.global_id,\n    c.cloud,\n    c.create_ts,\n    c.converted_to_paying_ts,\n    c.stopped_paying_ts,\n    c.deactivate_ts,\n    c.is_active,\n    c.is_comped,\n    CASE\n        WHEN ca.arr IS NOT NULL\n        AND ca.arr > 0 THEN true\n        ELSE false\n    END as is_paying,\n    c.country,\n    c.state,\n    c.subdomain,\n    c.timezone_name,\n    c.client_success_manager,\n    c.sales_rep_id,\n    sf.salesforce_id as sfdc_id,\n    sfdc_account.industry as industry,\n    sfdc_account.account_owner_name__c as account_owner,\n    sfdc_account.numberofemployees as number_of_employees,\n    sfdc_opportunity.main_deal_driver__c as main_deal_driver,\n    ff_za.account_id as zuora_acc_id,\n    users_reviewiers.created_user_count,\n    users_reviewiers.activated_user_count,\n    users_reviewiers.reviewer_count,\n    c.reporting_period as checkins_company_reporting_period,\n    mbp.product_group as main_billing_plan,\n    mbp.is_transform,\n    mbp.termenddate as main_billingplan_termenddate,\n    last_billed.date as last_billed_ts,\n    -- currently first_billed_ts only from Zuora data, since 2022-01-01\n    first_billed.date as first_billed_ts,\n    sfdc_account.company_segment__c as company_segment,\n    za.revenuesegment__c as revenue_segment,\n    za.customersegment__c as customer_segment,\n    engage.id as engage_id\nFROM\n    \"snowdb\".\"stage\".\"ff_company\" c\n    LEFT JOIN \"snowdb\".\"stage\".\"ff_salesforcecompanyaccount\" sf on sf.company_id = c.id\n    and sf.cloud = c.cloud\n    LEFT JOIN ext.sfdc_account sfdc_account on left(sfdc_account.id, 15) = left(sf.salesforce_id, 15)\n    LEFT JOIN (\n       -- get only the latest record (by lastmodifieddate)\n       select *,\n              row_number() over (partition by accountid order by lastmodifieddate desc) as row_n\n       from ext.sfdc_opportunity\n    ) sfdc_opportunity ON sfdc_opportunity.accountid = sfdc_account.id and sfdc_opportunity.row_n = 1\n    LEFT JOIN \"snowdb\".\"stage\".\"ff_zuoraaccount\" ff_za on ff_za.company_id = c.id\n    and ff_za.cloud = c.cloud\n    LEFT JOIN zuora.account za on ff_za.account_id = za.id\n    LEFT JOIN users_reviewiers users_reviewiers on users_reviewiers.company_id = c.id\n    and users_reviewiers.cloud = c.cloud\n    LEFT JOIN current_arr ca on ca.company_id = c.id\n    LEFT JOIN __dbt__cte__main_billing_plans mbp on mbp.company_id = c.id and mbp.latest_record = 1\n    LEFT JOIN (\n        SELECT\n            *,\n            row_number() over (partition by company_id order by date desc) as latest_record\n        FROM __dbt__cte__edge_bill_ts\n    ) last_billed on last_billed.company_id = c.id and last_billed.latest_record = 1\n    LEFT JOIN (\n        SELECT\n            *,\n            row_number() over (partition by company_id order by date asc) as first_record\n        FROM __dbt__cte__edge_bill_ts\n    ) first_billed\n    ON first_billed.company_id = c.id\n    AND first_billed.first_record = 1\n    AND first_billed.date > '2022-01-01'\n    LEFT JOIN engage.organizations engage on engage.ff_company_id = c.id\nWHERE\n    c.is_dev = false\n    AND c.is_in_analytics", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.main.main_billing_plans", "sql": " __dbt__cte__main_billing_plans as (\nWITH billing_plans as (\n    SELECT\n        date,\n        company_id,\n        products.product_group,\n        sfdc_id,\n        arr,\n        s.termenddate\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n),\ntransform_billing_plans as (\n    SELECT\n        date,\n        company_id,\n        sfdc_id,\n        product_group,\n        True as is_transform,\n        termenddate\n    FROM\n        billing_plans\n    WHERE\n        product_group = 'Transform'\n),\ntransform_ONLY_billing_plans as (\n    SELECT\n        DISTINCT bp.*\n    FROM\n        transform_billing_plans bp\n        LEFT JOIN billing_plans bp_sub ON (\n            bp_sub.company_id = bp.company_id\n            OR bp_sub.sfdc_id = bp.sfdc_id\n        ) AND bp_sub.date = bp.date\n        -- no other record then transform in billing plans means this is Transform only customer\n        AND bp_sub.product_group != 'Transform'\n    WHERE\n        bp_sub.product_group IS null\n),\nnon_transform_billing_plans AS (\n    SELECT\n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY date,\n            company_id,\n            sfdc_id\n            ORDER BY\n                arr DESC\n        ) AS relevant_record\n    FROM\n        billing_plans\n    WHERE\n        product_group != 'Transform'\n),\nmain_non_transform_billing_plans AS (\n    SELECT DISTINCT\n        ntbp.date,\n        ntbp.company_id,\n        ntbp.sfdc_id,\n        ntbp.product_group,\n        CASE\n            WHEN tbp.company_id IS NULL THEN False\n            ELSE True\n        END AS is_transform,\n        ntbp.termenddate\n    FROM\n        non_transform_billing_plans ntbp\n        LEFT JOIN transform_billing_plans tbp ON (tbp.company_id = ntbp.company_id\n        OR tbp.sfdc_id = ntbp.sfdc_id) AND tbp.date = ntbp.date\n    WHERE\n        relevant_record = 1\n),\nmain_billing_plans as (\n    SELECT\n        DISTINCT *\n    FROM\n        main_non_transform_billing_plans\n    UNION\n    ALL\n    SELECT\n        DISTINCT *\n    FROM\n        transform_ONLY_billing_plans\n)\n\nSELECT\n    *,\n    row_number() over (partition by company_id order by date desc) as latest_record\nFROM main_billing_plans\n)"}, {"id": "model.main.edge_bill_ts", "sql": " __dbt__cte__edge_bill_ts as (\nWITH zuora_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n        JOIN prod.products products ON daily.product_id = products.product_id\n        LEFT JOIN zuora.rateplancharge rpc on daily.zuora_rate_plan_charge_id = rpc.id\n        LEFT JOIN zuora.rateplan rp on rp.id = rpc.rateplanid\n        LEFT JOIN zuora.subscription s on s.id = rp.subscriptionid\n    WHERE\n        booked_not_active = 'false'\n        AND product_group != 'Miscellaneous'\n        AND source = 'zuora'\n        AND arr > 0\n),\nhistorical_arr_records as (\n    SELECT\n        date,\n        company_id\n    FROM\n        prod.arr_daily daily\n    WHERE\n        booked_not_active is null\n        AND source in ('historical_emplify', 'historical_15five')\n        AND arr > 0\n)\nSELECT * FROM zuora_arr_records\nUNION ALL\nSELECT * FROM historical_arr_records\n)"}], "relation_name": "\"snowdb\".\"prod\".\"company\""}, "model.main.checkin_questions": {"raw_sql": "{% if target.name == 'prod' %}\n  {{ config(materialized='table', bind=False) }}\n{% else %}\n  {{ config(materialized='view', bind=False) }}\n{% endif %}\n\nWITH question_json AS (\n    SELECT\n        checkin.cloud AS cloud,\n        checkin.id AS report_id,\n        json_parse(\n            json_extract_path_text(checkin.shown_questions_json, 'question_ids')\n        ) AS questions\n    FROM\n        {{ ref('ff_report') }} checkin\n    WHERE\n        json_extract_path_text(checkin.shown_questions_json, 'question_ids') <> ''\n),\nquestions AS (\n    SELECT\n        cloud,\n        x.report_id,\n        question\n    FROM\n        question_json x,\n        x.questions as question\n)\nSELECT\n    q.cloud,\n    q.report_id,\n    q.question AS question_id,\n    answer.id AS answer_id\nFROM\n    questions q\n    JOIN {{ ref('ff_question') }} qu ON q.question = qu.id AND q.cloud = qu.cloud\n    AND qu.question_type NOT IN ('goal', 'happiness')\n    LEFT JOIN {{ ref('ff_answer')}} answer ON q.question = answer.question_id AND q.cloud = answer.cloud\n    AND q.report_id = answer.report_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.ff_report", "model.main.ff_question", "model.main.ff_answer"]}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "checkin_questions"], "unique_id": "model.main.checkin_questions", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/checkin_questions.sql", "original_file_path": "models/prod/checkin_questions.sql", "name": "checkin_questions", "alias": "checkin_questions", "checksum": {"name": "sha256", "checksum": "81dee8bf4daa907a1b6c1206f81200f15f2485e49432aed05e80ec7c69a13264"}, "tags": [], "refs": [["ff_report"], ["ff_question"], ["ff_answer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/checkin_questions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "prod", "bind": false}, "created_at": 1669795234.5102556, "compiled_sql": "\n  \n\n\nWITH question_json AS (\n    SELECT\n        checkin.cloud AS cloud,\n        checkin.id AS report_id,\n        json_parse(\n            json_extract_path_text(checkin.shown_questions_json, 'question_ids')\n        ) AS questions\n    FROM\n        \"snowdb\".\"stage\".\"ff_report\" checkin\n    WHERE\n        json_extract_path_text(checkin.shown_questions_json, 'question_ids') <> ''\n),\nquestions AS (\n    SELECT\n        cloud,\n        x.report_id,\n        question\n    FROM\n        question_json x,\n        x.questions as question\n)\nSELECT\n    q.cloud,\n    q.report_id,\n    q.question AS question_id,\n    answer.id AS answer_id\nFROM\n    questions q\n    JOIN \"snowdb\".\"stage\".\"ff_question\" qu ON q.question = qu.id AND q.cloud = qu.cloud\n    AND qu.question_type NOT IN ('goal', 'happiness')\n    LEFT JOIN \"snowdb\".\"stage\".\"ff_answer\" answer ON q.question = answer.question_id AND q.cloud = answer.cloud\n    AND q.report_id = answer.report_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"checkin_questions\""}, "model.main.arr_detail": {"raw_sql": "select * from finance.arr_detail", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "arr_detail"], "unique_id": "model.main.arr_detail", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/arr_detail.sql", "original_file_path": "models/prod/arr_detail.sql", "name": "arr_detail", "alias": "arr_detail", "checksum": {"name": "sha256", "checksum": "06cbb3a5ddc63e2506b4da70b9a77157247776363403767eca69c0c3f24bd87d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/arr_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "prod", "bind": false}, "created_at": 1669795234.5152617, "compiled_sql": "select * from finance.arr_detail", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"arr_detail\""}, "model.main.highfive": {"raw_sql": "{% if target.name == 'prod' %}\n  {{ config(materialized='table', bind=False) }}\n{% else %}\n  {{ config(materialized='view', bind=False) }}\n{% endif %}\n\nWITH comments AS (\n  SELECT\n    high_five_id,\n    cloud,\n    count(id) AS number_comments\n  FROM\n    {{ ref('ff_highfivecomment') }}\n  WHERE\n    delete_ts IS NULL\n  GROUP BY\n    high_five_id,\n    cloud\n),\n\nlikes AS (\n  SELECT\n    high_five_id,\n    cloud,\n    count(id) AS number_likes\n  FROM\n    {{ ref('ff_highfivelike') }}\n  GROUP BY\n    high_five_id,\n    cloud\n),\n\nmentions AS (\n  SELECT\n    high_five_id,\n    cloud,\n    count(id) AS number_users_highfived\n  FROM\n    {{ ref('ff_highfivemention') }}\n  GROUP BY\n    high_five_id,\n    cloud\n)\n\n\nSELECT\n    highfive.id AS highfive_id,\n    highfive.report_id AS checkin_id,\n    highfive.company_id,\n    highfive.cloud,\n    highfive.user_id,\n    highfive.create_ts,\n    highfive.update_ts,\n    CASE\n        WHEN highfive.private_for_id IS NOT NULL\n        THEN true\n        ELSE false\n    END as is_private,\n    coalesce(comments.number_comments,0) as number_comments,\n    coalesce(likes.number_likes,0) as number_likes,\n    coalesce(mentions.number_users_highfived,0) AS number_users_highfived\nFROM {{ ref('ff_highfive') }} highfive\nLEFT JOIN comments ON comments.high_five_id = highfive.id AND comments.cloud = highfive.cloud\nLEFT JOIN likes ON likes.high_five_id = highfive.id AND likes.cloud = highfive.cloud\nLEFT JOIN mentions ON mentions.high_five_id = highfive.id AND mentions.cloud = highfive.cloud\nWHERE delete_ts IS NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.ff_highfivecomment", "model.main.ff_highfivelike", "model.main.ff_highfivemention", "model.main.ff_highfive"]}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "highfive"], "unique_id": "model.main.highfive", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/highfive.sql", "original_file_path": "models/prod/highfive.sql", "name": "highfive", "alias": "highfive", "checksum": {"name": "sha256", "checksum": "920313096504e8e4f753e0a439c14c3ef90e0700c385c4558cdfcd1e67d43947"}, "tags": [], "refs": [["ff_highfivecomment"], ["ff_highfivelike"], ["ff_highfivemention"], ["ff_highfive"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/highfive.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "prod", "bind": false}, "created_at": 1669795234.5182383, "compiled_sql": "\n  \n\n\nWITH comments AS (\n  SELECT\n    high_five_id,\n    cloud,\n    count(id) AS number_comments\n  FROM\n    \"snowdb\".\"stage\".\"ff_highfivecomment\"\n  WHERE\n    delete_ts IS NULL\n  GROUP BY\n    high_five_id,\n    cloud\n),\n\nlikes AS (\n  SELECT\n    high_five_id,\n    cloud,\n    count(id) AS number_likes\n  FROM\n    \"snowdb\".\"stage\".\"ff_highfivelike\"\n  GROUP BY\n    high_five_id,\n    cloud\n),\n\nmentions AS (\n  SELECT\n    high_five_id,\n    cloud,\n    count(id) AS number_users_highfived\n  FROM\n    \"snowdb\".\"stage\".\"ff_highfivemention\"\n  GROUP BY\n    high_five_id,\n    cloud\n)\n\n\nSELECT\n    highfive.id AS highfive_id,\n    highfive.report_id AS checkin_id,\n    highfive.company_id,\n    highfive.cloud,\n    highfive.user_id,\n    highfive.create_ts,\n    highfive.update_ts,\n    CASE\n        WHEN highfive.private_for_id IS NOT NULL\n        THEN true\n        ELSE false\n    END as is_private,\n    coalesce(comments.number_comments,0) as number_comments,\n    coalesce(likes.number_likes,0) as number_likes,\n    coalesce(mentions.number_users_highfived,0) AS number_users_highfived\nFROM \"snowdb\".\"stage\".\"ff_highfive\" highfive\nLEFT JOIN comments ON comments.high_five_id = highfive.id AND comments.cloud = highfive.cloud\nLEFT JOIN likes ON likes.high_five_id = highfive.id AND likes.cloud = highfive.cloud\nLEFT JOIN mentions ON mentions.high_five_id = highfive.id AND mentions.cloud = highfive.cloud\nWHERE delete_ts IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"highfive\""}, "model.main.checkin": {"raw_sql": "{% if target.name == 'prod' %}\n  {{ config(materialized='table', bind=False) }}\n{% else %}\n  {{ config(materialized='view', bind=False) }}\n{% endif %}\n\nWITH pulse AS (\n    SELECT\n        mv.cloud,\n        mv.report_id,\n        mv.value,\n        ROW_NUMBER() OVER (\n            PARTITION BY mv.report_id, mv.cloud\n            ORDER BY\n                mv.update_ts DESC\n        ) AS most_recent_record\n    FROM\n        {{ ref('ff_metricsvalue') }} mv\n        JOIN {{ ref('ff_question')}} q ON mv.question_id = q.id and mv.cloud = q.cloud\n    WHERE\n        q.question_type = 'happiness'\n),\nquestion_answer AS (\n    SELECT\n        cloud,\n        report_id,\n        COUNT(question_id) AS questions_asked,\n        COUNT(answer_id) AS questions_answered\n    FROM\n        {{ ref('checkin_questions') }} q\n    GROUP BY\n        q.report_id, q.cloud\n),\nhigh_fives AS (\n    SELECT\n        cloud,\n        report_id,\n        COUNT(id) AS high_fives\n    FROM\n        {{ ref('ff_highfive') }}\n    WHERE\n        delete_ts IS NULL\n    GROUP BY\n        report_id, cloud\n)\nSELECT\n    checkin.cloud AS cloud,\n    checkin.id AS checkin_id,\n    users.company_id AS company_id,\n    checkin.user_id,\n    checkin.create_ts :: date,\n    checkin.due_date :: date,\n    checkin.reporting_period,\n    checkin.first_submit_ts AS submit_ts,\n    checkin.fillout_duration AS time_to_complete_seconds,\n    pulse.value AS pulse_score,\n    report.is_vacation,\n    checkin.was_submitted_late,\n    --if not submitted leave null?\n    --     priorities.priorities,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(report.total_goals_count, 0)\n    END AS priorities,\n    --     priorities.priorities_completed,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(report.completed_goals_count, 0)\n    END AS priorities_completed,\n    --     priorities.priorities_not_completed,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(report.carried_over_goals_count, 0)\n    END AS priorities_not_completed,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(question.questions_asked, 0)\n    END AS questions_asked,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(question.questions_answered, 0)\n    END AS questions_answered,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(high_five.high_fives, 0)\n    END AS high_fives_created,\n    CASE\n        WHEN checkin.submit_ts = checkin.first_submit_ts THEN NULL\n        ELSE checkin.submit_ts\n    END AS update_ts,\n    report.manager_id,\n    CASE WHEN  checkin.first_submit_ts IS NOT NULL THEN checkin.reviewed_by_id ELSE NULL END AS reviewer_id,\n    report.time_to_review AS time_to_review_seconds,\n    CASE\n        WHEN checkin.first_submit_ts IS NOT NULL THEN checkin.reviewed_ts\n        ELSE NULL\n    END AS reviewed_ts\nFROM\n    {{ ref('ff_report') }} checkin\n    JOIN {{ ref('ff_user') }} users ON checkin.user_id = users.id and checkin.cloud = users.cloud -- LEFT JOIN priorities priorities ON checkin.id = priorities.report_id\n    LEFT JOIN high_fives high_five ON checkin.id = high_five.report_id and high_five.cloud = checkin.cloud\n    LEFT JOIN question_answer question ON checkin.id = question.report_id AND question.cloud = checkin.cloud\n    LEFT JOIN pulse pulse ON checkin.id = pulse.report_id AND checkin.cloud = pulse.cloud\n    AND pulse.most_recent_record = 1\n    LEFT JOIN {{ ref('ff_reportintermediatemodel') }} report ON checkin.id = report.report_id and checkin.cloud = report.cloud\nWHERE\n    NOT is_example\n    AND NOT is_example_support\n    /*I don't see my check-in for this week, so maybe the below logic is already factored in on this table load?*/\n    AND (\n        checkin.due_date :: date < sysdate :: date\n        OR checkin.first_submit_ts IS NOT NULL\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.ff_metricsvalue", "model.main.ff_question", "model.main.checkin_questions", "model.main.ff_highfive", "model.main.ff_report", "model.main.ff_user", "model.main.ff_reportintermediatemodel"]}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "checkin"], "unique_id": "model.main.checkin", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/checkin.sql", "original_file_path": "models/prod/checkin.sql", "name": "checkin", "alias": "checkin", "checksum": {"name": "sha256", "checksum": "36603c01811bddae3b2a823d5541bde84f5bcb8141489e03eb241bafe08fb6c4"}, "tags": [], "refs": [["ff_metricsvalue"], ["ff_question"], ["checkin_questions"], ["ff_highfive"], ["ff_report"], ["ff_user"], ["ff_reportintermediatemodel"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/checkin.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "prod", "bind": false}, "created_at": 1669795234.5227442, "compiled_sql": "\n  \n\n\nWITH pulse AS (\n    SELECT\n        mv.cloud,\n        mv.report_id,\n        mv.value,\n        ROW_NUMBER() OVER (\n            PARTITION BY mv.report_id, mv.cloud\n            ORDER BY\n                mv.update_ts DESC\n        ) AS most_recent_record\n    FROM\n        \"snowdb\".\"stage\".\"ff_metricsvalue\" mv\n        JOIN \"snowdb\".\"stage\".\"ff_question\" q ON mv.question_id = q.id and mv.cloud = q.cloud\n    WHERE\n        q.question_type = 'happiness'\n),\nquestion_answer AS (\n    SELECT\n        cloud,\n        report_id,\n        COUNT(question_id) AS questions_asked,\n        COUNT(answer_id) AS questions_answered\n    FROM\n        \"snowdb\".\"prod\".\"checkin_questions\" q\n    GROUP BY\n        q.report_id, q.cloud\n),\nhigh_fives AS (\n    SELECT\n        cloud,\n        report_id,\n        COUNT(id) AS high_fives\n    FROM\n        \"snowdb\".\"stage\".\"ff_highfive\"\n    WHERE\n        delete_ts IS NULL\n    GROUP BY\n        report_id, cloud\n)\nSELECT\n    checkin.cloud AS cloud,\n    checkin.id AS checkin_id,\n    users.company_id AS company_id,\n    checkin.user_id,\n    checkin.create_ts :: date,\n    checkin.due_date :: date,\n    checkin.reporting_period,\n    checkin.first_submit_ts AS submit_ts,\n    checkin.fillout_duration AS time_to_complete_seconds,\n    pulse.value AS pulse_score,\n    report.is_vacation,\n    checkin.was_submitted_late,\n    --if not submitted leave null?\n    --     priorities.priorities,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(report.total_goals_count, 0)\n    END AS priorities,\n    --     priorities.priorities_completed,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(report.completed_goals_count, 0)\n    END AS priorities_completed,\n    --     priorities.priorities_not_completed,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(report.carried_over_goals_count, 0)\n    END AS priorities_not_completed,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(question.questions_asked, 0)\n    END AS questions_asked,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(question.questions_answered, 0)\n    END AS questions_answered,\n    CASE\n        WHEN checkin.first_submit_ts IS NULL THEN NULL\n        ELSE coalesce(high_five.high_fives, 0)\n    END AS high_fives_created,\n    CASE\n        WHEN checkin.submit_ts = checkin.first_submit_ts THEN NULL\n        ELSE checkin.submit_ts\n    END AS update_ts,\n    report.manager_id,\n    CASE WHEN  checkin.first_submit_ts IS NOT NULL THEN checkin.reviewed_by_id ELSE NULL END AS reviewer_id,\n    report.time_to_review AS time_to_review_seconds,\n    CASE\n        WHEN checkin.first_submit_ts IS NOT NULL THEN checkin.reviewed_ts\n        ELSE NULL\n    END AS reviewed_ts\nFROM\n    \"snowdb\".\"stage\".\"ff_report\" checkin\n    JOIN \"snowdb\".\"stage\".\"ff_user\" users ON checkin.user_id = users.id and checkin.cloud = users.cloud -- LEFT JOIN priorities priorities ON checkin.id = priorities.report_id\n    LEFT JOIN high_fives high_five ON checkin.id = high_five.report_id and high_five.cloud = checkin.cloud\n    LEFT JOIN question_answer question ON checkin.id = question.report_id AND question.cloud = checkin.cloud\n    LEFT JOIN pulse pulse ON checkin.id = pulse.report_id AND checkin.cloud = pulse.cloud\n    AND pulse.most_recent_record = 1\n    LEFT JOIN \"snowdb\".\"stage\".\"ff_reportintermediatemodel\" report ON checkin.id = report.report_id and checkin.cloud = report.cloud\nWHERE\n    NOT is_example\n    AND NOT is_example_support\n    /*I don't see my check-in for this week, so maybe the below logic is already factored in on this table load?*/\n    AND (\n        checkin.due_date :: date < sysdate :: date\n        OR checkin.first_submit_ts IS NOT NULL\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"checkin\""}, "model.main.products": {"raw_sql": "SELECT\n    product.id AS product_id,\n    product.name AS product,\n    CASE\n        WHEN product.name IN (\n            '1:1 Coaching',\n            '1:1 Deep Coaching Series',\n            '1:1 Engagement Action Planning',\n            'Group Coaching',\n            'Group Engagement Action Planning',\n            'OKR Coaching',\n            'OKR Executive Alignment Set',\n            'OKR Skill Intensive',\n            'Executive Group Coaching',\n            'Performance Accelerator Live',\n            'Manager Accelerator Online',\n            'Education Subscription',\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription'\n        ) THEN 'Transform'\n        WHEN product.name IN ('Perform','Extensis | Perform') THEN 'Perform'\n        WHEN product.name IN ('Total Platform','Extensis | Total Platform') THEN 'Total Platform'\n        WHEN product.name IN (\n            '15Five Plus',\n            'Engage',\n            '15Five Basic',\n            'Focus'\n        ) THEN product.name\n        ELSE 'Miscellaneous'\n    END AS product_group,\n    CASE\n        WHEN product.name IN (\n            '1:1 Coaching',\n            '1:1 Deep Coaching Series',\n            '1:1 Engagement Action Planning',\n            'Group Coaching',\n            'Group Engagement Action Planning',\n            'OKR Coaching',\n            'OKR Executive Alignment Set',\n            'OKR Skill Intensive',\n            'Executive Group Coaching',\n            'Performance Accelerator Live'\n        ) THEN 'Transform - Coaching'\n        WHEN product.name IN (\n            'Manager Accelerator Online',\n            'Education Subscription'\n        ) THEN 'Transform - Online'\n        WHEN product.name IN (\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription'\n        ) THEN 'Transform - Hybrid'\n        WHEN product.name IN ('Perform','Extensis | Perform') THEN 'Perform'\n        WHEN product.name IN ('Total Platform','Extensis | Total Platform') THEN 'Total Platform'\n        WHEN product.name IN (\n            '15Five Plus',\n            'Engage',\n            '15Five Basic',\n            'Focus'\n        ) THEN product.name\n        ELSE 'Miscellaneous'\n    END AS product_subgroup,\n    product.category,\n    product.description AS product_description,\n    product.effectivestartdate AS product_start_date,\n    DATEADD(\n        second,\n        -1,\n        DATEADD(day, 1, product.effectiveenddate)\n    ) AS product_end_date,\n    product.sku AS product_sku,\n    product.createddate,\n    product.updateddate\nFROM zuora.product product", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "products"], "unique_id": "model.main.products", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/products.sql", "original_file_path": "models/prod/products.sql", "name": "products", "alias": "products", "checksum": {"name": "sha256", "checksum": "0b1db727b8d42874181c2a67d14a88c5baa8914b168780b2b8ed876d4acc9764"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/products.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "prod", "bind": false}, "created_at": 1669795234.527879, "compiled_sql": "SELECT\n    product.id AS product_id,\n    product.name AS product,\n    CASE\n        WHEN product.name IN (\n            '1:1 Coaching',\n            '1:1 Deep Coaching Series',\n            '1:1 Engagement Action Planning',\n            'Group Coaching',\n            'Group Engagement Action Planning',\n            'OKR Coaching',\n            'OKR Executive Alignment Set',\n            'OKR Skill Intensive',\n            'Executive Group Coaching',\n            'Performance Accelerator Live',\n            'Manager Accelerator Online',\n            'Education Subscription',\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription'\n        ) THEN 'Transform'\n        WHEN product.name IN ('Perform','Extensis | Perform') THEN 'Perform'\n        WHEN product.name IN ('Total Platform','Extensis | Total Platform') THEN 'Total Platform'\n        WHEN product.name IN (\n            '15Five Plus',\n            'Engage',\n            '15Five Basic',\n            'Focus'\n        ) THEN product.name\n        ELSE 'Miscellaneous'\n    END AS product_group,\n    CASE\n        WHEN product.name IN (\n            '1:1 Coaching',\n            '1:1 Deep Coaching Series',\n            '1:1 Engagement Action Planning',\n            'Group Coaching',\n            'Group Engagement Action Planning',\n            'OKR Coaching',\n            'OKR Executive Alignment Set',\n            'OKR Skill Intensive',\n            'Executive Group Coaching',\n            'Performance Accelerator Live'\n        ) THEN 'Transform - Coaching'\n        WHEN product.name IN (\n            'Manager Accelerator Online',\n            'Education Subscription'\n        ) THEN 'Transform - Online'\n        WHEN product.name IN (\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription'\n        ) THEN 'Transform - Hybrid'\n        WHEN product.name IN ('Perform','Extensis | Perform') THEN 'Perform'\n        WHEN product.name IN ('Total Platform','Extensis | Total Platform') THEN 'Total Platform'\n        WHEN product.name IN (\n            '15Five Plus',\n            'Engage',\n            '15Five Basic',\n            'Focus'\n        ) THEN product.name\n        ELSE 'Miscellaneous'\n    END AS product_subgroup,\n    product.category,\n    product.description AS product_description,\n    product.effectivestartdate AS product_start_date,\n    DATEADD(\n        second,\n        -1,\n        DATEADD(day, 1, product.effectiveenddate)\n    ) AS product_end_date,\n    product.sku AS product_sku,\n    product.createddate,\n    product.updateddate\nFROM zuora.product product", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"products\""}, "model.main.engage_campaigns": {"raw_sql": "SELECT\n    ec.id,\n    ec.organization_id,\n    ec.v3_group_id,\n    ec.group_id,\n    ec.feedback_group_id,\n    ec.message_type,\n    ec.open_response_type,\n    ec.send_reminders_on_weekends,\n    ec.parent_campaign_id,\n    ec.is_published,\n    ec.is_auto_scheduled,\n    ec.created_at,\n    ec.started_at,\n    ec.ended_at,\n    ec.scheduled_ended_at,\n    ec.updated_at,\n    ec.kiosk_uuid,\n    ec.status,\n    ec.campaign_type,\n    ec.name as campaign_name,\n    er.id as results_id,\n    er.created_at as campaign_results_created_at,\n    er.updated_at as campaign_results_updated_at,\n    er.emplify_score,\n    er.bracket_id,\n    er.percentile,\n    COUNT(DISTINCT s.id) AS survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 1 THEN s.id\n        END\n    ) as quarterly_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 2 THEN s.id\n        END\n    ) as smart_pulse_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 3 THEN s.id\n        END\n    ) as custom_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 4 THEN s.id\n        END\n    ) as self_evaluation_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 5 THEN s.id\n        END\n    ) as topic_based_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 6 THEN s.id\n        END\n    ) as enps_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 7 THEN s.id\n        END\n    ) as legacy_custom_survey_count,\n    COUNT(DISTINCT rr.id) as surveys_sent,\n    COUNT(\n        DISTINCT CASE\n            WHEN rr.completed_at IS NOT NULL THEN rr.id\n        END\n    ) as surveys_completed,\n    CAST(surveys_completed as DECIMAL) / NULLIF(surveys_sent, 0) AS response_rate\nFROM\n    engage.campaigns ec\n    LEFT JOIN engage.campaign_results er on er.campaign_id = ec.id\n    AND er.group_id IS NULL\n    AND er.v3_group_id IS NULL\n    LEFT JOIN engage.campaign_surveys s on s.campaign_id = ec.id\n    LEFT JOIN engage.survey_types t on t.id = s.survey_type_id\n    LEFT JOIN engage.employee_results rr on rr.campaign_id = ec.id\nWHERE\n    ec.deleted_at IS NULL\n    AND campaign_name NOT ILIKE '%test%'\nGROUP BY\n    ec.id,\n    ec.organization_id,\n    ec.v3_group_id,\n    ec.group_id,\n    ec.feedback_group_id,\n    ec.message_type,\n    ec.open_response_type,\n    ec.send_reminders_on_weekends,\n    ec.parent_campaign_id,\n    ec.is_published,\n    ec.is_auto_scheduled,\n    ec.created_at,\n    ec.started_at,\n    ec.ended_at,\n    ec.scheduled_ended_at,\n    ec.updated_at,\n    ec.status,\n    ec.kiosk_uuid,\n    er.id,\n    er.created_at,\n    er.updated_at,\n    er.emplify_score,\n    er.bracket_id,\n    er.percentile,\n    ec.name,\n    ec.campaign_type", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "engage_campaigns"], "unique_id": "model.main.engage_campaigns", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/engage_campaigns.sql", "original_file_path": "models/prod/engage_campaigns.sql", "name": "engage_campaigns", "alias": "engage_campaigns", "checksum": {"name": "sha256", "checksum": "89a990f7ab1883c7c16976cfd644104cf6b6a4ab11d28c540c9f4b53dc3b8b15"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/engage_campaigns.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "prod", "bind": false}, "created_at": 1669795234.5308409, "compiled_sql": "SELECT\n    ec.id,\n    ec.organization_id,\n    ec.v3_group_id,\n    ec.group_id,\n    ec.feedback_group_id,\n    ec.message_type,\n    ec.open_response_type,\n    ec.send_reminders_on_weekends,\n    ec.parent_campaign_id,\n    ec.is_published,\n    ec.is_auto_scheduled,\n    ec.created_at,\n    ec.started_at,\n    ec.ended_at,\n    ec.scheduled_ended_at,\n    ec.updated_at,\n    ec.kiosk_uuid,\n    ec.status,\n    ec.campaign_type,\n    ec.name as campaign_name,\n    er.id as results_id,\n    er.created_at as campaign_results_created_at,\n    er.updated_at as campaign_results_updated_at,\n    er.emplify_score,\n    er.bracket_id,\n    er.percentile,\n    COUNT(DISTINCT s.id) AS survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 1 THEN s.id\n        END\n    ) as quarterly_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 2 THEN s.id\n        END\n    ) as smart_pulse_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 3 THEN s.id\n        END\n    ) as custom_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 4 THEN s.id\n        END\n    ) as self_evaluation_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 5 THEN s.id\n        END\n    ) as topic_based_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 6 THEN s.id\n        END\n    ) as enps_survey_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN survey_type_id = 7 THEN s.id\n        END\n    ) as legacy_custom_survey_count,\n    COUNT(DISTINCT rr.id) as surveys_sent,\n    COUNT(\n        DISTINCT CASE\n            WHEN rr.completed_at IS NOT NULL THEN rr.id\n        END\n    ) as surveys_completed,\n    CAST(surveys_completed as DECIMAL) / NULLIF(surveys_sent, 0) AS response_rate\nFROM\n    engage.campaigns ec\n    LEFT JOIN engage.campaign_results er on er.campaign_id = ec.id\n    AND er.group_id IS NULL\n    AND er.v3_group_id IS NULL\n    LEFT JOIN engage.campaign_surveys s on s.campaign_id = ec.id\n    LEFT JOIN engage.survey_types t on t.id = s.survey_type_id\n    LEFT JOIN engage.employee_results rr on rr.campaign_id = ec.id\nWHERE\n    ec.deleted_at IS NULL\n    AND campaign_name NOT ILIKE '%test%'\nGROUP BY\n    ec.id,\n    ec.organization_id,\n    ec.v3_group_id,\n    ec.group_id,\n    ec.feedback_group_id,\n    ec.message_type,\n    ec.open_response_type,\n    ec.send_reminders_on_weekends,\n    ec.parent_campaign_id,\n    ec.is_published,\n    ec.is_auto_scheduled,\n    ec.created_at,\n    ec.started_at,\n    ec.ended_at,\n    ec.scheduled_ended_at,\n    ec.updated_at,\n    ec.status,\n    ec.kiosk_uuid,\n    er.id,\n    er.created_at,\n    er.updated_at,\n    er.emplify_score,\n    er.bracket_id,\n    er.percentile,\n    ec.name,\n    ec.campaign_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"engage_campaigns\""}, "model.main.user_actions": {"raw_sql": "{% if target.name == 'prod' %}\n  {{ config(materialized='table', bind=False) }}\n{% else %}\n  {{ config(materialized='view', bind=False) }}\n{% endif %}\n\nSELECT\n    cal.date,\n    u.id AS user_id,\n    u.cloud,\n    u.company_id,\n    u.is_reviewer,\n    u.first_name || ' ' || u.last_name AS full_name,\n    COUNT(DISTINCT hf.id) AS highfives_given,\n    COUNT(DISTINCT hfc.id) AS highfive_comments,\n    COUNT(DISTINCT hfc.high_five_id) AS highfives_commented_on,\n    COUNT(DISTINCT hfm.high_five_id) AS highfives_received\nFROM\n    {{ ref('ff_user') }} u\n    JOIN view_dim_calendar cal ON cal.date BETWEEN u.first_login_ts\n    AND coalesce(u.deactivate_ts, current_date)\n    LEFT JOIN {{ ref('ff_highfive') }} hf ON u.id = hf.user_id\n    AND hf.create_ts :: DATE = cal.date\n    AND u.cloud = hf.cloud\n    LEFT JOIN {{ ref('ff_highfivecomment') }} hfc ON hfc.user_id = u.id\n    AND hfc.create_ts :: DATE = cal.date\n    AND hfc.cloud = u.cloud\n    LEFT JOIN {{ ref('ff_highfivemention') }} hfm ON hfm.user_id = u.id\n    AND hfm.create_ts :: DATE = cal.date\n    AND hfm.cloud = u.cloud\nGROUP BY\n    cal.date,\n    u.id,\n    u.cloud,\n    u.company_id,\n    u.is_reviewer,\n    u.first_name || ' ' || u.last_name\nORDER BY\n    user_id,\n    date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.ff_user", "model.main.ff_highfive", "model.main.ff_highfivecomment", "model.main.ff_highfivemention"]}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "user_actions"], "unique_id": "model.main.user_actions", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/user_actions.sql", "original_file_path": "models/prod/user_actions.sql", "name": "user_actions", "alias": "user_actions", "checksum": {"name": "sha256", "checksum": "7fe9a2ad8d7106d44c02129d1632c3c27745f6a520c3dd41630184b3769043fe"}, "tags": [], "refs": [["ff_user"], ["ff_highfive"], ["ff_highfivecomment"], ["ff_highfivemention"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/user_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "prod", "bind": false}, "created_at": 1669795234.5337918, "compiled_sql": "\n  \n\n\nSELECT\n    cal.date,\n    u.id AS user_id,\n    u.cloud,\n    u.company_id,\n    u.is_reviewer,\n    u.first_name || ' ' || u.last_name AS full_name,\n    COUNT(DISTINCT hf.id) AS highfives_given,\n    COUNT(DISTINCT hfc.id) AS highfive_comments,\n    COUNT(DISTINCT hfc.high_five_id) AS highfives_commented_on,\n    COUNT(DISTINCT hfm.high_five_id) AS highfives_received\nFROM\n    \"snowdb\".\"stage\".\"ff_user\" u\n    JOIN view_dim_calendar cal ON cal.date BETWEEN u.first_login_ts\n    AND coalesce(u.deactivate_ts, current_date)\n    LEFT JOIN \"snowdb\".\"stage\".\"ff_highfive\" hf ON u.id = hf.user_id\n    AND hf.create_ts :: DATE = cal.date\n    AND u.cloud = hf.cloud\n    LEFT JOIN \"snowdb\".\"stage\".\"ff_highfivecomment\" hfc ON hfc.user_id = u.id\n    AND hfc.create_ts :: DATE = cal.date\n    AND hfc.cloud = u.cloud\n    LEFT JOIN \"snowdb\".\"stage\".\"ff_highfivemention\" hfm ON hfm.user_id = u.id\n    AND hfm.create_ts :: DATE = cal.date\n    AND hfm.cloud = u.cloud\nGROUP BY\n    cal.date,\n    u.id,\n    u.cloud,\n    u.company_id,\n    u.is_reviewer,\n    u.first_name || ' ' || u.last_name\nORDER BY\n    user_id,\n    date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"user_actions\""}, "model.main.arr_daily": {"raw_sql": "select * from finance.arr_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "prod", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "prod", "fqn": ["main", "prod", "arr_daily"], "unique_id": "model.main.arr_daily", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "prod/arr_daily.sql", "original_file_path": "models/prod/arr_daily.sql", "name": "arr_daily", "alias": "arr_daily", "checksum": {"name": "sha256", "checksum": "e6cfd38f1f5c0cbc309883e1915d1af6214ff61eb2de75659e1b8ea8008bb45a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/prod/arr_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "view", "schema": "prod", "bind": false}, "created_at": 1669795234.5389037, "compiled_sql": "select * from finance.arr_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"prod\".\"arr_daily\""}, "model.main.user_days_seen": {"raw_sql": "{% if target.name == 'prod' %}\n  {{ config(materialized='table', bind=False) }}\n{% else %}\n  {{ config(materialized='view', bind=False) }}\n{% endif %}\n\n\nwith s as (\n    select date,\n           u.id,\n           u.company_id,\n           (case when ua.id is not null then 1 else 0 end) as seen_day\n    from const.dim_calendar dc\n    join {{ ref('user_comb') }} u ON 1=1\n    join {{ ref('ff_company_comb') }} ac ON ac.id = u.company_id\n    left join {{ ref('user_activity') }} ua on ua.id = u.id\n                                    and ua.company_id = u.company_id\n                                    and ua.time_day = dc.date\n    where dc.date > '2019-01-01'\n      and dc.date < CURRENT_DATE\n      and ac.is_in_analytics\n),\n\nprep as (\n    select  s1.date,\n            s1.id,\n            s1.company_id,\n            sum(s1.seen_day) over (partition by id, company_id order by s1.date rows 29 preceding) as days_seen30\n    from s s1\n\n)\n\nselect *\nfrom prep\nwhere days_seen30 > 0", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.user_comb", "model.main.ff_company_comb", "model.main.user_activity"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "user", "user_days_seen"], "unique_id": "model.main.user_days_seen", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "user/user_days_seen.sql", "original_file_path": "models/user/user_days_seen.sql", "name": "user_days_seen", "alias": "user_days_seen", "checksum": {"name": "sha256", "checksum": "4184d40d9d82a84166e93f821ffcf22ae217c18ba3234f53285cdd8e36bcf3dc"}, "tags": [], "refs": [["user_comb"], ["ff_company_comb"], ["user_activity"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/user/user_days_seen.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "table", "bind": false}, "created_at": 1669795234.5458035, "compiled_sql": "\n  \n\n\n\nwith s as (\n    select date,\n           u.id,\n           u.company_id,\n           (case when ua.id is not null then 1 else 0 end) as seen_day\n    from const.dim_calendar dc\n    join \"snowdb\".\"analytics\".\"user_comb\" u ON 1=1\n    join \"snowdb\".\"analytics\".\"ff_company_comb\" ac ON ac.id = u.company_id\n    left join \"snowdb\".\"analytics\".\"user_activity\" ua on ua.id = u.id\n                                    and ua.company_id = u.company_id\n                                    and ua.time_day = dc.date\n    where dc.date > '2019-01-01'\n      and dc.date < CURRENT_DATE\n      and ac.is_in_analytics\n),\n\nprep as (\n    select  s1.date,\n            s1.id,\n            s1.company_id,\n            sum(s1.seen_day) over (partition by id, company_id order by s1.date rows 29 preceding) as days_seen30\n    from s s1\n\n)\n\nselect *\nfrom prep\nwhere days_seen30 > 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"user_days_seen\""}, "model.main.bi_mrr_weekly": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n{{ mrr_by_period('weekly') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.main.mrr_by_period"], "nodes": ["model.main.bi_main_billing_plans", "model.main.bi_main_billing_plans"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "bi_mrr_weekly"], "unique_id": "model.main.bi_mrr_weekly", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/bi_mrr_weekly.sql", "original_file_path": "models/bi/bi_mrr_weekly.sql", "name": "bi_mrr_weekly", "alias": "bi_mrr_weekly", "checksum": {"name": "sha256", "checksum": "4a3fefb95d6afa9e4c11e297426f1731ddf6d53fa888edd4a7513cae27be7201"}, "tags": [], "refs": [["bi_main_billing_plans"], ["bi_main_billing_plans"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/bi_mrr_weekly.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5496047, "compiled_sql": "\n\n\n\n    \n\n    with t as (\n        select * from const.dim_calendar\n        where True\n        and (\n            \n            -- we are subtracting 1 day in the following CTE which gives us last day of a week\n                day_name = 'Monday'\n            \n            \n            \n                and date <= date_trunc('week', CURRENT_DATE)\n            \n            and date > '2022-01-01'\n        )\n        or date = CURRENT_DATE\n    ),\n\n    mrr_by_period as (\n        select\n            t.date - interval '1 day' as dt,\n            'zuora' as source,\n            za.name as name,\n            COALESCE(sum(rpc.mrr), 0) as current_mrr,\n            za.id as zuora_acc_id,\n            za.crmid as sfdc_id,\n            trim('t' from za.x15five_com_company_id__c)::int as company_id,\n            za.customersegment__c || ' - ' || za.revenuesegment__c as raw_segment,\n            UPPER(za.customersegment__c) as customer_segment,\n            UPPER(za.revenuesegment__c) as revenue_segment,\n            UPPER(sfdc.company_segment__c) as company_segment\n\n        from zuora.account za\n\n        join t on 1=1\n\n        left join (\n            select\n                rpc_sub.mrr as mrr,\n                a.id as accountid,\n                rpc_sub.effectivestartdate as effectivestartdate,\n                rpc_sub.effectiveenddate as effectiveenddate,\n                rpc_sub.chargetype as charge_type\n            from zuora.rateplancharge rpc_sub\n            join zuora.rateplan rp on rp.id = rpc_sub.rateplanid\n            join zuora.subscription s on s.id = rp.subscriptionid and s.status not in ('Draft', 'Expired')\n            join zuora.account a on s.accountid = a.id\n        ) rpc\n        on za.id = rpc.accountid\n        and rpc.effectivestartdate <= t.date - interval '1 day'\n        AND (rpc.effectiveenddate > t.date - interval '1 day' or rpc.effectiveenddate is null)\n        and rpc.charge_type = 'Recurring'\n\n        left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(za.crmid, 15)\n\n        GROUP BY t.date, za.id, za.crmid, za.name, company_id, raw_segment, company_segment, revenue_segment, customer_segment\n        ORDER BY t.date, za.id\n    ),\n\n\n\n    emplify_historical as (\n        select\n            CASE WHEN 'weekly' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_emplify' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = 'Emplify'\n        AND mrr_h.ts <= '2021-12-31'\n        AND mrr_h.ts >= '2021-03-31'\n        \n            and mrr_h.ts = '2021-12-31'\n        \n        ORDER BY dt, za.accountnumber\n    ),\n\n    fifteen5_historical as (\n        select\n            CASE WHEN 'weekly' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_15five' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = '15Five'\n        AND mrr_h.ts <= '2021-12-31'\n        \n            and mrr_h.ts = '2021-12-31'\n        \n        ORDER BY dt, za.accountnumber\n    ),\n\n    mrr_records as (\n\n        select\n            all_mrr.dt,\n            all_mrr.source,\n            all_mrr.name,\n            all_mrr.sfdc_id,\n            all_mrr.company_id,\n            all_mrr.raw_segment,\n            all_mrr.customer_segment,\n            all_mrr.revenue_segment,\n            all_mrr.company_segment,\n            all_mrr.current_mrr,\n            all_mrr.zuora_acc_id,\n            CASE\n                WHEN\n                    (all_mrr.dt = '2021-12-31' and 'weekly' = 'monthly')\n                    OR (all_mrr.dt = '2021-12-26' and 'weekly' = 'weekly') THEN\n                    current_mrr\n                ELSE\n                    COALESCE(lag(all_mrr.current_mrr, 1) over (partition by all_mrr.zuora_acc_id order by all_mrr.dt), 0)\n            END as prev_mrr,\n            CASE\n                WHEN prev_mrr = 0 and not (all_mrr.dt = '2021-03-31' and source = 'historical_emplify')\n                THEN current_mrr ELSE 0\n            END as new_logo,\n            CASE\n                WHEN prev_mrr = 0 and all_mrr.dt = '2021-03-31' and source = 'historical_emplify'\n            THEN current_mrr ELSE 0\n            END as other,\n            CASE\n                WHEN prev_mrr < current_mrr and prev_mrr > 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as expansion,\n            CASE\n                WHEN prev_mrr > current_mrr and current_mrr != 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as contraction,\n            CASE\n                WHEN prev_mrr > 0 and current_mrr = 0\n                THEN -prev_mrr ELSE 0\n            END as churn,\n\n            CASE WHEN bp.product_name is not null THEN\n                bp.product_name\n            ELSE\n                most_recent_bp.product_name\n            END as product_name\n        from (\n            select * from mrr_by_period\n            union all\n            select * from emplify_historical\n            union all\n            select * from fifteen5_historical\n        ) all_mrr\n        left join \"snowdb\".\"analytics\".\"bi_main_billing_plans\" bp on all_mrr.dt = bp.dt and all_mrr.zuora_acc_id = bp.zuora_acc_id\n        left join (\n            select\n                *,\n                row_number() over (partition by zuora_acc_id order by dt desc) as row_n\n            from \"snowdb\".\"analytics\".\"bi_main_billing_plans\"\n        ) most_recent_bp on all_mrr.zuora_acc_id = most_recent_bp.zuora_acc_id and row_n = 1\n        order by all_mrr.dt\n    )\n\nselect\n    mrr_records.*\n    \nfrom mrr_records\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bi_mrr_weekly\""}, "model.main.bi_main_billing_plans": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith main_billing_plan as (\n    select\n        zuora_acc_id,\n        product_name,\n        dt\n    from (\n        select\n            *,\n            row_number() over (partition by zuora_acc_id, dt order by is_transform asc, mrr desc) as row_n\n        from {{ ref('bi_billing_plans') }}\n    )\n    where row_n = 1\n)\n\nselect * from main_billing_plan", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.bi_billing_plans"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "bi_main_billing_plans"], "unique_id": "model.main.bi_main_billing_plans", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/bi_main_billing_plans.sql", "original_file_path": "models/bi/bi_main_billing_plans.sql", "name": "bi_main_billing_plans", "alias": "bi_main_billing_plans", "checksum": {"name": "sha256", "checksum": "dab5b6d6bbe99d8020c301284efc9e2e49ac50ad4392c38a2d0b04cda66c2dc3"}, "tags": [], "refs": [["bi_billing_plans"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/bi_main_billing_plans.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.556896, "compiled_sql": "\n\nwith main_billing_plan as (\n    select\n        zuora_acc_id,\n        product_name,\n        dt\n    from (\n        select\n            *,\n            row_number() over (partition by zuora_acc_id, dt order by is_transform asc, mrr desc) as row_n\n        from \"snowdb\".\"analytics\".\"bi_billing_plans\"\n    )\n    where row_n = 1\n)\n\nselect * from main_billing_plan", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bi_main_billing_plans\""}, "model.main.bi_wau_mau": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith wau as (\n    select\n        date_trunc('week', ua.time_day) as \"date\",\n        ua.company_id,\n        count(distinct ua.id) as wau\n    from pg.user_activity ua\n    where True\n    and ua.customer_state = 'paying'\n    group by \"date\", ua.company_id\n),\nmau as (\n    select\n        date_trunc('month', ua.time_day) as \"date\",\n        ua.company_id,\n        count(distinct ua.id) as mau\n    from {{ ref('user_activity') }} ua\n    where True\n    and ua.customer_state = 'paying'\n    group by \"date\", ua.company_id\n)\n\nselect\n    wau.\"date\",\n    wau.company_id,\n    COALESCE(sp.value, LAG(sp.value ignore nulls) over (partition by wau.company_id order by wau.\"date\"))::int as total_users,\n    CASE WHEN mau.mau > total_users THEN\n        total_users\n    ElSE\n        mau.mau\n    END as mau,\n    CASE WHEN wau.wau > total_users THEN\n        total_users\n    ElSE\n        wau.wau\n    END as wau,\n    mau.mau as mau_raw,\n    wau.wau as wau_raw,\n    za.customersegment__c as customer_segment,\n    za.revenuesegment__c as revenue_segment,\n    sfdc.company_segment__c as company_segment\nfrom wau\njoin mau on wau.company_id = mau.company_id and date_trunc('month', mau.\"date\") = date_trunc('month', wau.\"date\")\njoin {{ ref('company_comb') }} c on c.id = wau.company_id\nleft join {{ ref('stats_point_comb') }} sp on (\n    wau.company_id = sp.company_id\n    and wau.\"date\" = sp.cal_week_start_dt\n    and sp.generator = 'TotalUsers'\n)\nleft join {{ ref('sfdc_company_comb') }} company_sfdc on company_sfdc.company_id = wau.company_id\nleft join ext.sfdc_account sfdc ON left(sfdc.id, 15) = left(company_sfdc.salesforce_id, 15)\nleft join zuora.account za ON left(za.crmid, 15) = left(sfdc.id, 15)\nwhere c.is_in_analytics = True", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.user_activity", "model.main.company_comb", "model.main.stats_point_comb", "model.main.sfdc_company_comb"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "bi_wau_mau"], "unique_id": "model.main.bi_wau_mau", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/bi_wau_mau.sql", "original_file_path": "models/bi/bi_wau_mau.sql", "name": "bi_wau_mau", "alias": "bi_wau_mau", "checksum": {"name": "sha256", "checksum": "9bd12b3e3d91e22e309c070a587529e896af17affd8996c73a3450fa6f32baea"}, "tags": [], "refs": [["user_activity"], ["company_comb"], ["stats_point_comb"], ["sfdc_company_comb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/bi_wau_mau.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5593293, "compiled_sql": "\n\nwith wau as (\n    select\n        date_trunc('week', ua.time_day) as \"date\",\n        ua.company_id,\n        count(distinct ua.id) as wau\n    from pg.user_activity ua\n    where True\n    and ua.customer_state = 'paying'\n    group by \"date\", ua.company_id\n),\nmau as (\n    select\n        date_trunc('month', ua.time_day) as \"date\",\n        ua.company_id,\n        count(distinct ua.id) as mau\n    from \"snowdb\".\"analytics\".\"user_activity\" ua\n    where True\n    and ua.customer_state = 'paying'\n    group by \"date\", ua.company_id\n)\n\nselect\n    wau.\"date\",\n    wau.company_id,\n    COALESCE(sp.value, LAG(sp.value ignore nulls) over (partition by wau.company_id order by wau.\"date\"))::int as total_users,\n    CASE WHEN mau.mau > total_users THEN\n        total_users\n    ElSE\n        mau.mau\n    END as mau,\n    CASE WHEN wau.wau > total_users THEN\n        total_users\n    ElSE\n        wau.wau\n    END as wau,\n    mau.mau as mau_raw,\n    wau.wau as wau_raw,\n    za.customersegment__c as customer_segment,\n    za.revenuesegment__c as revenue_segment,\n    sfdc.company_segment__c as company_segment\nfrom wau\njoin mau on wau.company_id = mau.company_id and date_trunc('month', mau.\"date\") = date_trunc('month', wau.\"date\")\njoin \"snowdb\".\"analytics\".\"company_comb\" c on c.id = wau.company_id\nleft join \"snowdb\".\"analytics\".\"stats_point_comb\" sp on (\n    wau.company_id = sp.company_id\n    and wau.\"date\" = sp.cal_week_start_dt\n    and sp.generator = 'TotalUsers'\n)\nleft join \"snowdb\".\"analytics\".\"sfdc_company_comb\" company_sfdc on company_sfdc.company_id = wau.company_id\nleft join ext.sfdc_account sfdc ON left(sfdc.id, 15) = left(company_sfdc.salesforce_id, 15)\nleft join zuora.account za ON left(za.crmid, 15) = left(sfdc.id, 15)\nwhere c.is_in_analytics = True", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bi_wau_mau\""}, "model.main.bi_mrr_history_monthly": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n    {{ zuora_mrr('monthly') }}\n\n    emplify_historical as (\n        select\n            mrr_h.ts as dt,\n            'historical_emplify' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE WHEN mrr_h.company_name in (\n            'Kittle Property Group',\n            'T-H Marine Supplies, Inc',\n            'Titus Talent Strategies (deleted)',\n            'GDS Link LLC (deleted)',\n            'Omni Cable Corporation'\n            ) THEN\n                CONCAT('duplicated_', mrr_h.customer_external_ids)\n            ELSE\n                CASE\n                    WHEN za.id is not null THEN\n                        za.id\n                    ELSE\n                        mrr_h.customer_external_ids\n                END\n            -- in history mrr records v1 this is rarely going to be an actual zuora id but for consistency we are naming it like this\n            END as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segment as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    CASE\n                        WHEN UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2))) = 'NON CONTRACT' THEN \n                            'NO CONTRACT'\n                        ELSE \n                            UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n                    END\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.customer_external_ids\n        where True\n        and mrr_h.company = 'Emplify'\n        AND mrr_h.ts <= '2021-12-31'\n        AND mrr_h.ts >= '2021-03-31'\n        ORDER BY dt, za.accountnumber\n    ),\n\n    fifteen5_historical as (\n        select\n            CASE WHEN '{{ period }}' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_15five' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE\n                WHEN mrr_h.customer_external_ids = '' THEN\n                    CASE\n                        WHEN mrr_h.id_15five = 0 THEN\n                            mrr_h.company_name\n                        WHEN mrr_h.company_name in ('BOLT ON TECHNOLOGY', 'Harrison French & Associates') THEN\n                            concat('duplicate_', mrr_h.id_15five::text)\n                        ELSE\n                            mrr_h.id_15five::text\n                    END\n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.customer_external_ids\n            -- in history mrr records v1 this is rarely going to be an actual zuora id but for consistency we are naming it like this\n            END as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segment as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history mrr_h\n        left join zuora.account za on (za.accountnumber = mrr_h.customer_external_ids OR (za.x15five_com_company_id__c = mrr_h.id_15five and mrr_h.id_15five != 0))\n        where True\n        and mrr_h.company = '15Five'\n        AND mrr_h.ts <= '2021-12-31'\n        ORDER BY dt, za.accountnumber\n    )\n\n    select\n        all_mrr.dt,\n        all_mrr.source,\n        all_mrr.name,\n        all_mrr.sfdc_id,\n        all_mrr.company_id,\n        all_mrr.raw_segment,\n        all_mrr.customer_segment,\n        all_mrr.revenue_segment,\n        all_mrr.company_segment,\n        all_mrr.current_mrr,\n        all_mrr.zuora_acc_id,\n        COALESCE(lag(all_mrr.current_mrr, 1) over (partition by zuora_acc_id order by dt), 0) as prev_mrr,\n        CASE\n            WHEN prev_mrr = 0 and not (dt = '2021-03-31' and source = 'historical_emplify')\n            THEN current_mrr ELSE 0\n        END as new_logo,\n        CASE\n            WHEN prev_mrr = 0 and dt = '2021-03-31' and source = 'historical_emplify'\n        THEN current_mrr ELSE 0\n        END as other,\n        CASE\n            WHEN prev_mrr < current_mrr and prev_mrr > 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as expansion,\n        CASE\n            WHEN prev_mrr > current_mrr and current_mrr != 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as contraction,\n        CASE\n            WHEN prev_mrr > 0 and current_mrr = 0\n            THEN -prev_mrr ELSE 0\n        END as churn\n    from (\n        select * from mrr_by_period\n        union all\n        select * from emplify_historical\n        union all\n        select * from fifteen5_historical\n    ) all_mrr\n    order by dt", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.main.zuora_mrr"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "bi_mrr_history_monthly"], "unique_id": "model.main.bi_mrr_history_monthly", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/bi_mrr_history_monthly.sql", "original_file_path": "models/bi/bi_mrr_history_monthly.sql", "name": "bi_mrr_history_monthly", "alias": "bi_mrr_history_monthly", "checksum": {"name": "sha256", "checksum": "a258e46c1833f9125d3e3ef2300ac1a6660ab9d4523f29e8b3042837cdc06ac6"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/bi_mrr_history_monthly.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5623965, "compiled_sql": "\n\n    \n\n    with t as (\n        select * from const.dim_calendar\n        where True\n        and (\n            \n                day = 1\n            \n            \n            \n                and date <= date_trunc('month', CURRENT_DATE)\n            \n            and date > '2022-01-01'\n        )\n        or date = CURRENT_DATE\n    ),\n\n    mrr_by_period as (\n        select\n            t.date - interval '1 day' as dt,\n            'zuora' as source,\n            za.name as name,\n            COALESCE(sum(rpc.mrr), 0) as current_mrr,\n            za.id as zuora_acc_id,\n            za.crmid as sfdc_id,\n            trim('t' from za.x15five_com_company_id__c)::int as company_id,\n            za.customersegment__c || ' - ' || za.revenuesegment__c as raw_segment,\n            UPPER(za.customersegment__c) as customer_segment,\n            UPPER(za.revenuesegment__c) as revenue_segment,\n            UPPER(sfdc.company_segment__c) as company_segment\n\n        from zuora.account za\n\n        join t on 1=1\n\n        left join (\n            select\n                rpc_sub.mrr as mrr,\n                a.id as accountid,\n                rpc_sub.effectivestartdate as effectivestartdate,\n                rpc_sub.effectiveenddate as effectiveenddate,\n                rpc_sub.chargetype as charge_type\n            from zuora.rateplancharge rpc_sub\n            join zuora.rateplan rp on rp.id = rpc_sub.rateplanid\n            join zuora.subscription s on s.id = rp.subscriptionid and s.status not in ('Draft', 'Expired')\n            join zuora.account a on s.accountid = a.id\n        ) rpc\n        on za.id = rpc.accountid\n        and rpc.effectivestartdate <= t.date - interval '1 day'\n        AND (rpc.effectiveenddate > t.date - interval '1 day' or rpc.effectiveenddate is null)\n        and rpc.charge_type = 'Recurring'\n\n        left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(za.crmid, 15)\n\n        GROUP BY t.date, za.id, za.crmid, za.name, company_id, raw_segment, company_segment, revenue_segment, customer_segment\n        ORDER BY t.date, za.id\n    ),\n\n\n\n    emplify_historical as (\n        select\n            mrr_h.ts as dt,\n            'historical_emplify' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE WHEN mrr_h.company_name in (\n            'Kittle Property Group',\n            'T-H Marine Supplies, Inc',\n            'Titus Talent Strategies (deleted)',\n            'GDS Link LLC (deleted)',\n            'Omni Cable Corporation'\n            ) THEN\n                CONCAT('duplicated_', mrr_h.customer_external_ids)\n            ELSE\n                CASE\n                    WHEN za.id is not null THEN\n                        za.id\n                    ELSE\n                        mrr_h.customer_external_ids\n                END\n            -- in history mrr records v1 this is rarely going to be an actual zuora id but for consistency we are naming it like this\n            END as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segment as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    CASE\n                        WHEN UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2))) = 'NON CONTRACT' THEN \n                            'NO CONTRACT'\n                        ELSE \n                            UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n                    END\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.customer_external_ids\n        where True\n        and mrr_h.company = 'Emplify'\n        AND mrr_h.ts <= '2021-12-31'\n        AND mrr_h.ts >= '2021-03-31'\n        ORDER BY dt, za.accountnumber\n    ),\n\n    fifteen5_historical as (\n        select\n            CASE WHEN '' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_15five' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE\n                WHEN mrr_h.customer_external_ids = '' THEN\n                    CASE\n                        WHEN mrr_h.id_15five = 0 THEN\n                            mrr_h.company_name\n                        WHEN mrr_h.company_name in ('BOLT ON TECHNOLOGY', 'Harrison French & Associates') THEN\n                            concat('duplicate_', mrr_h.id_15five::text)\n                        ELSE\n                            mrr_h.id_15five::text\n                    END\n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.customer_external_ids\n            -- in history mrr records v1 this is rarely going to be an actual zuora id but for consistency we are naming it like this\n            END as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segment as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segment,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history mrr_h\n        left join zuora.account za on (za.accountnumber = mrr_h.customer_external_ids OR (za.x15five_com_company_id__c = mrr_h.id_15five and mrr_h.id_15five != 0))\n        where True\n        and mrr_h.company = '15Five'\n        AND mrr_h.ts <= '2021-12-31'\n        ORDER BY dt, za.accountnumber\n    )\n\n    select\n        all_mrr.dt,\n        all_mrr.source,\n        all_mrr.name,\n        all_mrr.sfdc_id,\n        all_mrr.company_id,\n        all_mrr.raw_segment,\n        all_mrr.customer_segment,\n        all_mrr.revenue_segment,\n        all_mrr.company_segment,\n        all_mrr.current_mrr,\n        all_mrr.zuora_acc_id,\n        COALESCE(lag(all_mrr.current_mrr, 1) over (partition by zuora_acc_id order by dt), 0) as prev_mrr,\n        CASE\n            WHEN prev_mrr = 0 and not (dt = '2021-03-31' and source = 'historical_emplify')\n            THEN current_mrr ELSE 0\n        END as new_logo,\n        CASE\n            WHEN prev_mrr = 0 and dt = '2021-03-31' and source = 'historical_emplify'\n        THEN current_mrr ELSE 0\n        END as other,\n        CASE\n            WHEN prev_mrr < current_mrr and prev_mrr > 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as expansion,\n        CASE\n            WHEN prev_mrr > current_mrr and current_mrr != 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as contraction,\n        CASE\n            WHEN prev_mrr > 0 and current_mrr = 0\n            THEN -prev_mrr ELSE 0\n        END as churn\n    from (\n        select * from mrr_by_period\n        union all\n        select * from emplify_historical\n        union all\n        select * from fifteen5_historical\n    ) all_mrr\n    order by dt", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bi_mrr_history_monthly\""}, "model.main.tmp_zuora_mrr": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n    with t as (\n        select * from const.dim_calendar\n        where True\n        and (\n            day = 1\n            and date <= date_trunc('month', CURRENT_DATE)\n            and date > '2021-01-01'\n        )\n        or date = CURRENT_DATE\n    ),\n\n    mrr_by_period as (\n        select\n            t.date - interval '1 day' as dt,\n            'zuora' as source,\n            za.name as name,\n            COALESCE(sum(rpc.mrr), 0) as current_mrr,\n            za.id as unique_id,\n            za.crmid as sfdc_id,\n            trim('t' from za.x15five_com_company_id__c)::int as company_id,\n            za.customersegment__c || ' - ' || za.revenuesegment__c as segment,\n            UPPER(za.customersegment__c) as customer_segment,\n            UPPER(za.revenuesegment__c) as revenue_segment,\n            UPPER(sfdc.company_segment__c) as company_segment\n\n        from zuora.account za\n\n        join t on 1=1\n\n        left join (\n            select\n                rpc_sub.mrr as mrr,\n                CASE\n                    WHEN a.parentzuoraaccountid__c is not null THEN\n                        trim('t' from a.parentzuoraaccountid__c)\n                    ELSE\n                        a.id\n                END as accountid,\n                rpc_sub.effectivestartdate as effectivestartdate,\n                rpc_sub.effectiveenddate as effectiveenddate,\n                rpc_sub.chargetype as charge_type\n            from zuora.rateplancharge rpc_sub\n            join zuora.rateplan rp on rp.id = rpc_sub.rateplanid\n            join zuora.subscription s on s.id = rp.subscriptionid and s.status not in ('Draft', 'Expired')\n            join zuora.account a on s.accountid = a.id\n        ) rpc\n        on za.id = rpc.accountid\n        and rpc.effectivestartdate <= t.date - interval '1 day'\n        AND (rpc.effectiveenddate > t.date - interval '1 day' or rpc.effectiveenddate is null)\n        and rpc.charge_type = 'Recurring'\n\n        left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(za.crmid, 15)\n\n        WHERE za.parentzuoraaccountid__c is null\n\n        GROUP BY t.date, za.id, za.crmid, za.name, company_id, segment, company_segment, revenue_segment, customer_segment\n        ORDER BY t.date, za.id\n    )\n\n    select\n        all_mrr.dt,\n        all_mrr.source,\n        all_mrr.name,\n        all_mrr.sfdc_id,\n        all_mrr.company_id,\n        all_mrr.segment,\n        all_mrr.customer_segment,\n        all_mrr.revenue_segment,\n        all_mrr.company_segment,\n        all_mrr.current_mrr,\n        all_mrr.unique_id,\n        COALESCE(lag(all_mrr.current_mrr, 1) over (partition by unique_id order by dt), 0) as prev_mrr,\n        COALESCE(lag(all_mrr.current_mrr, 1) over (partition by sfdc_id order by dt), 0) as p_mrr_sfdc_id,\n        CASE\n            WHEN prev_mrr = 0\n            THEN current_mrr ELSE 0\n        END as new_logo,\n        CASE\n            WHEN prev_mrr < current_mrr and prev_mrr > 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as expansion,\n        CASE\n            WHEN prev_mrr > current_mrr and current_mrr != 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as contraction,\n        CASE\n            WHEN prev_mrr > 0 and current_mrr = 0\n            THEN -prev_mrr ELSE 0\n        END as churn\n    from mrr_by_period all_mrr\n    order by dt", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "tmp_zuora_mrr"], "unique_id": "model.main.tmp_zuora_mrr", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/tmp_zuora_mrr.sql", "original_file_path": "models/bi/tmp_zuora_mrr.sql", "name": "tmp_zuora_mrr", "alias": "tmp_zuora_mrr", "checksum": {"name": "sha256", "checksum": "091a3fe0abc671c63168277aac0ac0d08db0d9dd758949942ed44d580802d4ea"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/tmp_zuora_mrr.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5659041, "compiled_sql": "\n\n    with t as (\n        select * from const.dim_calendar\n        where True\n        and (\n            day = 1\n            and date <= date_trunc('month', CURRENT_DATE)\n            and date > '2021-01-01'\n        )\n        or date = CURRENT_DATE\n    ),\n\n    mrr_by_period as (\n        select\n            t.date - interval '1 day' as dt,\n            'zuora' as source,\n            za.name as name,\n            COALESCE(sum(rpc.mrr), 0) as current_mrr,\n            za.id as unique_id,\n            za.crmid as sfdc_id,\n            trim('t' from za.x15five_com_company_id__c)::int as company_id,\n            za.customersegment__c || ' - ' || za.revenuesegment__c as segment,\n            UPPER(za.customersegment__c) as customer_segment,\n            UPPER(za.revenuesegment__c) as revenue_segment,\n            UPPER(sfdc.company_segment__c) as company_segment\n\n        from zuora.account za\n\n        join t on 1=1\n\n        left join (\n            select\n                rpc_sub.mrr as mrr,\n                CASE\n                    WHEN a.parentzuoraaccountid__c is not null THEN\n                        trim('t' from a.parentzuoraaccountid__c)\n                    ELSE\n                        a.id\n                END as accountid,\n                rpc_sub.effectivestartdate as effectivestartdate,\n                rpc_sub.effectiveenddate as effectiveenddate,\n                rpc_sub.chargetype as charge_type\n            from zuora.rateplancharge rpc_sub\n            join zuora.rateplan rp on rp.id = rpc_sub.rateplanid\n            join zuora.subscription s on s.id = rp.subscriptionid and s.status not in ('Draft', 'Expired')\n            join zuora.account a on s.accountid = a.id\n        ) rpc\n        on za.id = rpc.accountid\n        and rpc.effectivestartdate <= t.date - interval '1 day'\n        AND (rpc.effectiveenddate > t.date - interval '1 day' or rpc.effectiveenddate is null)\n        and rpc.charge_type = 'Recurring'\n\n        left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(za.crmid, 15)\n\n        WHERE za.parentzuoraaccountid__c is null\n\n        GROUP BY t.date, za.id, za.crmid, za.name, company_id, segment, company_segment, revenue_segment, customer_segment\n        ORDER BY t.date, za.id\n    )\n\n    select\n        all_mrr.dt,\n        all_mrr.source,\n        all_mrr.name,\n        all_mrr.sfdc_id,\n        all_mrr.company_id,\n        all_mrr.segment,\n        all_mrr.customer_segment,\n        all_mrr.revenue_segment,\n        all_mrr.company_segment,\n        all_mrr.current_mrr,\n        all_mrr.unique_id,\n        COALESCE(lag(all_mrr.current_mrr, 1) over (partition by unique_id order by dt), 0) as prev_mrr,\n        COALESCE(lag(all_mrr.current_mrr, 1) over (partition by sfdc_id order by dt), 0) as p_mrr_sfdc_id,\n        CASE\n            WHEN prev_mrr = 0\n            THEN current_mrr ELSE 0\n        END as new_logo,\n        CASE\n            WHEN prev_mrr < current_mrr and prev_mrr > 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as expansion,\n        CASE\n            WHEN prev_mrr > current_mrr and current_mrr != 0\n            THEN current_mrr - prev_mrr ELSE 0\n        END as contraction,\n        CASE\n            WHEN prev_mrr > 0 and current_mrr = 0\n            THEN -prev_mrr ELSE 0\n        END as churn\n    from mrr_by_period all_mrr\n    order by dt", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"tmp_zuora_mrr\""}, "model.main.bi_mrr_quarterly": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n{{ mrr_by_period('quarterly') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.main.mrr_by_period"], "nodes": ["model.main.bi_main_billing_plans", "model.main.bi_main_billing_plans"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "bi_mrr_quarterly"], "unique_id": "model.main.bi_mrr_quarterly", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/bi_mrr_quarterly.sql", "original_file_path": "models/bi/bi_mrr_quarterly.sql", "name": "bi_mrr_quarterly", "alias": "bi_mrr_quarterly", "checksum": {"name": "sha256", "checksum": "262ecb62c720fadd54f3853e62d69f319d8f023408b2abb6ad577c70d682b997"}, "tags": [], "refs": [["bi_main_billing_plans"], ["bi_main_billing_plans"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/bi_mrr_quarterly.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5682576, "compiled_sql": "\n\n\n\n    \n\n    with t as (\n        select * from const.dim_calendar\n        where True\n        and (\n            \n                day = 1\n            \n            \n            -- we are subtracting 1 day in the following CTE which gives us last day of a quarter\n                and month in (4, 7, 10, 1)\n            \n            \n                and date <= date_trunc('month', CURRENT_DATE)\n            \n            and date > '2022-01-01'\n        )\n        or date = CURRENT_DATE\n    ),\n\n    mrr_by_period as (\n        select\n            t.date - interval '1 day' as dt,\n            'zuora' as source,\n            za.name as name,\n            COALESCE(sum(rpc.mrr), 0) as current_mrr,\n            za.id as zuora_acc_id,\n            za.crmid as sfdc_id,\n            trim('t' from za.x15five_com_company_id__c)::int as company_id,\n            za.customersegment__c || ' - ' || za.revenuesegment__c as raw_segment,\n            UPPER(za.customersegment__c) as customer_segment,\n            UPPER(za.revenuesegment__c) as revenue_segment,\n            UPPER(sfdc.company_segment__c) as company_segment\n\n        from zuora.account za\n\n        join t on 1=1\n\n        left join (\n            select\n                rpc_sub.mrr as mrr,\n                a.id as accountid,\n                rpc_sub.effectivestartdate as effectivestartdate,\n                rpc_sub.effectiveenddate as effectiveenddate,\n                rpc_sub.chargetype as charge_type\n            from zuora.rateplancharge rpc_sub\n            join zuora.rateplan rp on rp.id = rpc_sub.rateplanid\n            join zuora.subscription s on s.id = rp.subscriptionid and s.status not in ('Draft', 'Expired')\n            join zuora.account a on s.accountid = a.id\n        ) rpc\n        on za.id = rpc.accountid\n        and rpc.effectivestartdate <= t.date - interval '1 day'\n        AND (rpc.effectiveenddate > t.date - interval '1 day' or rpc.effectiveenddate is null)\n        and rpc.charge_type = 'Recurring'\n\n        left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(za.crmid, 15)\n\n        GROUP BY t.date, za.id, za.crmid, za.name, company_id, raw_segment, company_segment, revenue_segment, customer_segment\n        ORDER BY t.date, za.id\n    ),\n\n\n\n    emplify_historical as (\n        select\n            CASE WHEN 'quarterly' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_emplify' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = 'Emplify'\n        AND mrr_h.ts <= '2021-12-31'\n        AND mrr_h.ts >= '2021-03-31'\n        \n        ORDER BY dt, za.accountnumber\n    ),\n\n    fifteen5_historical as (\n        select\n            CASE WHEN 'quarterly' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_15five' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = '15Five'\n        AND mrr_h.ts <= '2021-12-31'\n        \n        ORDER BY dt, za.accountnumber\n    ),\n\n    mrr_records as (\n\n        select\n            all_mrr.dt,\n            all_mrr.source,\n            all_mrr.name,\n            all_mrr.sfdc_id,\n            all_mrr.company_id,\n            all_mrr.raw_segment,\n            all_mrr.customer_segment,\n            all_mrr.revenue_segment,\n            all_mrr.company_segment,\n            all_mrr.current_mrr,\n            all_mrr.zuora_acc_id,\n            CASE\n                WHEN\n                    (all_mrr.dt = '2021-12-31' and 'quarterly' = 'monthly')\n                    OR (all_mrr.dt = '2021-12-26' and 'quarterly' = 'weekly') THEN\n                    current_mrr\n                ELSE\n                    COALESCE(lag(all_mrr.current_mrr, 1) over (partition by all_mrr.zuora_acc_id order by all_mrr.dt), 0)\n            END as prev_mrr,\n            CASE\n                WHEN prev_mrr = 0 and not (all_mrr.dt = '2021-03-31' and source = 'historical_emplify')\n                THEN current_mrr ELSE 0\n            END as new_logo,\n            CASE\n                WHEN prev_mrr = 0 and all_mrr.dt = '2021-03-31' and source = 'historical_emplify'\n            THEN current_mrr ELSE 0\n            END as other,\n            CASE\n                WHEN prev_mrr < current_mrr and prev_mrr > 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as expansion,\n            CASE\n                WHEN prev_mrr > current_mrr and current_mrr != 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as contraction,\n            CASE\n                WHEN prev_mrr > 0 and current_mrr = 0\n                THEN -prev_mrr ELSE 0\n            END as churn,\n\n            CASE WHEN bp.product_name is not null THEN\n                bp.product_name\n            ELSE\n                most_recent_bp.product_name\n            END as product_name\n        from (\n            select * from mrr_by_period\n            union all\n            select * from emplify_historical\n            union all\n            select * from fifteen5_historical\n        ) all_mrr\n        left join \"snowdb\".\"analytics\".\"bi_main_billing_plans\" bp on all_mrr.dt = bp.dt and all_mrr.zuora_acc_id = bp.zuora_acc_id\n        left join (\n            select\n                *,\n                row_number() over (partition by zuora_acc_id order by dt desc) as row_n\n            from \"snowdb\".\"analytics\".\"bi_main_billing_plans\"\n        ) most_recent_bp on all_mrr.zuora_acc_id = most_recent_bp.zuora_acc_id and row_n = 1\n        order by all_mrr.dt\n    )\n\nselect\n    mrr_records.*\n    \n        ,\n        COALESCE(lag(current_mrr,\n        \n            4\n        \n        ) over (partition by zuora_acc_id order by dt), 0) as mrr_12m_ago,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(churn) over (\n                    partition by zuora_acc_id order by dt rows\n                    \n                        3\n                    \n                    preceding\n                )\n            ELSE\n                0\n        END as churn_trail_12m,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(contraction) over (\n                    partition by zuora_acc_id order by dt rows\n                    \n                        3\n                    \n                    preceding\n                )\n            ELSE\n                0\n        END as contraction_trail_12m,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(expansion) over (\n                    partition by zuora_acc_id order by dt rows\n                    \n                        3\n                    \n                    preceding\n                )\n            ELSE\n                0\n        END as expansion_trail_12m\n    \nfrom mrr_records\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bi_mrr_quarterly\""}, "model.main.bi_mrr_monthly": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n{{ mrr_by_period('monthly') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.main.mrr_by_period"], "nodes": ["model.main.bi_main_billing_plans", "model.main.bi_main_billing_plans"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "bi_mrr_monthly"], "unique_id": "model.main.bi_mrr_monthly", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/bi_mrr_monthly.sql", "original_file_path": "models/bi/bi_mrr_monthly.sql", "name": "bi_mrr_monthly", "alias": "bi_mrr_monthly", "checksum": {"name": "sha256", "checksum": "199c767f24d7b831bfdc9f7bd947f14c2b51d22b45b7494dc35ee313f1a52ef6"}, "tags": [], "refs": [["bi_main_billing_plans"], ["bi_main_billing_plans"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/bi_mrr_monthly.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5713618, "compiled_sql": "\n\n\n\n    \n\n    with t as (\n        select * from const.dim_calendar\n        where True\n        and (\n            \n                day = 1\n            \n            \n            \n                and date <= date_trunc('month', CURRENT_DATE)\n            \n            and date > '2022-01-01'\n        )\n        or date = CURRENT_DATE\n    ),\n\n    mrr_by_period as (\n        select\n            t.date - interval '1 day' as dt,\n            'zuora' as source,\n            za.name as name,\n            COALESCE(sum(rpc.mrr), 0) as current_mrr,\n            za.id as zuora_acc_id,\n            za.crmid as sfdc_id,\n            trim('t' from za.x15five_com_company_id__c)::int as company_id,\n            za.customersegment__c || ' - ' || za.revenuesegment__c as raw_segment,\n            UPPER(za.customersegment__c) as customer_segment,\n            UPPER(za.revenuesegment__c) as revenue_segment,\n            UPPER(sfdc.company_segment__c) as company_segment\n\n        from zuora.account za\n\n        join t on 1=1\n\n        left join (\n            select\n                rpc_sub.mrr as mrr,\n                a.id as accountid,\n                rpc_sub.effectivestartdate as effectivestartdate,\n                rpc_sub.effectiveenddate as effectiveenddate,\n                rpc_sub.chargetype as charge_type\n            from zuora.rateplancharge rpc_sub\n            join zuora.rateplan rp on rp.id = rpc_sub.rateplanid\n            join zuora.subscription s on s.id = rp.subscriptionid and s.status not in ('Draft', 'Expired')\n            join zuora.account a on s.accountid = a.id\n        ) rpc\n        on za.id = rpc.accountid\n        and rpc.effectivestartdate <= t.date - interval '1 day'\n        AND (rpc.effectiveenddate > t.date - interval '1 day' or rpc.effectiveenddate is null)\n        and rpc.charge_type = 'Recurring'\n\n        left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(za.crmid, 15)\n\n        GROUP BY t.date, za.id, za.crmid, za.name, company_id, raw_segment, company_segment, revenue_segment, customer_segment\n        ORDER BY t.date, za.id\n    ),\n\n\n\n    emplify_historical as (\n        select\n            CASE WHEN 'monthly' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_emplify' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = 'Emplify'\n        AND mrr_h.ts <= '2021-12-31'\n        AND mrr_h.ts >= '2021-03-31'\n        \n            and mrr_h.ts = '2021-12-31'\n        \n        ORDER BY dt, za.accountnumber\n    ),\n\n    fifteen5_historical as (\n        select\n            CASE WHEN 'monthly' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_15five' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = '15Five'\n        AND mrr_h.ts <= '2021-12-31'\n        \n            and mrr_h.ts = '2021-12-31'\n        \n        ORDER BY dt, za.accountnumber\n    ),\n\n    mrr_records as (\n\n        select\n            all_mrr.dt,\n            all_mrr.source,\n            all_mrr.name,\n            all_mrr.sfdc_id,\n            all_mrr.company_id,\n            all_mrr.raw_segment,\n            all_mrr.customer_segment,\n            all_mrr.revenue_segment,\n            all_mrr.company_segment,\n            all_mrr.current_mrr,\n            all_mrr.zuora_acc_id,\n            CASE\n                WHEN\n                    (all_mrr.dt = '2021-12-31' and 'monthly' = 'monthly')\n                    OR (all_mrr.dt = '2021-12-26' and 'monthly' = 'weekly') THEN\n                    current_mrr\n                ELSE\n                    COALESCE(lag(all_mrr.current_mrr, 1) over (partition by all_mrr.zuora_acc_id order by all_mrr.dt), 0)\n            END as prev_mrr,\n            CASE\n                WHEN prev_mrr = 0 and not (all_mrr.dt = '2021-03-31' and source = 'historical_emplify')\n                THEN current_mrr ELSE 0\n            END as new_logo,\n            CASE\n                WHEN prev_mrr = 0 and all_mrr.dt = '2021-03-31' and source = 'historical_emplify'\n            THEN current_mrr ELSE 0\n            END as other,\n            CASE\n                WHEN prev_mrr < current_mrr and prev_mrr > 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as expansion,\n            CASE\n                WHEN prev_mrr > current_mrr and current_mrr != 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as contraction,\n            CASE\n                WHEN prev_mrr > 0 and current_mrr = 0\n                THEN -prev_mrr ELSE 0\n            END as churn,\n\n            CASE WHEN bp.product_name is not null THEN\n                bp.product_name\n            ELSE\n                most_recent_bp.product_name\n            END as product_name\n        from (\n            select * from mrr_by_period\n            union all\n            select * from emplify_historical\n            union all\n            select * from fifteen5_historical\n        ) all_mrr\n        left join \"snowdb\".\"analytics\".\"bi_main_billing_plans\" bp on all_mrr.dt = bp.dt and all_mrr.zuora_acc_id = bp.zuora_acc_id\n        left join (\n            select\n                *,\n                row_number() over (partition by zuora_acc_id order by dt desc) as row_n\n            from \"snowdb\".\"analytics\".\"bi_main_billing_plans\"\n        ) most_recent_bp on all_mrr.zuora_acc_id = most_recent_bp.zuora_acc_id and row_n = 1\n        order by all_mrr.dt\n    )\n\nselect\n    mrr_records.*\n    \n        ,\n        COALESCE(lag(current_mrr,\n        \n            12\n        \n        ) over (partition by zuora_acc_id order by dt), 0) as mrr_12m_ago,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(churn) over (\n                    partition by zuora_acc_id order by dt rows\n                    \n                        11\n                    \n                    preceding\n                )\n            ELSE\n                0\n        END as churn_trail_12m,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(contraction) over (\n                    partition by zuora_acc_id order by dt rows\n                    \n                        11\n                    \n                    preceding\n                )\n            ELSE\n                0\n        END as contraction_trail_12m,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(expansion) over (\n                    partition by zuora_acc_id order by dt rows\n                    \n                        11\n                    \n                    preceding\n                )\n            ELSE\n                0\n        END as expansion_trail_12m\n    \nfrom mrr_records\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bi_mrr_monthly\""}, "model.main.bi_billing_plans": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith t as (\n    select * from const.dim_calendar\n    where True\n    and (\n        day = 1\n        and date <= date_trunc('month', CURRENT_DATE)\n        and date >= '2021-01-01'\n    )\n    or date = CURRENT_DATE\n),\n\nbilling_plan_except_transform as (\n    select\n       za.id as zuora_acc_id,\n       zp.name as product_name,\n       t.date - interval '1 day' as dt,\n       false as is_transform,\n       zrpc.mrr\n    from zuora.account za\n    join t on 1 = 1\n    join zuora.subscription zs on zs.accountid = za.id \n                    and zs.status not in ('Draft', 'Expired')\n    join zuora.rateplan zrp ON zrp.subscriptionid = zs.id\n    join zuora.rateplancharge zrpc ON zrpc.rateplanid = zrp.id\n    join zuora.product zp ON zrp.productid = zp.id\n\n    where true\n        and zrpc.name <> 'One-Time Fee'\n        and zrpc.effectivestartdate <= dt and (zrpc.effectiveenddate > dt or zrpc.effectiveenddate is null)\n        and zp.name in ('15Five Plus', 'Focus', 'Engage', 'Perform', '15Five Basic', 'Total Platform' )\n        and zrpc.chargetype = 'Recurring'\n),\n\ntransform_billing_plans as (\n    select\n        za.id as zuora_acc_id,\n        'Transform' as product_name,\n        t.date - interval '1 day' as dt,\n        true as is_transform,\n        zrpc.mrr\n    from zuora.account za\n    join t on 1 = 1\n    join zuora.subscription zs on zs.accountid = za.id\n                    and zs.status not in ('Draft', 'Expired')\n    join zuora.rateplan zrp ON zrp.subscriptionid = zs.id\n    join zuora.rateplancharge zrpc ON zrpc.rateplanid = zrp.id\n    join zuora.product zp ON zrp.productid = zp.id\n\n    where true\n        and zrpc.name <> 'One-Time Fee'\n        and zrpc.effectivestartdate <= dt and (zrpc.effectiveenddate > dt or zrpc.effectiveenddate is null)\n        and zp.name in (\n            'Transform',\n            'Insights Briefing',\n            '1:1 Engagement Action Planning',\n            'Group Engagement Action Planning',\n            'Education Subscription',\n            'OKR Skill Intensive',\n            'Manager Accelerator Subscription',\n            'Manager Accelerator Online',\n            'OKR Coaching',\n            '1:1 Coaching',\n            'Briefing Subscription',\n            'OKR Executive Alignment Set',\n            'Align',\n            'Group Coaching',\n            'Manager Accelerator Hybrid'\n        )\n        and zrpc.chargetype = 'Recurring'\n)\n\nselect * from billing_plan_except_transform\nunion all\nselect * from transform_billing_plans", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "bi", "bi_billing_plans"], "unique_id": "model.main.bi_billing_plans", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "bi/bi_billing_plans.sql", "original_file_path": "models/bi/bi_billing_plans.sql", "name": "bi_billing_plans", "alias": "bi_billing_plans", "checksum": {"name": "sha256", "checksum": "3ba3d7a5f7881ca390b1cd3057f1e991fb2b78e28e284f9ec437bb093e7285c4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/bi/bi_billing_plans.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5744665, "compiled_sql": "\n\nwith t as (\n    select * from const.dim_calendar\n    where True\n    and (\n        day = 1\n        and date <= date_trunc('month', CURRENT_DATE)\n        and date >= '2021-01-01'\n    )\n    or date = CURRENT_DATE\n),\n\nbilling_plan_except_transform as (\n    select\n       za.id as zuora_acc_id,\n       zp.name as product_name,\n       t.date - interval '1 day' as dt,\n       false as is_transform,\n       zrpc.mrr\n    from zuora.account za\n    join t on 1 = 1\n    join zuora.subscription zs on zs.accountid = za.id \n                    and zs.status not in ('Draft', 'Expired')\n    join zuora.rateplan zrp ON zrp.subscriptionid = zs.id\n    join zuora.rateplancharge zrpc ON zrpc.rateplanid = zrp.id\n    join zuora.product zp ON zrp.productid = zp.id\n\n    where true\n        and zrpc.name <> 'One-Time Fee'\n        and zrpc.effectivestartdate <= dt and (zrpc.effectiveenddate > dt or zrpc.effectiveenddate is null)\n        and zp.name in ('15Five Plus', 'Focus', 'Engage', 'Perform', '15Five Basic', 'Total Platform' )\n        and zrpc.chargetype = 'Recurring'\n),\n\ntransform_billing_plans as (\n    select\n        za.id as zuora_acc_id,\n        'Transform' as product_name,\n        t.date - interval '1 day' as dt,\n        true as is_transform,\n        zrpc.mrr\n    from zuora.account za\n    join t on 1 = 1\n    join zuora.subscription zs on zs.accountid = za.id\n                    and zs.status not in ('Draft', 'Expired')\n    join zuora.rateplan zrp ON zrp.subscriptionid = zs.id\n    join zuora.rateplancharge zrpc ON zrpc.rateplanid = zrp.id\n    join zuora.product zp ON zrp.productid = zp.id\n\n    where true\n        and zrpc.name <> 'One-Time Fee'\n        and zrpc.effectivestartdate <= dt and (zrpc.effectiveenddate > dt or zrpc.effectiveenddate is null)\n        and zp.name in (\n            'Transform',\n            'Insights Briefing',\n            '1:1 Engagement Action Planning',\n            'Group Engagement Action Planning',\n            'Education Subscription',\n            'OKR Skill Intensive',\n            'Manager Accelerator Subscription',\n            'Manager Accelerator Online',\n            'OKR Coaching',\n            '1:1 Coaching',\n            'Briefing Subscription',\n            'OKR Executive Alignment Set',\n            'Align',\n            'Group Coaching',\n            'Manager Accelerator Hybrid'\n        )\n        and zrpc.chargetype = 'Recurring'\n)\n\nselect * from billing_plan_except_transform\nunion all\nselect * from transform_billing_plans", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bi_billing_plans\""}, "model.main.engagement_customers": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n{% set pref_sfdc = \"sfdc\" %}\n\nwith engage_only_customers as (\n    select \n        ea.zuora_acc_id as emplify_id,\n        ea.name,\n        ea.crmid as sfdc_id,\n        ea.zuora_acc_id\n    from {{ ref('engagement_accounts') }} ea\n    left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(ea.crmid, 15)\n)\n\nselect * from engage_only_customers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.engagement_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "engagement", "engagement_customers"], "unique_id": "model.main.engagement_customers", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "engagement/engagement_customers.sql", "original_file_path": "models/engagement/engagement_customers.sql", "name": "engagement_customers", "alias": "engagement_customers", "checksum": {"name": "sha256", "checksum": "c5e6c8de96aa43e42dc9e80ec68e9a7174aa219204ba7403a1697cc07f963086"}, "tags": [], "refs": [["engagement_accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/engagement/engagement_customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5768113, "compiled_sql": "\n\n\n\nwith engage_only_customers as (\n    select \n        ea.zuora_acc_id as emplify_id,\n        ea.name,\n        ea.crmid as sfdc_id,\n        ea.zuora_acc_id\n    from \"snowdb\".\"analytics\".\"engagement_accounts\" ea\n    left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(ea.crmid, 15)\n)\n\nselect * from engage_only_customers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"engagement_customers\""}, "model.main.engagement_accounts": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith accounts_from_zuora as (\n    select id as zuora_acc_id, name, crmid, x15five_com_company_id__c\n    from zuora.account\n    where parentzuoraaccountid__c is null\n),\n\nengagement_accounts as (\n    select afz.*\n    from accounts_from_zuora afz\n    join {{ ref('bi_billing_plans') }} bp on bp.zuora_acc_id = afz.zuora_acc_id and bp.product_name = 'Engage' \n),\n\nengagement_only_accounts as (\n    select ea.*\n    from engagement_accounts ea\n    -- Engage + Transform combination is not included in transform_customers.sql model\n    left join {{ ref('bi_billing_plans') }} bp on bp.zuora_acc_id = ea.zuora_acc_id and bp.product_name not in ('Engage', 'Transform')\n    -- some of the account are already in 15Five db and in customer table so we would exclude them here to avoid duplicates\n    left join pg.ff_zuoraaccount ffz on ea.zuora_acc_id = ffz.account_id\n    where bp.product_name is null\n    and ffz.id is null\n)\n\nselect distinct * from engagement_only_accounts", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.bi_billing_plans", "model.main.bi_billing_plans"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "engagement", "engagement_accounts"], "unique_id": "model.main.engagement_accounts", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "engagement/engagement_accounts.sql", "original_file_path": "models/engagement/engagement_accounts.sql", "name": "engagement_accounts", "alias": "engagement_accounts", "checksum": {"name": "sha256", "checksum": "d3f53f014f64ac97a14ec154d42854ebfc6e3479efe7e25121a2c9839862c8a1"}, "tags": [], "refs": [["bi_billing_plans"], ["bi_billing_plans"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/engagement/engagement_accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5805414, "compiled_sql": "\n\nwith accounts_from_zuora as (\n    select id as zuora_acc_id, name, crmid, x15five_com_company_id__c\n    from zuora.account\n    where parentzuoraaccountid__c is null\n),\n\nengagement_accounts as (\n    select afz.*\n    from accounts_from_zuora afz\n    join \"snowdb\".\"analytics\".\"bi_billing_plans\" bp on bp.zuora_acc_id = afz.zuora_acc_id and bp.product_name = 'Engage' \n),\n\nengagement_only_accounts as (\n    select ea.*\n    from engagement_accounts ea\n    -- Engage + Transform combination is not included in transform_customers.sql model\n    left join \"snowdb\".\"analytics\".\"bi_billing_plans\" bp on bp.zuora_acc_id = ea.zuora_acc_id and bp.product_name not in ('Engage', 'Transform')\n    -- some of the account are already in 15Five db and in customer table so we would exclude them here to avoid duplicates\n    left join pg.ff_zuoraaccount ffz on ea.zuora_acc_id = ffz.account_id\n    where bp.product_name is null\n    and ffz.id is null\n)\n\nselect distinct * from engagement_only_accounts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"engagement_accounts\""}, "model.main.organizations": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n{% set pref_sfdc = \"sfdc\" %}\n\nwith engagement_only_customers as (\n    select\n        org.id as emplify_id,\n        org.name as name,\n        -- SFDC Account, Opportunity object\n        sfdc.id                                  as {{pref_sfdc}}_id,\n        sfdc.industry                            as {{pref_sfdc}}_industry,\n        sfdc.billingcountrycode                  as {{pref_sfdc}}_billingcountrycode,\n        opp.main_deal_driver__c                  as {{pref_sfdc}}_opp_main_deal_driver__c,\n        sfdc.annualrevenue                       as {{pref_sfdc}}_annualrevenue,\n        sfdc.type                                as {{pref_sfdc}}_type,\n        sfdc.accountsource                       as {{pref_sfdc}}_accountsource,\n        sfdc.numberofemployees                   as {{pref_sfdc}}_numberofemployees,\n        sfdc.django_number_of_users_purchased__c as {{pref_sfdc}}_django_number_of_users_purchased__c,\n        sfdc.company_segment__c                  as {{pref_sfdc}}_company_segment__c,\n        opp.ownerid                              as {{pref_sfdc}}_opp_ownerid,\n        sfdc.csm_owner_name__c                   as {{pref_sfdc}}_csm_owner_name__c,\n        sfdc.ownerid                             as {{pref_sfdc}}_ownerid,\n        sfdc.account_status__c                   as {{pref_sfdc}}_account_status__c,\n        sfdc.arr_zuora__c                        as {{pref_sfdc}}_arr__c,\n        opp.acv__c                               as {{pref_sfdc}}_opp_acv__c,\n        opp.arr_from_tcv__c                      as {{pref_sfdc}}_opp_arr_from_tcv__c\n    from engage.organizations org\n    join ext.sfdc_account sfdc\n    on left(org.salesforce_id, 15) in (left(sfdc.emplifyaccountid__c, 15), left(sfdc.id, 15))\n    left join (\n        -- get only the latest record (by lastmodifieddate)\n        select *,\n                row_number() over (partition by accountid order by lastmodifieddate desc) as row_n\n        from ext.sfdc_opportunity\n    ) opp ON opp.accountid = sfdc.id and opp.row_n = 1\n\n    where True\n    and ff_company_id is null\n    and not is_test\n    and not is_demo\n    and deleted_at is null\n    and salesforce_id like '00%'\n    and sfdc.x15five_com_company_id__c is null\n)\n\nselect * from engagement_only_customers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "engagement", "organizations"], "unique_id": "model.main.organizations", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "engagement/organizations.sql", "original_file_path": "models/engagement/organizations.sql", "name": "organizations", "alias": "organizations", "checksum": {"name": "sha256", "checksum": "6478476147bbd7cf1b1ece1f25ab0b2a8c2e6ae2c5c631c466b843665b02a516"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/engagement/organizations.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.582981, "compiled_sql": "\n\n\nwith engagement_only_customers as (\n    select\n        org.id as emplify_id,\n        org.name as name,\n        -- SFDC Account, Opportunity object\n        sfdc.id                                  as sfdc_id,\n        sfdc.industry                            as sfdc_industry,\n        sfdc.billingcountrycode                  as sfdc_billingcountrycode,\n        opp.main_deal_driver__c                  as sfdc_opp_main_deal_driver__c,\n        sfdc.annualrevenue                       as sfdc_annualrevenue,\n        sfdc.type                                as sfdc_type,\n        sfdc.accountsource                       as sfdc_accountsource,\n        sfdc.numberofemployees                   as sfdc_numberofemployees,\n        sfdc.django_number_of_users_purchased__c as sfdc_django_number_of_users_purchased__c,\n        sfdc.company_segment__c                  as sfdc_company_segment__c,\n        opp.ownerid                              as sfdc_opp_ownerid,\n        sfdc.csm_owner_name__c                   as sfdc_csm_owner_name__c,\n        sfdc.ownerid                             as sfdc_ownerid,\n        sfdc.account_status__c                   as sfdc_account_status__c,\n        sfdc.arr_zuora__c                        as sfdc_arr__c,\n        opp.acv__c                               as sfdc_opp_acv__c,\n        opp.arr_from_tcv__c                      as sfdc_opp_arr_from_tcv__c\n    from engage.organizations org\n    join ext.sfdc_account sfdc\n    on left(org.salesforce_id, 15) in (left(sfdc.emplifyaccountid__c, 15), left(sfdc.id, 15))\n    left join (\n        -- get only the latest record (by lastmodifieddate)\n        select *,\n                row_number() over (partition by accountid order by lastmodifieddate desc) as row_n\n        from ext.sfdc_opportunity\n    ) opp ON opp.accountid = sfdc.id and opp.row_n = 1\n\n    where True\n    and ff_company_id is null\n    and not is_test\n    and not is_demo\n    and deleted_at is null\n    and salesforce_id like '00%'\n    and sfdc.x15five_com_company_id__c is null\n)\n\nselect * from engagement_only_customers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"organizations\""}, "model.main.sfdc_company_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_sfdc as (\n    select\n        concat('c100/', id) as id,\n        *\n    from pg.salesforce_salesforcecompanyaccount\n    where company_id not in {{ var(\"ext_cloud_id_list\") }}\n),\n\nc101_sfdc as (\n    select\n        concat('c101/', id) as id,\n        *\n    from c101.salesforce_salesforcecompanyaccount\n    where company_id = 34572\n),\n\nc102_sfdc as (\n    select\n        concat('c102/', id) as id,\n        *\n    from c102.salesforce_salesforcecompanyaccount\n    where company_id = 55006\n),\n\nc103_sfdc as (\n    select\n        concat('c103/', id) as id,\n        *\n    from c103.salesforce_salesforcecompanyaccount\n    where company_id = 58539\n)\n\nselect * from (\n    select * from c100_sfdc\n    union all\n    select * from c101_sfdc\n    union all\n    select * from c102_sfdc\n    union all\n    select * from c103_sfdc\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "sfdc_company_comb"], "unique_id": "model.main.sfdc_company_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/sfdc_company_comb.sql", "original_file_path": "models/cloud_comb/sfdc_company_comb.sql", "name": "sfdc_company_comb", "alias": "sfdc_company_comb", "checksum": {"name": "sha256", "checksum": "b4c5d927210ba478313cfe585fa0f66063272eb6a7f9a6ad81a8cd2b37438223"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/sfdc_company_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5872314, "compiled_sql": "\n\nwith c100_sfdc as (\n    select\n        concat('c100/', id) as id,\n        *\n    from pg.salesforce_salesforcecompanyaccount\n    where company_id not in ('34572', '55006', '58539')\n),\n\nc101_sfdc as (\n    select\n        concat('c101/', id) as id,\n        *\n    from c101.salesforce_salesforcecompanyaccount\n    where company_id = 34572\n),\n\nc102_sfdc as (\n    select\n        concat('c102/', id) as id,\n        *\n    from c102.salesforce_salesforcecompanyaccount\n    where company_id = 55006\n),\n\nc103_sfdc as (\n    select\n        concat('c103/', id) as id,\n        *\n    from c103.salesforce_salesforcecompanyaccount\n    where company_id = 58539\n)\n\nselect * from (\n    select * from c100_sfdc\n    union all\n    select * from c101_sfdc\n    union all\n    select * from c102_sfdc\n    union all\n    select * from c103_sfdc\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"sfdc_company_comb\""}, "model.main.stats_point_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_stats as (\n    select\n        concat('c100/', id) as cid,\n        *\n    from pg.stats_point\n    where company_id not in {{ var(\"ext_cloud_id_list\") }}\n),\n\nc101_stats as (\n    select\n        concat('c101/', id) as cid,\n        *\n    from c101.stats_point\n    where company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_stats as (\n    select\n        concat('c102/', id) as cid,\n        *\n    from c102.stats_point\n    where company_id = {{ var(\"c102_customer_id\") }}\n),\n\nc103_stats as (\n    select\n        concat('c103/', id) as cid,\n        *\n    from c103.stats_point\n    where company_id = {{ var(\"c103_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_stats\n    union all\n    select * from c101_stats\n    union all\n    select * from c102_stats\n    union all\n    select * from c103_stats\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "stats_point_comb"], "unique_id": "model.main.stats_point_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/stats_point_comb.sql", "original_file_path": "models/cloud_comb/stats_point_comb.sql", "name": "stats_point_comb", "alias": "stats_point_comb", "checksum": {"name": "sha256", "checksum": "6baa95d4864f20b37ecc8e50d89b0ac2201d15ed9d5f366901d62ed8490a7a04"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/stats_point_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5903084, "compiled_sql": "\n\nwith c100_stats as (\n    select\n        concat('c100/', id) as cid,\n        *\n    from pg.stats_point\n    where company_id not in ('34572', '55006', '58539')\n),\n\nc101_stats as (\n    select\n        concat('c101/', id) as cid,\n        *\n    from c101.stats_point\n    where company_id = 34572\n),\n\nc102_stats as (\n    select\n        concat('c102/', id) as cid,\n        *\n    from c102.stats_point\n    where company_id = 55006\n),\n\nc103_stats as (\n    select\n        concat('c103/', id) as cid,\n        *\n    from c103.stats_point\n    where company_id = 58539\n)\n\nselect * from (\n    select * from c100_stats\n    union all\n    select * from c101_stats\n    union all\n    select * from c102_stats\n    union all\n    select * from c103_stats\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"stats_point_comb\""}, "model.main.ooo_report_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_ooo_report as (\n    select\n        concat('c100/', ooo_r.id) as cid,\n        concat('c100/', ooo_r.user_id) as c_user_id,\n        ooo_r.*\n    from pg.x_one_on_one_reports_oneononeintermediatemodel ooo_r \n    where company_id not in {{ var(\"ext_cloud_id_list\") }}\n),\n\nc101_ooo_report as (\n    select\n        concat('c101/', ooo_r.id) as cid,\n        concat('c101/', ooo_r.user_id) as c_user_id,\n        ooo_r.*\n    from c101.x_one_on_one_reports_oneononeintermediatemodel ooo_r\n    where company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_ooo_report as (\n    select\n        concat('c102/', ooo_r.id) as cid,\n        concat('c102/', ooo_r.user_id) as c_user_id,\n        ooo_r.*\n    from c102.x_one_on_one_reports_oneononeintermediatemodel ooo_r\n    where company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_ooo_report\n    union all\n    select * from c101_ooo_report\n    union all\n    select * from c102_ooo_report\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "ooo_report_comb"], "unique_id": "model.main.ooo_report_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/ooo_report_comb.sql", "original_file_path": "models/cloud_comb/ooo_report_comb.sql", "name": "ooo_report_comb", "alias": "ooo_report_comb", "checksum": {"name": "sha256", "checksum": "8e878812d4790056e1bb4f7eb4f188d72e0b806217ee3ac81ee03461e3b5c48d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/ooo_report_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.5937166, "compiled_sql": "\n\nwith c100_ooo_report as (\n    select\n        concat('c100/', ooo_r.id) as cid,\n        concat('c100/', ooo_r.user_id) as c_user_id,\n        ooo_r.*\n    from pg.x_one_on_one_reports_oneononeintermediatemodel ooo_r \n    where company_id not in ('34572', '55006', '58539')\n),\n\nc101_ooo_report as (\n    select\n        concat('c101/', ooo_r.id) as cid,\n        concat('c101/', ooo_r.user_id) as c_user_id,\n        ooo_r.*\n    from c101.x_one_on_one_reports_oneononeintermediatemodel ooo_r\n    where company_id = 34572\n),\n\nc102_ooo_report as (\n    select\n        concat('c102/', ooo_r.id) as cid,\n        concat('c102/', ooo_r.user_id) as c_user_id,\n        ooo_r.*\n    from c102.x_one_on_one_reports_oneononeintermediatemodel ooo_r\n    where company_id = 55006\n)\n\nselect * from (\n    select * from c100_ooo_report\n    union all\n    select * from c101_ooo_report\n    union all\n    select * from c102_ooo_report\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"ooo_report_comb\""}, "model.main.x_comment_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_x_comment as (\n    select\n        concat('c100/', user_id) as cuid,\n        xcd.*\n    from pg.x_comments_user_day xcd \n    join pg.ff_user u on u.id = xcd.user_id\n    where u.company_id not in {{ var(\"ext_cloud_id_list\") }}\n),\n\nc101_x_comment as (\n    select\n        concat('c101/', user_id) as cuid,\n        xcd.*\n    from c101.x_comments_user_day xcd\n    join c101.ff_user u on u.id = xcd.user_id\n    where u.company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_x_comment as (\n    select\n        concat('c102/', user_id) as cuid,\n        xcd.*\n    from c102.x_comments_user_day xcd\n    join c102.ff_user u on u.id = xcd.user_id\n    where u.company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from (\n    select * from c100_x_comment\n    union all\n    select * from c101_x_comment\n    union all\n    select * from c102_x_comment\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "x_comment_comb"], "unique_id": "model.main.x_comment_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/x_comment_comb.sql", "original_file_path": "models/cloud_comb/x_comment_comb.sql", "name": "x_comment_comb", "alias": "x_comment_comb", "checksum": {"name": "sha256", "checksum": "b007015340d96f5a25fefd376f33de2cc8e00de2d23e9531bf1bd34fa44c7e6b"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/x_comment_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.597031, "compiled_sql": "\n\nwith c100_x_comment as (\n    select\n        concat('c100/', user_id) as cuid,\n        xcd.*\n    from pg.x_comments_user_day xcd \n    join pg.ff_user u on u.id = xcd.user_id\n    where u.company_id not in ('34572', '55006', '58539')\n),\n\nc101_x_comment as (\n    select\n        concat('c101/', user_id) as cuid,\n        xcd.*\n    from c101.x_comments_user_day xcd\n    join c101.ff_user u on u.id = xcd.user_id\n    where u.company_id = 34572\n),\n\nc102_x_comment as (\n    select\n        concat('c102/', user_id) as cuid,\n        xcd.*\n    from c102.x_comments_user_day xcd\n    join c102.ff_user u on u.id = xcd.user_id\n    where u.company_id = 55006\n)\n\nselect * from (\n    select * from c100_x_comment\n    union all\n    select * from c101_x_comment\n    union all\n    select * from c102_x_comment\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"x_comment_comb\""}, "model.main.company_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_companies as (\n    select\n        null as emplify_id,\n        null as transform_id,\n        {{ \n            custom_star(\n                source('pg', 'company'),\n                select_nulls_as_columns=False\n            )\n        }}\n    from pg.company\n    where id != 34572\n),\n\nc101_companies as (\n    select\n        null as emplify_id,\n        null as transform_id,\n        {{ \n            custom_star(\n                source('pg', 'company'),\n                select_nulls_as_columns=False\n            )\n        }}\n    from c101.company\n    where id = 34572\n),\n\nengage_companies as (\n    select\n        emplify_id,\n        null as transform_id,\n        {{ \n            custom_star(\n                source('pg', 'company'),\n                select_nulls_as_columns=True,\n                skip_nulling_for=[\"name\", \"sfdc_id\", \"zuora_acc_id\"]\n            )\n        }}\n    from {{ ref('engagement_customers') }}\n),\n\ntransform_companies as (\n    select\n        null as emplify_id,\n        transform_id,\n        {{ \n            custom_star(\n                source('pg', 'company'),\n                select_nulls_as_columns=True,\n                skip_nulling_for=[\"name\", \"sfdc_id\", \"zuora_acc_id\"]\n            )\n        }}\n    from {{ ref('transform_customers')  }}\n)\n\nselect * from c100_companies\nunion all\nselect * from c101_companies\nunion all\nselect * from engage_companies\nunion all\nselect * from transform_companies", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.main.custom_star"], "nodes": ["source.main.pg.company", "source.main.pg.company", "source.main.pg.company", "source.main.pg.company", "model.main.engagement_customers", "model.main.transform_customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "company_comb"], "unique_id": "model.main.company_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/company_comb.sql", "original_file_path": "models/cloud_comb/company_comb.sql", "name": "company_comb", "alias": "company_comb", "checksum": {"name": "sha256", "checksum": "6fdbd40c65d8be401b9a39d60b1cb2a881dfa083c8ff8c3bc1daa8f784ab7b0c"}, "tags": [], "refs": [["engagement_customers"], ["transform_customers"]], "sources": [["pg", "company"], ["pg", "company"], ["pg", "company"], ["pg", "company"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/company_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6009521, "compiled_sql": "\n\nwith c100_companies as (\n    select\n        null as emplify_id,\n        null as transform_id,\n        \"id\",\n  \"name\",\n  \"users_count\",\n  \"client_success_manager\",\n  \"create_ts\",\n  \"checkins_company_reporting_period\",\n  \"is_active\",\n  \"is_paying\",\n  \"is_in_analytics\",\n  \"global_id\",\n  \"feature_objectives_enabled\",\n  \"feature_bamboohr_active\",\n  \"feature_career_growth_enabled\",\n  \"feature_career_ladders_enabled\",\n  \"mrr_in_cents\",\n  \"minimum_billable_user_count\",\n  \"billing_plan_name\",\n  \"billing_plan_id\",\n  \"settings_hf_values_cnt\",\n  \"sfdc_id\",\n  \"zuora_acc_id\"\n    from pg.company\n    where id != 34572\n),\n\nc101_companies as (\n    select\n        null as emplify_id,\n        null as transform_id,\n        \"id\",\n  \"name\",\n  \"users_count\",\n  \"client_success_manager\",\n  \"create_ts\",\n  \"checkins_company_reporting_period\",\n  \"is_active\",\n  \"is_paying\",\n  \"is_in_analytics\",\n  \"global_id\",\n  \"feature_objectives_enabled\",\n  \"feature_bamboohr_active\",\n  \"feature_career_growth_enabled\",\n  \"feature_career_ladders_enabled\",\n  \"mrr_in_cents\",\n  \"minimum_billable_user_count\",\n  \"billing_plan_name\",\n  \"billing_plan_id\",\n  \"settings_hf_values_cnt\",\n  \"sfdc_id\",\n  \"zuora_acc_id\"\n    from c101.company\n    where id = 34572\n),\n\nengage_companies as (\n    select\n        emplify_id,\n        null as transform_id,\n        null as \"id\",\n  \"name\",\n  null as \"users_count\",\n  null as \"client_success_manager\",\n  null as \"create_ts\",\n  null as \"checkins_company_reporting_period\",\n  null as \"is_active\",\n  null as \"is_paying\",\n  null as \"is_in_analytics\",\n  null as \"global_id\",\n  null as \"feature_objectives_enabled\",\n  null as \"feature_bamboohr_active\",\n  null as \"feature_career_growth_enabled\",\n  null as \"feature_career_ladders_enabled\",\n  null as \"mrr_in_cents\",\n  null as \"minimum_billable_user_count\",\n  null as \"billing_plan_name\",\n  null as \"billing_plan_id\",\n  null as \"settings_hf_values_cnt\",\n  \"sfdc_id\",\n  \"zuora_acc_id\"\n    from \"snowdb\".\"analytics\".\"engagement_customers\"\n),\n\ntransform_companies as (\n    select\n        null as emplify_id,\n        transform_id,\n        null as \"id\",\n  \"name\",\n  null as \"users_count\",\n  null as \"client_success_manager\",\n  null as \"create_ts\",\n  null as \"checkins_company_reporting_period\",\n  null as \"is_active\",\n  null as \"is_paying\",\n  null as \"is_in_analytics\",\n  null as \"global_id\",\n  null as \"feature_objectives_enabled\",\n  null as \"feature_bamboohr_active\",\n  null as \"feature_career_growth_enabled\",\n  null as \"feature_career_ladders_enabled\",\n  null as \"mrr_in_cents\",\n  null as \"minimum_billable_user_count\",\n  null as \"billing_plan_name\",\n  null as \"billing_plan_id\",\n  null as \"settings_hf_values_cnt\",\n  \"sfdc_id\",\n  \"zuora_acc_id\"\n    from \"snowdb\".\"analytics\".\"transform_customers\"\n)\n\nselect * from c100_companies\nunion all\nselect * from c101_companies\nunion all\nselect * from engage_companies\nunion all\nselect * from transform_companies", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"company_comb\""}, "model.main.user_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_users as (\n    select\n        concat('c100/', id) as cloud_id,\n        *\n    from pg.ff_user\n    where company_id not in ({{ var(\"c101_customer_id\") }}, {{ var(\"c102_customer_id\") }})\n),\n\n\nc101_users as (\n    select\n        concat('c101/', id) as cloud_id,\n        *\n    from c101.ff_user\n    where company_id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_users as (\n    select\n        concat('c102/', id) as cloud_id,\n        *\n    from c102.ff_user\n    where company_id = {{ var(\"c102_customer_id\") }}\n)\n\nselect * from c100_users\nunion all\nselect * from c101_users\nunion all\nselect * from c102_users", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "user_comb"], "unique_id": "model.main.user_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/user_comb.sql", "original_file_path": "models/cloud_comb/user_comb.sql", "name": "user_comb", "alias": "user_comb", "checksum": {"name": "sha256", "checksum": "0e7bfd71aa49fb74254ee91d6e11348b3667e9b7915fa38ceacb0869ef7030d7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/user_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6153052, "compiled_sql": "\n\nwith c100_users as (\n    select\n        concat('c100/', id) as cloud_id,\n        *\n    from pg.ff_user\n    where company_id not in (34572, 55006)\n),\n\n\nc101_users as (\n    select\n        concat('c101/', id) as cloud_id,\n        *\n    from c101.ff_user\n    where company_id = 34572\n),\n\nc102_users as (\n    select\n        concat('c102/', id) as cloud_id,\n        *\n    from c102.ff_user\n    where company_id = 55006\n)\n\nselect * from c100_users\nunion all\nselect * from c101_users\nunion all\nselect * from c102_users", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"user_comb\""}, "model.main.ff_company_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_ff_companies as (\n    select *\n    from pg.ff_company\n    where id not in ({{ var(\"c101_customer_id\") }}, {{ var(\"c102_customer_id\") }})\n),\n\nc101_ff_companies as (\n    select *\n    from c101.ff_company\n    where id = {{ var(\"c101_customer_id\") }}\n),\n\nc102_ff_companies as (\n    select *\n    from c102.ff_company\n    where id = {{ var(\"c102_customer_id\") }}\n)\nselect * from c100_ff_companies\nunion all\nselect * from c101_ff_companies\nunion all\nselect * from c102_ff_companies", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "ff_company_comb"], "unique_id": "model.main.ff_company_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/ff_company_comb.sql", "original_file_path": "models/cloud_comb/ff_company_comb.sql", "name": "ff_company_comb", "alias": "ff_company_comb", "checksum": {"name": "sha256", "checksum": "fc0eb66108ddf257ea485731e0e4323c2ee535cbcdc9576cd314a80e7da824be"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/ff_company_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6187685, "compiled_sql": "\n\nwith c100_ff_companies as (\n    select *\n    from pg.ff_company\n    where id not in (34572, 55006)\n),\n\nc101_ff_companies as (\n    select *\n    from c101.ff_company\n    where id = 34572\n),\n\nc102_ff_companies as (\n    select *\n    from c102.ff_company\n    where id = 55006\n)\nselect * from c100_ff_companies\nunion all\nselect * from c101_ff_companies\nunion all\nselect * from c102_ff_companies", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"ff_company_comb\""}, "model.main.cycle_comb": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c100_reviews as (\n    select\n        concat('c100/', id) as cloud_id,\n        *\n    from pg.reviews_cycle\n),\n\n\nc101_reviews as (\n    select\n        concat('c101/', id) as cloud_id,\n        *\n    from c101.reviews_cycle\n    where company_id = 34572\n),\n\nc102_reviews as (\n    select\n        concat('c102/', id) as cloud_id,\n        *\n    from c102.reviews_cycle\n    where company_id = 55006\n)\n\nselect * from (\n    select * from c100_reviews\n    union all\n    select * from c101_reviews\n    union all\n    select * from c102_reviews\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "cloud_comb", "cycle_comb"], "unique_id": "model.main.cycle_comb", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "cloud_comb/cycle_comb.sql", "original_file_path": "models/cloud_comb/cycle_comb.sql", "name": "cycle_comb", "alias": "cycle_comb", "checksum": {"name": "sha256", "checksum": "c3cf20f9c5c1bda1596ea1d83d0c6435f91eaac9f60c2f01c92bc3367dbb73a1"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/cloud_comb/cycle_comb.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6221771, "compiled_sql": "\n\nwith c100_reviews as (\n    select\n        concat('c100/', id) as cloud_id,\n        *\n    from pg.reviews_cycle\n),\n\n\nc101_reviews as (\n    select\n        concat('c101/', id) as cloud_id,\n        *\n    from c101.reviews_cycle\n    where company_id = 34572\n),\n\nc102_reviews as (\n    select\n        concat('c102/', id) as cloud_id,\n        *\n    from c102.reviews_cycle\n    where company_id = 55006\n)\n\nselect * from (\n    select * from c100_reviews\n    union all\n    select * from c101_reviews\n    union all\n    select * from c102_reviews\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"cycle_comb\""}, "model.main.churnzero_pipeline": {"raw_sql": "select\n    cz.account_external_id as cz_external_id,\n    c.seen_users_30d * 100.0 / nullif(c.users_count, 0) as users_active_30d_pct_raw,\n    CASE\n        WHEN users_active_30d_pct_raw > 100 THEN 100.0\n        ELSE users_active_30d_pct_raw\n    END as users_active_30d_pct,\n    c.days_seen30d_avg,\n    hm.engagement_survey_available as has_engage,\n    hm.bsr_available as has_bsr,\n    hm.checkin_available as has_checkin,\n    hm.transform_online_available as has_transform_online,\n    hm.transform_coaching_available as has_transform_coaching,\n    hm.highfives_available as has_highfives,\n    hm.okr_available as has_okr,\n    hm.one_on_one_available as has_one_on_ones,\n    hm.product_available_cnt,\n    hm.products_healthy_usage,\n    hm.percent_purchased_products_healthy as features_used_pct,\n    hm.checkin_active,\n    hm.highfives_active,\n    hm.one_on_one_active,\n    hm.bsr_active,\n    hm.okr_active,\n    hm.engagement_survey_active,\n    hm.transform_online_active,\n    hm.transform_coaching_active,\n    CASE\n        WHEN hm.percent_seats_not_created < 0 THEN 0\n        ELSE hm.percent_seats_not_created\n    END as percent_seats_not_created,\n    hm.percent_users_seen_transform_online_30d,\n    hm.transform_coaching_only,\n    hm.transform_online_only,\n    hm.transform_hybrid_only,\n    hm.last_completed_bsr_cycle,\n    hm.engage_only,\n    hm.engagement_survey_cnt,\n    hm.briefing_within_30d as has_briefing_within_30d,\n    hm.percent_entitlements_redeemed_paced,\n    hm.months_into_engage_entitlement_subscription,\n    hm.most_recent_emplify_score,\n    hm.emplify_score_difference,\n    hm.emplify_score_change_category,\n    hm.percent_engage_results_users_login_after_survey_ended,\n    hm.weekly_active_users,\n    hm.monthly_active_users,\n    hm.wau_mau,\n    hm.percent_reviewers_reviewed_checkins_28d,\n    hm.percent_users_created_highfives,\n    hm.percent_users_w_one_on_one,\n    hm.company_wide_cycle_cnt_365d,\n    hm.percent_users_engaged_okr_30d,\n    hm.percent_transform_coaching_participants_in_sessions_30d,\n    hm.transform_coaching_subscription_participants,\n    he.first_survey_created,\n    he.first_survey_start_date,\n    he.first_survey_scheduled,\n    he.days_from_purchase_without_survey_scheduled,\n    he.first_survey_status,\n    he.next_scheduled_survey_start,\n    he.current_survey_end_date,\n    he.last_survey_end_date,\n    he.days_since_last_survey_ended,\n    he.briefing_after_last_survey,\n    he.briefing_scheduled_after_current_survey,\n    he.briefing_scheduled_after_future_survey,\n    he.engage_admin,\n    he.engage_admin_email,\n    he.first_purchase_date\nfrom\n    {{ ref('health_metrics') }} hm -- all paying companies with a company_id associated plus 15five\n    LEFT JOIN {{ ref('customer') }} c on hm.company_id = c.id\n    JOIN pg.churnzero_churnzerocompanyassociation cz on hm.company_id = cz.company_id\n    LEFT JOIN {{ ref('health_engage') }} he on he.company_id = c.id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.health_metrics", "model.main.customer", "model.main.health_engage"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "pipelines", "churnzero_pipeline"], "unique_id": "model.main.churnzero_pipeline", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "pipelines/churnzero_pipeline.sql", "original_file_path": "models/pipelines/churnzero_pipeline.sql", "name": "churnzero_pipeline", "alias": "churnzero_pipeline", "checksum": {"name": "sha256", "checksum": "b54202f0930792dbb59b7806dc8dff967eef3f07a72db845686ac0e817e49db5"}, "tags": [], "refs": [["health_metrics"], ["customer"], ["health_engage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/pipelines/churnzero_pipeline.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6245625, "compiled_sql": "select\n    cz.account_external_id as cz_external_id,\n    c.seen_users_30d * 100.0 / nullif(c.users_count, 0) as users_active_30d_pct_raw,\n    CASE\n        WHEN users_active_30d_pct_raw > 100 THEN 100.0\n        ELSE users_active_30d_pct_raw\n    END as users_active_30d_pct,\n    c.days_seen30d_avg,\n    hm.engagement_survey_available as has_engage,\n    hm.bsr_available as has_bsr,\n    hm.checkin_available as has_checkin,\n    hm.transform_online_available as has_transform_online,\n    hm.transform_coaching_available as has_transform_coaching,\n    hm.highfives_available as has_highfives,\n    hm.okr_available as has_okr,\n    hm.one_on_one_available as has_one_on_ones,\n    hm.product_available_cnt,\n    hm.products_healthy_usage,\n    hm.percent_purchased_products_healthy as features_used_pct,\n    hm.checkin_active,\n    hm.highfives_active,\n    hm.one_on_one_active,\n    hm.bsr_active,\n    hm.okr_active,\n    hm.engagement_survey_active,\n    hm.transform_online_active,\n    hm.transform_coaching_active,\n    CASE\n        WHEN hm.percent_seats_not_created < 0 THEN 0\n        ELSE hm.percent_seats_not_created\n    END as percent_seats_not_created,\n    hm.percent_users_seen_transform_online_30d,\n    hm.transform_coaching_only,\n    hm.transform_online_only,\n    hm.transform_hybrid_only,\n    hm.last_completed_bsr_cycle,\n    hm.engage_only,\n    hm.engagement_survey_cnt,\n    hm.briefing_within_30d as has_briefing_within_30d,\n    hm.percent_entitlements_redeemed_paced,\n    hm.months_into_engage_entitlement_subscription,\n    hm.most_recent_emplify_score,\n    hm.emplify_score_difference,\n    hm.emplify_score_change_category,\n    hm.percent_engage_results_users_login_after_survey_ended,\n    hm.weekly_active_users,\n    hm.monthly_active_users,\n    hm.wau_mau,\n    hm.percent_reviewers_reviewed_checkins_28d,\n    hm.percent_users_created_highfives,\n    hm.percent_users_w_one_on_one,\n    hm.company_wide_cycle_cnt_365d,\n    hm.percent_users_engaged_okr_30d,\n    hm.percent_transform_coaching_participants_in_sessions_30d,\n    hm.transform_coaching_subscription_participants,\n    he.first_survey_created,\n    he.first_survey_start_date,\n    he.first_survey_scheduled,\n    he.days_from_purchase_without_survey_scheduled,\n    he.first_survey_status,\n    he.next_scheduled_survey_start,\n    he.current_survey_end_date,\n    he.last_survey_end_date,\n    he.days_since_last_survey_ended,\n    he.briefing_after_last_survey,\n    he.briefing_scheduled_after_current_survey,\n    he.briefing_scheduled_after_future_survey,\n    he.engage_admin,\n    he.engage_admin_email,\n    he.first_purchase_date\nfrom\n    \"snowdb\".\"analytics\".\"health_metrics\" hm -- all paying companies with a company_id associated plus 15five\n    LEFT JOIN \"snowdb\".\"analytics\".\"customer\" c on hm.company_id = c.id\n    JOIN pg.churnzero_churnzerocompanyassociation cz on hm.company_id = cz.company_id\n    LEFT JOIN \"snowdb\".\"analytics\".\"health_engage\" he on he.company_id = c.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"churnzero_pipeline\""}, "model.main.customer": {"raw_sql": "{{ config(materialized='table') }}\n\n{% set pref_sfdc = \"sfdc\" %}\n{% set pref_zuora = \"zuora\" %}\n\n\n\nwith source_data as (\n\n      select\n            c.id,\n            c.emplify_id as emplify_id,\n            c.transform_id as transform_id,\n            c.global_id,\n            c.name as name,\n            c.users_count,\n            c.client_success_manager,\n            c.create_ts,\n            -- explicitly set these flags for 10x VPC's\n            (CASE WHEN c.id IN {{ var(\"ext_cloud_id_list\") }} THEN true ELSE c.is_active END)\n                           as is_active,\n            CASE WHEN\n               c.id IN {{ var(\"ext_cloud_id_list\") }} THEN\n                  true\n            ELSE\n               CASE WHEN za.id is not null THEN\n                  COALESCE(mrr_record.current_mrr > 0, False)\n               ELSE\n                  null\n               END\n            END as is_paying,\n            c.is_in_analytics,\n\n         -- SFDC Account, Opportunity object\n            sfdc.id as {{pref_sfdc}}_id,\n            sfdc.industry as {{pref_sfdc}}_industry,\n            sfdc.billingcountrycode as {{pref_sfdc}}_billingcountrycode,\n            opp.main_deal_driver__c as {{pref_sfdc}}_opp_main_deal_driver__c,\n            sfdc.annualrevenue as {{pref_sfdc}}_annualrevenue,\n            sfdc.type as {{pref_sfdc}}_type,\n            sfdc.accountsource as {{pref_sfdc}}_accountsource,\n            sfdc.numberofemployees as {{pref_sfdc}}_numberofemployees,\n            sfdc.django_number_of_users_purchased__c as {{pref_sfdc}}_django_number_of_users_purchased__c,\n            sfdc.company_segment__c as {{pref_sfdc}}_company_segment__c,\n            opp.ownerid as {{pref_sfdc}}_opp_ownerid,\n            sfdc.csm_owner_name__c as {{pref_sfdc}}_csm_owner_name__c,\n            sfdc.account_status__c as {{pref_sfdc}}_account_status__c,\n            sfdc.arr_zuora__c as {{pref_sfdc}}_arr__c,\n            opp.acv__c as {{pref_sfdc}}_opp_acv__c,\n            opp.arr_from_tcv__c as {{pref_sfdc}}_opp_arr_from_tcv__c,\n\n         -- Zuora account\n            za.totalinvoicebalance                   as {{pref_zuora}}_totalinvoicebalance,\n            za.mrr                                   as {{pref_zuora}}_mrr,\n            za.autopay                               as {{pref_zuora}}_autopay,\n            za.customertype__c                       as {{pref_zuora}}_type,\n            za.id                                    as {{pref_zuora}}_acc_id,\n            za.revenuesegment__c                     as revenue_segment,\n            za.customersegment__c                    as customer_segment,\n\n         -- Zuora subscription\n            zs.id                                    as {{pref_zuora}}_subscription_id,\n            zs.quote_billingfrequency__c             as {{pref_zuora}}_quote_billingfrequency__c,\n            zs.contracteffectivedate                 as {{pref_zuora}}_contracteffectivedate,\n            zs.currentterm                           as {{pref_zuora}}_currentterm,\n            zs.termenddate                           as {{pref_zuora}}_termenddate,\n\n        -- Billing Plan\n            c.billing_plan_id,\n            c.billing_plan_name,\n\n         -- Customer age on the platform\n            DATEDIFF('day', c.create_ts, CURRENT_DATE) as customer_age_days,\n\n         -- Features\n            c.feature_objectives_enabled,\n            c.feature_bamboohr_active,\n            features.feature_bsr,\n            features.feature_careerhub,\n            features.feature_career_ladders,\n            features.feature_growth_plan,\n            features.feature_career_ladders_enabled_for_users,\n            features.feature_scim,\n            features.feature_namely,\n            features.feature_emplify,\n            features.feature_manager_accelerator,\n            features.feature_manager_accelerator_enabled,\n            features.feature_checkins_enabled,\n            c.settings_hf_values_cnt,\n\n         -- Customer activity stats\n            act.seen_users_1d,\n            act.seen_users_7d,\n            act.seen_users_30d,\n            act.days_seen30d_avg,\n            act.days_seen30d_median,\n\n         -- NPS\n            pendo_nps.pendo_avg_nps_30d,\n\n         -- Customers user seats changes (users_agg)\n            uagg.users_first_login_1d,\n            uagg.users_first_login_7d,\n            uagg.users_first_login_30d,\n            uagg.users_deactivated_1d,\n            uagg.users_deactivated_7d,\n            uagg.users_deactivated_30d,\n            uagg.users_reviewers_cnt,\n            uagg.users_reporters_cnt,\n            uagg.users_company_admin_cnt,\n\n         -- Service cloud cases\n            scase.cases_count_1d,\n            scase.cases_count_30d,\n            scase.cases_count_90d,\n\n         -- Checkins stats\n            c.checkins_company_reporting_period,\n            uagg.users_weekly_reporting_period_cnt,\n            uagg.users_biweekly_reporting_period_cnt,\n            uagg.users_monthly_reporting_period_cnt,\n            revrs_cnt.reviewer_count,\n\n         -- One on One stats\n            oo.ooo_cnt_30d,\n            oo.ooo_with_reviewer_cnt_30d,\n            oo.ooo_users_cnt_30d,\n            oo.ooo_tp_cnt_30d,\n            oo.ooo_tp_resolved_cnt_30d,\n            oo.ooo_ai_cnt_30d,\n            oo.ooo_ai_resolved_cnt_30d,\n            oo.ooo_avg_days_from_previous_1on1_30d,\n\n         -- HighFives given\n            hfga.highfives_given_all_time,\n            hfga.highfives_users_given_all_time,\n\n         -- total comments\n            tca.tc_cnt_1d,\n            tca.tc_unique_users_1d,\n            tca.tc_cnt_7d,\n            tca.tc_unique_users_7d,\n            tca.tc_cnt_30d,\n            tca.tc_unique_users_30d,\n\n         --  Objectives\n            obj.obj_created_30d,\n            obj.obj_created_users_30d,\n            obj.obj_created_90d,\n            obj.obj_created_users_90d,\n\n         --  Key results\n            kr.kr_created_30d,\n            kr.kr_created_users_30d,\n            kr.kr_created_90d,\n            kr.kr_created_users_90d,\n\n         -- BSR\n            bsrc.bsr_cycles_90d,\n            bsrc.bsr_cycles_users_90d,\n            bsrc.bsr_cycles_180d,\n            bsrc.bsr_cycles_users_180d,\n            bsrc.bsr_cycles_270d,\n            bsrc.bsr_cycles_users_270d,\n            bsrc.bsr_cycles_360d,\n            bsrc.bsr_cycles_users_360d,\n            bsrp.bsr_answers_90d,\n            bsrp.bsr_users_in_answers_90d,\n\n            bsrcs.calibration_sessions_180d,\n\n         -- BSKO\n            bsko.bsko_clicked_completed,\n            bsko.bsko_clicked_completed_users_cnt,\n            bsko.bsko_about_answers_cnt,\n            bsko.bsko_about_answers_users_cnt,\n            bsko.bsko_dmbw_answers_cnt,\n            bsko.bsko_dmbw_an_users_cnt,\n            bsko.bsko_gad_answers_cnt,\n            bsko.bsko_gad_answers_users_cnt,\n            bsko.bsko_preferences_answers_cnt,\n            bsko.bsko_preferences_answers_users_cnt,\n\n         -- Transform\n            transform_attrs.manager_accelerator_available_seats,\n            transform_attrs.manager_accelerator_active_seats,\n\n         -- internal\n            CURRENT_DATE     as _date_ts,\n            calendar.year    as _date_year,\n            calendar.month   as _date_month,\n            calendar.day     as _date_day,\n            calendar.quarter as _date_quarter,\n            calendar.week    as _date_week,\n            calendar.day_name as _date_day_name,\n            calendar.month_name as _date_month_name,\n            calendar.holiday_flag as _date_holiday_flag,\n            calendar.weekend_flag as _date_weekend_flag,\n\n         -- needs to increase when underlying data properties have changed\n            1.07           as _version\n\n    from {{ ref('company_comb') }} c\n    left join {{ ref('users_agg') }} uagg ON uagg.company_id = c.id\n    left join ext.sfdc_account sfdc ON left(sfdc.id, 15) = left(c.sfdc_id, 15)\n\n    left join (\n       -- get only the latest record (by lastmodifieddate)\n       select *,\n              row_number() over (partition by accountid order by lastmodifieddate desc) as row_n\n       from ext.sfdc_opportunity\n    ) opp ON opp.accountid = sfdc.id and opp.row_n = 1\n\n    left join (\n       -- in case of duplicates, get only the latest record (by updateddate)\n       select *,\n              row_number() over (partition by x15five_com_company_id__c, crmid order by updateddate desc) as row_n\n       from zuora.account\n    ) za ON za.id = c.zuora_acc_id and za.row_n = 1\n\n    left join (\n       -- in case of duplicates, get only the latest record (by updateddate)\n       select *,\n              row_number() over (partition by accountid order by updateddate desc) as row_n\n       from zuora.subscription\n       where status = 'Active'\n    ) zs ON zs.accountid = za.id and zs.row_n = 1\n    left join {{ ref('bi_mrr_monthly')}}          mrr_record ON mrr_record.zuora_acc_id = za.id and mrr_record.dt = CURRENT_DATE - interval '1 day'\n    left join {{ ref('sfdc_case_agg') }}           scase     ON scase.company_id = c.id\n    left join {{ ref('pendo_nps_agg') }}           pendo_nps ON pendo_nps.company_id = c.id\n    left join {{ ref('activity_agg') }}                  act ON act.company_id = c.id\n    left join {{ ref('checkins_reviewers_agg') }}  revrs_cnt ON revrs_cnt.company_id = c.id\n    left join {{ ref('highfives_given_alltime_agg') }}  hfga ON hfga.company_id = c.id\n    left join {{ ref('one_on_one_agg') }}                 oo ON oo.company_id = c.id\n    left join {{ ref('objectives_agg') }}                obj ON obj.company_id = c.id\n    left join {{ ref('key_results_agg') }}                kr ON kr.company_id = c.id\n    left join {{ ref('bsr_cycles_agg') }}               bsrc ON bsrc.company_id = c.id\n    left join {{ ref('bsr_participants_agg') }}         bsrp ON bsrp.company_id = c.id\n    left join pg.x_calibrationsession_agg              bsrcs ON bsrcs.company_id = c.id\n    left join {{ ref('bsko_agg') }}                     bsko ON bsko.company_id = c.id\n    left join {{ ref('total_comments_agg') }}            tca ON tca.company_id = c.id\n    left join {{ ref('enabled_features_agg') }}     features ON features.company_id = c.id\n    left join {{ ref('transform_agg') }}     transform_attrs ON transform_attrs.company_id = c.id\n    left join const.dim_calendar                    calendar ON calendar.date = CURRENT_DATE\n\n    where\n      c.is_in_analytics\n      or c.id in {{ var(\"ext_cloud_id_list\") }}\n      or c.emplify_id is not null\n      or c.transform_id is not null\n)\n\nselect *\nfrom source_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.company_comb", "model.main.users_agg", "model.main.bi_mrr_monthly", "model.main.sfdc_case_agg", "model.main.pendo_nps_agg", "model.main.activity_agg", "model.main.checkins_reviewers_agg", "model.main.highfives_given_alltime_agg", "model.main.one_on_one_agg", "model.main.objectives_agg", "model.main.key_results_agg", "model.main.bsr_cycles_agg", "model.main.bsr_participants_agg", "model.main.bsko_agg", "model.main.total_comments_agg", "model.main.enabled_features_agg", "model.main.transform_agg"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "customer"], "unique_id": "model.main.customer", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/customer.sql", "original_file_path": "models/customer/customer.sql", "name": "customer", "alias": "customer", "checksum": {"name": "sha256", "checksum": "d1207ae5d030dd1b5d4ebeaa227820d4f7135b15197f62e5bbc13ab58a0ade2a"}, "tags": [], "refs": [["company_comb"], ["users_agg"], ["bi_mrr_monthly"], ["sfdc_case_agg"], ["pendo_nps_agg"], ["activity_agg"], ["checkins_reviewers_agg"], ["highfives_given_alltime_agg"], ["one_on_one_agg"], ["objectives_agg"], ["key_results_agg"], ["bsr_cycles_agg"], ["bsr_participants_agg"], ["bsko_agg"], ["total_comments_agg"], ["enabled_features_agg"], ["transform_agg"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/customer.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "table", "bind": false}, "created_at": 1669795234.6276069, "compiled_sql": "\n\n\n\n\n\n\nwith  __dbt__cte__checkins_reviewers_agg as (\n\nSELECT\n    u.company_id,\n    COUNT(DISTINCT u.id) as reviewer_count\nFROM\n    \"snowdb\".\"stage\".\"ff_user\" u\nWHERE\n    u.is_reviewer -- user is a reviewer\n    AND u.deactivate_ts IS NULL -- user is not deactivated\n    AND u.first_login_ts IS NOT NULL -- user has logged in at least once\nGROUP BY company_id\n),source_data as (\n\n      select\n            c.id,\n            c.emplify_id as emplify_id,\n            c.transform_id as transform_id,\n            c.global_id,\n            c.name as name,\n            c.users_count,\n            c.client_success_manager,\n            c.create_ts,\n            -- explicitly set these flags for 10x VPC's\n            (CASE WHEN c.id IN ('34572', '55006', '58539') THEN true ELSE c.is_active END)\n                           as is_active,\n            CASE WHEN\n               c.id IN ('34572', '55006', '58539') THEN\n                  true\n            ELSE\n               CASE WHEN za.id is not null THEN\n                  COALESCE(mrr_record.current_mrr > 0, False)\n               ELSE\n                  null\n               END\n            END as is_paying,\n            c.is_in_analytics,\n\n         -- SFDC Account, Opportunity object\n            sfdc.id as sfdc_id,\n            sfdc.industry as sfdc_industry,\n            sfdc.billingcountrycode as sfdc_billingcountrycode,\n            opp.main_deal_driver__c as sfdc_opp_main_deal_driver__c,\n            sfdc.annualrevenue as sfdc_annualrevenue,\n            sfdc.type as sfdc_type,\n            sfdc.accountsource as sfdc_accountsource,\n            sfdc.numberofemployees as sfdc_numberofemployees,\n            sfdc.django_number_of_users_purchased__c as sfdc_django_number_of_users_purchased__c,\n            sfdc.company_segment__c as sfdc_company_segment__c,\n            opp.ownerid as sfdc_opp_ownerid,\n            sfdc.csm_owner_name__c as sfdc_csm_owner_name__c,\n            sfdc.account_status__c as sfdc_account_status__c,\n            sfdc.arr_zuora__c as sfdc_arr__c,\n            opp.acv__c as sfdc_opp_acv__c,\n            opp.arr_from_tcv__c as sfdc_opp_arr_from_tcv__c,\n\n         -- Zuora account\n            za.totalinvoicebalance                   as zuora_totalinvoicebalance,\n            za.mrr                                   as zuora_mrr,\n            za.autopay                               as zuora_autopay,\n            za.customertype__c                       as zuora_type,\n            za.id                                    as zuora_acc_id,\n            za.revenuesegment__c                     as revenue_segment,\n            za.customersegment__c                    as customer_segment,\n\n         -- Zuora subscription\n            zs.id                                    as zuora_subscription_id,\n            zs.quote_billingfrequency__c             as zuora_quote_billingfrequency__c,\n            zs.contracteffectivedate                 as zuora_contracteffectivedate,\n            zs.currentterm                           as zuora_currentterm,\n            zs.termenddate                           as zuora_termenddate,\n\n        -- Billing Plan\n            c.billing_plan_id,\n            c.billing_plan_name,\n\n         -- Customer age on the platform\n            DATEDIFF('day', c.create_ts, CURRENT_DATE) as customer_age_days,\n\n         -- Features\n            c.feature_objectives_enabled,\n            c.feature_bamboohr_active,\n            features.feature_bsr,\n            features.feature_careerhub,\n            features.feature_career_ladders,\n            features.feature_growth_plan,\n            features.feature_career_ladders_enabled_for_users,\n            features.feature_scim,\n            features.feature_namely,\n            features.feature_emplify,\n            features.feature_manager_accelerator,\n            features.feature_manager_accelerator_enabled,\n            features.feature_checkins_enabled,\n            c.settings_hf_values_cnt,\n\n         -- Customer activity stats\n            act.seen_users_1d,\n            act.seen_users_7d,\n            act.seen_users_30d,\n            act.days_seen30d_avg,\n            act.days_seen30d_median,\n\n         -- NPS\n            pendo_nps.pendo_avg_nps_30d,\n\n         -- Customers user seats changes (users_agg)\n            uagg.users_first_login_1d,\n            uagg.users_first_login_7d,\n            uagg.users_first_login_30d,\n            uagg.users_deactivated_1d,\n            uagg.users_deactivated_7d,\n            uagg.users_deactivated_30d,\n            uagg.users_reviewers_cnt,\n            uagg.users_reporters_cnt,\n            uagg.users_company_admin_cnt,\n\n         -- Service cloud cases\n            scase.cases_count_1d,\n            scase.cases_count_30d,\n            scase.cases_count_90d,\n\n         -- Checkins stats\n            c.checkins_company_reporting_period,\n            uagg.users_weekly_reporting_period_cnt,\n            uagg.users_biweekly_reporting_period_cnt,\n            uagg.users_monthly_reporting_period_cnt,\n            revrs_cnt.reviewer_count,\n\n         -- One on One stats\n            oo.ooo_cnt_30d,\n            oo.ooo_with_reviewer_cnt_30d,\n            oo.ooo_users_cnt_30d,\n            oo.ooo_tp_cnt_30d,\n            oo.ooo_tp_resolved_cnt_30d,\n            oo.ooo_ai_cnt_30d,\n            oo.ooo_ai_resolved_cnt_30d,\n            oo.ooo_avg_days_from_previous_1on1_30d,\n\n         -- HighFives given\n            hfga.highfives_given_all_time,\n            hfga.highfives_users_given_all_time,\n\n         -- total comments\n            tca.tc_cnt_1d,\n            tca.tc_unique_users_1d,\n            tca.tc_cnt_7d,\n            tca.tc_unique_users_7d,\n            tca.tc_cnt_30d,\n            tca.tc_unique_users_30d,\n\n         --  Objectives\n            obj.obj_created_30d,\n            obj.obj_created_users_30d,\n            obj.obj_created_90d,\n            obj.obj_created_users_90d,\n\n         --  Key results\n            kr.kr_created_30d,\n            kr.kr_created_users_30d,\n            kr.kr_created_90d,\n            kr.kr_created_users_90d,\n\n         -- BSR\n            bsrc.bsr_cycles_90d,\n            bsrc.bsr_cycles_users_90d,\n            bsrc.bsr_cycles_180d,\n            bsrc.bsr_cycles_users_180d,\n            bsrc.bsr_cycles_270d,\n            bsrc.bsr_cycles_users_270d,\n            bsrc.bsr_cycles_360d,\n            bsrc.bsr_cycles_users_360d,\n            bsrp.bsr_answers_90d,\n            bsrp.bsr_users_in_answers_90d,\n\n            bsrcs.calibration_sessions_180d,\n\n         -- BSKO\n            bsko.bsko_clicked_completed,\n            bsko.bsko_clicked_completed_users_cnt,\n            bsko.bsko_about_answers_cnt,\n            bsko.bsko_about_answers_users_cnt,\n            bsko.bsko_dmbw_answers_cnt,\n            bsko.bsko_dmbw_an_users_cnt,\n            bsko.bsko_gad_answers_cnt,\n            bsko.bsko_gad_answers_users_cnt,\n            bsko.bsko_preferences_answers_cnt,\n            bsko.bsko_preferences_answers_users_cnt,\n\n         -- Transform\n            transform_attrs.manager_accelerator_available_seats,\n            transform_attrs.manager_accelerator_active_seats,\n\n         -- internal\n            CURRENT_DATE     as _date_ts,\n            calendar.year    as _date_year,\n            calendar.month   as _date_month,\n            calendar.day     as _date_day,\n            calendar.quarter as _date_quarter,\n            calendar.week    as _date_week,\n            calendar.day_name as _date_day_name,\n            calendar.month_name as _date_month_name,\n            calendar.holiday_flag as _date_holiday_flag,\n            calendar.weekend_flag as _date_weekend_flag,\n\n         -- needs to increase when underlying data properties have changed\n            1.07           as _version\n\n    from \"snowdb\".\"analytics\".\"company_comb\" c\n    left join \"snowdb\".\"analytics\".\"users_agg\" uagg ON uagg.company_id = c.id\n    left join ext.sfdc_account sfdc ON left(sfdc.id, 15) = left(c.sfdc_id, 15)\n\n    left join (\n       -- get only the latest record (by lastmodifieddate)\n       select *,\n              row_number() over (partition by accountid order by lastmodifieddate desc) as row_n\n       from ext.sfdc_opportunity\n    ) opp ON opp.accountid = sfdc.id and opp.row_n = 1\n\n    left join (\n       -- in case of duplicates, get only the latest record (by updateddate)\n       select *,\n              row_number() over (partition by x15five_com_company_id__c, crmid order by updateddate desc) as row_n\n       from zuora.account\n    ) za ON za.id = c.zuora_acc_id and za.row_n = 1\n\n    left join (\n       -- in case of duplicates, get only the latest record (by updateddate)\n       select *,\n              row_number() over (partition by accountid order by updateddate desc) as row_n\n       from zuora.subscription\n       where status = 'Active'\n    ) zs ON zs.accountid = za.id and zs.row_n = 1\n    left join \"snowdb\".\"analytics\".\"bi_mrr_monthly\"          mrr_record ON mrr_record.zuora_acc_id = za.id and mrr_record.dt = CURRENT_DATE - interval '1 day'\n    left join \"snowdb\".\"analytics\".\"sfdc_case_agg\"           scase     ON scase.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"pendo_nps_agg\"           pendo_nps ON pendo_nps.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"activity_agg\"                  act ON act.company_id = c.id\n    left join __dbt__cte__checkins_reviewers_agg  revrs_cnt ON revrs_cnt.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"highfives_given_alltime_agg\"  hfga ON hfga.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"one_on_one_agg\"                 oo ON oo.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"objectives_agg\"                obj ON obj.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"key_results_agg\"                kr ON kr.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"bsr_cycles_agg\"               bsrc ON bsrc.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"bsr_participants_agg\"         bsrp ON bsrp.company_id = c.id\n    left join pg.x_calibrationsession_agg              bsrcs ON bsrcs.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"bsko_agg\"                     bsko ON bsko.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"total_comments_agg\"            tca ON tca.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"enabled_features_agg\"     features ON features.company_id = c.id\n    left join \"snowdb\".\"analytics\".\"transform_agg\"     transform_attrs ON transform_attrs.company_id = c.id\n    left join const.dim_calendar                    calendar ON calendar.date = CURRENT_DATE\n\n    where\n      c.is_in_analytics\n      or c.id in ('34572', '55006', '58539')\n      or c.emplify_id is not null\n      or c.transform_id is not null\n)\n\nselect *\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.main.checkins_reviewers_agg", "sql": " __dbt__cte__checkins_reviewers_agg as (\n\nSELECT\n    u.company_id,\n    COUNT(DISTINCT u.id) as reviewer_count\nFROM\n    \"snowdb\".\"stage\".\"ff_user\" u\nWHERE\n    u.is_reviewer -- user is a reviewer\n    AND u.deactivate_ts IS NULL -- user is not deactivated\n    AND u.first_login_ts IS NOT NULL -- user has logged in at least once\nGROUP BY company_id\n)"}], "relation_name": "\"snowdb\".\"analytics\".\"customer\""}, "model.main.enabled_features_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n\nSELECT\n    company.id as company_id,\n    CASE WHEN reviews_settings.id AND feature_flags.bsr_enabled THEN true ELSE false END as feature_bsr,\n    CASE WHEN billing_info.id and company.feature_career_growth_enabled THEN true ELSE false END as feature_careerhub,\n    CASE WHEN scimconfig.id THEN true ELSE false END as feature_scim,\n    CASE WHEN namelyconfig.id THEN true ELSE false END as feature_namely,\n    CASE WHEN feature_flags.emplify_enabled THEN true ELSE false END as feature_emplify,\n    CASE WHEN feature_flags.career_paths_enabled THEN true ELSE false END as feature_career_ladders,\n    CASE WHEN feature_flags.growth_plan_enabled THEN true ELSE false END as feature_growth_plan,\n    CASE WHEN feature_flags.manager_accelerator_enabled THEN true ELSE false END as feature_manager_accelerator,\n    CASE WHEN transform_settings.is_manager_accelerator_enabled THEN true ELSE false END as feature_manager_accelerator_enabled,\n    CASE WHEN company.feature_career_ladders_enabled THEN true ELSE false END as feature_career_ladders_enabled_for_users,\n    CASE WHEN feature_flags.checkins_enabled THEN true ELSE false END as feature_checkins_enabled\n\nFROM pg.company company\nLEFT JOIN {{ ref('feature_flags_agg') }} feature_flags ON feature_flags.company_id = company.id\n\n-- Reviews are considered enabled when there are active settings for company and company_feature_flag\n-- record is present\nLEFT JOIN pg.reviews_settings reviews_settings\nON company.id = reviews_settings.company_id\nAND reviews_settings.activate_ts IS NOT null AND reviews_settings.disable_ts IS null\n\n-- Carrer hub is considered enabled when company is on specific billing plan\n-- and career_hub_settings are enabled, no company_feature records are created\nLEFT JOIN pg.ff_companybillinginfo billing_info\nON company.id = billing_info.company_id\nAND billing_info.recurly_plan_code NOT IN ('engage_monthly', 'engage_annual')\n\n-- SCIM is considered enabled when there are active settings, feature flag is ignored\nLEFT JOIN pg.ff_scimconfig scimconfig\nON company.id = scimconfig.company_id AND scimconfig.is_active = true\n\n-- Namely is considered enabled when there are active and set up settings, feature flag is ignored\nLEFT JOIN pg.namelyconfig namelyconfig\nON namelyconfig.company_id = company.id AND namelyconfig.is_active = true AND namelyconfig.is_initial_setup_complete = true\n\nLEFT JOIN pg.transform_transformsettings transform_settings ON transform_settings.company_id = company.id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.feature_flags_agg"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "enabled_features_agg"], "unique_id": "model.main.enabled_features_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/enabled_features_agg.sql", "original_file_path": "models/customer/enabled_features_agg.sql", "name": "enabled_features_agg", "alias": "enabled_features_agg", "checksum": {"name": "sha256", "checksum": "7edc20093f09e55b0a4e517fc32aaa3d8a0858b9af531c121d8406efd15e8a8b"}, "tags": [], "refs": [["feature_flags_agg"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/enabled_features_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.636905, "compiled_sql": "\n\n\nSELECT\n    company.id as company_id,\n    CASE WHEN reviews_settings.id AND feature_flags.bsr_enabled THEN true ELSE false END as feature_bsr,\n    CASE WHEN billing_info.id and company.feature_career_growth_enabled THEN true ELSE false END as feature_careerhub,\n    CASE WHEN scimconfig.id THEN true ELSE false END as feature_scim,\n    CASE WHEN namelyconfig.id THEN true ELSE false END as feature_namely,\n    CASE WHEN feature_flags.emplify_enabled THEN true ELSE false END as feature_emplify,\n    CASE WHEN feature_flags.career_paths_enabled THEN true ELSE false END as feature_career_ladders,\n    CASE WHEN feature_flags.growth_plan_enabled THEN true ELSE false END as feature_growth_plan,\n    CASE WHEN feature_flags.manager_accelerator_enabled THEN true ELSE false END as feature_manager_accelerator,\n    CASE WHEN transform_settings.is_manager_accelerator_enabled THEN true ELSE false END as feature_manager_accelerator_enabled,\n    CASE WHEN company.feature_career_ladders_enabled THEN true ELSE false END as feature_career_ladders_enabled_for_users,\n    CASE WHEN feature_flags.checkins_enabled THEN true ELSE false END as feature_checkins_enabled\n\nFROM pg.company company\nLEFT JOIN \"snowdb\".\"analytics\".\"feature_flags_agg\" feature_flags ON feature_flags.company_id = company.id\n\n-- Reviews are considered enabled when there are active settings for company and company_feature_flag\n-- record is present\nLEFT JOIN pg.reviews_settings reviews_settings\nON company.id = reviews_settings.company_id\nAND reviews_settings.activate_ts IS NOT null AND reviews_settings.disable_ts IS null\n\n-- Carrer hub is considered enabled when company is on specific billing plan\n-- and career_hub_settings are enabled, no company_feature records are created\nLEFT JOIN pg.ff_companybillinginfo billing_info\nON company.id = billing_info.company_id\nAND billing_info.recurly_plan_code NOT IN ('engage_monthly', 'engage_annual')\n\n-- SCIM is considered enabled when there are active settings, feature flag is ignored\nLEFT JOIN pg.ff_scimconfig scimconfig\nON company.id = scimconfig.company_id AND scimconfig.is_active = true\n\n-- Namely is considered enabled when there are active and set up settings, feature flag is ignored\nLEFT JOIN pg.namelyconfig namelyconfig\nON namelyconfig.company_id = company.id AND namelyconfig.is_active = true AND namelyconfig.is_initial_setup_complete = true\n\nLEFT JOIN pg.transform_transformsettings transform_settings ON transform_settings.company_id = company.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"enabled_features_agg\""}, "model.main.bsko_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nWITH about AS (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt,\n           count(DISTINCT CASE WHEN bsko.completed_ts is not null THEN bsko.id END) as clicked_completed_cnt,\n           count(DISTINCT CASE WHEN bsko.completed_ts is not null THEN bsko.reporter_id END) as clicked_completed_users_cnt\n\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'about'\n    GROUP BY pq.company_id\n),\n\ndmbw as (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'doing_my_best_work'\n    GROUP BY pq.company_id\n),\n\ngad as (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'growth_and_development'\n    GROUP BY pq.company_id\n),\n\npreferences as (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'preferences'\n    GROUP BY pq.company_id\n)\n\n\n\nSELECT\n        coalesce(about.company_id, dmbw.company_id) as company_id,\n        about.answers_cnt as bsko_about_answers_cnt,\n        about.users_cnt as bsko_about_answers_users_cnt,\n        about.clicked_completed_cnt as bsko_clicked_completed,\n        about.clicked_completed_users_cnt as bsko_clicked_completed_users_cnt,\n        dmbw.answers_cnt as bsko_dmbw_answers_cnt,\n        dmbw.users_cnt as bsko_dmbw_an_users_cnt,\n        gad.answers_cnt as bsko_gad_answers_cnt,\n        gad.users_cnt as bsko_gad_answers_users_cnt,\n        preferences.answers_cnt as bsko_preferences_answers_cnt,\n        preferences.users_cnt as bsko_preferences_answers_users_cnt\nFROM about\nLEFT JOIN dmbw ON dmbw.company_id = about.company_id\nLEFT JOIN gad  ON gad.company_id  = about.company_id\nLEFT JOIN preferences ON preferences.company_id = about.company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "bsko_agg"], "unique_id": "model.main.bsko_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/bsko_agg.sql", "original_file_path": "models/customer/bsko_agg.sql", "name": "bsko_agg", "alias": "bsko_agg", "checksum": {"name": "sha256", "checksum": "611265d95957ae4a88bfbd74ec6c319b23b14dbfe5ff801ec5b803acaf1a640f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/bsko_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6393893, "compiled_sql": "\n\nWITH about AS (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt,\n           count(DISTINCT CASE WHEN bsko.completed_ts is not null THEN bsko.id END) as clicked_completed_cnt,\n           count(DISTINCT CASE WHEN bsko.completed_ts is not null THEN bsko.reporter_id END) as clicked_completed_users_cnt\n\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'about'\n    GROUP BY pq.company_id\n),\n\ndmbw as (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'doing_my_best_work'\n    GROUP BY pq.company_id\n),\n\ngad as (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'growth_and_development'\n    GROUP BY pq.company_id\n),\n\npreferences as (\n    SELECT\n           pq.company_id,\n           count(pa.id) as answers_cnt,\n           count(DISTINCT pa.user_id) as users_cnt\n    FROM pg.profile_profilequestion pq\n    JOIN pg.profile_profileanswer pa ON pq.id = pa.question_id\n    JOIN pg.best_self_kickoff_bestselfkickoff bsko ON bsko.reporter_id = pa.user_id\n    WHERE pq.is_active ='true'\n      AND pq.section = 'preferences'\n    GROUP BY pq.company_id\n)\n\n\n\nSELECT\n        coalesce(about.company_id, dmbw.company_id) as company_id,\n        about.answers_cnt as bsko_about_answers_cnt,\n        about.users_cnt as bsko_about_answers_users_cnt,\n        about.clicked_completed_cnt as bsko_clicked_completed,\n        about.clicked_completed_users_cnt as bsko_clicked_completed_users_cnt,\n        dmbw.answers_cnt as bsko_dmbw_answers_cnt,\n        dmbw.users_cnt as bsko_dmbw_an_users_cnt,\n        gad.answers_cnt as bsko_gad_answers_cnt,\n        gad.users_cnt as bsko_gad_answers_users_cnt,\n        preferences.answers_cnt as bsko_preferences_answers_cnt,\n        preferences.users_cnt as bsko_preferences_answers_users_cnt\nFROM about\nLEFT JOIN dmbw ON dmbw.company_id = about.company_id\nLEFT JOIN gad  ON gad.company_id  = about.company_id\nLEFT JOIN preferences ON preferences.company_id = about.company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bsko_agg\""}, "model.main.pendo_nps_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nselect companyid::DECIMAL as company_id,\n       avg(quantitativeresponse::int::float) as pendo_avg_nps_30d,\n       count(distinct userid::DECIMAL) as users_cnt\n\nfrom ext.pendo_nps\n   where quantitativetime::DATE > CURRENT_DATE - interval '30 days'\ngroup by company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "pendo_nps_agg"], "unique_id": "model.main.pendo_nps_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/pendo_nps_agg.sql", "original_file_path": "models/customer/pendo_nps_agg.sql", "name": "pendo_nps_agg", "alias": "pendo_nps_agg", "checksum": {"name": "sha256", "checksum": "9ca750275793fb9bba35ba2ff75c97b1c9052e8cbe94247e241b193e28ee1b43"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/pendo_nps_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.641776, "compiled_sql": "\n\nselect companyid::DECIMAL as company_id,\n       avg(quantitativeresponse::int::float) as pendo_avg_nps_30d,\n       count(distinct userid::DECIMAL) as users_cnt\n\nfrom ext.pendo_nps\n   where quantitativetime::DATE > CURRENT_DATE - interval '30 days'\ngroup by company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"pendo_nps_agg\""}, "model.main.transform_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith transform_available_seats as (\n    select\n        c.id as company_id,\n        cbi.manager_accelerator_online_user_count as manager_accelerator_available_seats\n    from pg.company c\n    join pg.ff_companybillinginfo cbi on cbi.company_id = c.id\n),\n\ntransform_user_count as (\n    select\n        c.id as company_id,\n        count(tu.user_id) as manager_accelerator_active_seats\n    from pg.transform_transformuser tu\n    join pg.ff_user u on u.id = tu.user_id\n    join pg.company c on c.id = u.company_id\n    where tu.is_active\n    group by c.id\n)\n\nselect\n    tas.company_id,\n    tas.manager_accelerator_available_seats,\n    tuc.manager_accelerator_active_seats\nfrom transform_available_seats tas\njoin transform_user_count tuc on tas.company_id = tuc.company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "transform_agg"], "unique_id": "model.main.transform_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/transform_agg.sql", "original_file_path": "models/customer/transform_agg.sql", "name": "transform_agg", "alias": "transform_agg", "checksum": {"name": "sha256", "checksum": "052329ffd00475f3380275c8ec743b579cadcc52bea99c8bfda3a5398c11ec2e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/transform_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6441708, "compiled_sql": "\n\nwith transform_available_seats as (\n    select\n        c.id as company_id,\n        cbi.manager_accelerator_online_user_count as manager_accelerator_available_seats\n    from pg.company c\n    join pg.ff_companybillinginfo cbi on cbi.company_id = c.id\n),\n\ntransform_user_count as (\n    select\n        c.id as company_id,\n        count(tu.user_id) as manager_accelerator_active_seats\n    from pg.transform_transformuser tu\n    join pg.ff_user u on u.id = tu.user_id\n    join pg.company c on c.id = u.company_id\n    where tu.is_active\n    group by c.id\n)\n\nselect\n    tas.company_id,\n    tas.manager_accelerator_available_seats,\n    tuc.manager_accelerator_active_seats\nfrom transform_available_seats tas\njoin transform_user_count tuc on tas.company_id = tuc.company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"transform_agg\""}, "model.main.activity_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nWITH s1 AS (\nSELECT count(distinct ua.id) as seen_users_1d,\n       ua.company_id\nFROM {{ ref('user_activity') }} ua\nWHERE TRUE\n  AND ua.time_day <  CURRENT_DATE\n  AND ua.time_day >  CURRENT_DATE - interval '2 day'\nGROUP BY ua.company_id\n),\n\ns7 as (\nSELECT count(distinct ua.id) as seen_users_7d,\n       ua.company_id\nFROM {{ ref('user_activity') }} ua\nWHERE TRUE\n  AND ua.time_day <  CURRENT_DATE\n  AND ua.time_day >  CURRENT_DATE - interval '8 day'\nGROUP BY ua.company_id\n),\n\ns30 as (\nSELECT count(distinct ua.id) as seen_users_30d,\n       ua.company_id\nFROM {{ ref('user_activity') }} ua\nWHERE TRUE\n  AND ua.time_day <  CURRENT_DATE\n  AND ua.time_day >  CURRENT_DATE - interval '31 day'\nGROUP BY ua.company_id\n),\n\nds30 AS (\nselect\n  days_seen30 as days_seen,\n  company_id\nfrom {{ ref('user_days_seen') }} uds\n  where date = CURRENT_DATE - interval '1 day'\n)\n\n\nSELECT s30.company_id,\n       s1.seen_users_1d,\n       s7.seen_users_7d,\n       s30.seen_users_30d,\n       avg(ds30.days_seen::float) as days_seen30d_avg,\n       median(ds30.days_seen::float) as days_seen30d_median\n\nFROM s30\nLEFT JOIN s1 ON s1.company_id = s30.company_id\nLEFT JOIN s7 ON s7.company_id = s30.company_id\nLEFT JOIN ds30 ON ds30.company_id = s30.company_id\nWHERE s30.company_id is not NULL\nGROUP BY s30.company_id,\n         s1.seen_users_1d,\n         s7.seen_users_7d,\n         s30.seen_users_30d", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.user_activity", "model.main.user_activity", "model.main.user_activity", "model.main.user_days_seen"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "activity_agg"], "unique_id": "model.main.activity_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/activity_agg.sql", "original_file_path": "models/customer/activity_agg.sql", "name": "activity_agg", "alias": "activity_agg", "checksum": {"name": "sha256", "checksum": "6d6cb96680471ff3a1032df6c9f0daaef8c2fb0bdd87a0e18f104f5a068a84ce"}, "tags": [], "refs": [["user_activity"], ["user_activity"], ["user_activity"], ["user_days_seen"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/activity_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6465926, "compiled_sql": "\n\nWITH s1 AS (\nSELECT count(distinct ua.id) as seen_users_1d,\n       ua.company_id\nFROM \"snowdb\".\"analytics\".\"user_activity\" ua\nWHERE TRUE\n  AND ua.time_day <  CURRENT_DATE\n  AND ua.time_day >  CURRENT_DATE - interval '2 day'\nGROUP BY ua.company_id\n),\n\ns7 as (\nSELECT count(distinct ua.id) as seen_users_7d,\n       ua.company_id\nFROM \"snowdb\".\"analytics\".\"user_activity\" ua\nWHERE TRUE\n  AND ua.time_day <  CURRENT_DATE\n  AND ua.time_day >  CURRENT_DATE - interval '8 day'\nGROUP BY ua.company_id\n),\n\ns30 as (\nSELECT count(distinct ua.id) as seen_users_30d,\n       ua.company_id\nFROM \"snowdb\".\"analytics\".\"user_activity\" ua\nWHERE TRUE\n  AND ua.time_day <  CURRENT_DATE\n  AND ua.time_day >  CURRENT_DATE - interval '31 day'\nGROUP BY ua.company_id\n),\n\nds30 AS (\nselect\n  days_seen30 as days_seen,\n  company_id\nfrom \"snowdb\".\"analytics\".\"user_days_seen\" uds\n  where date = CURRENT_DATE - interval '1 day'\n)\n\n\nSELECT s30.company_id,\n       s1.seen_users_1d,\n       s7.seen_users_7d,\n       s30.seen_users_30d,\n       avg(ds30.days_seen::float) as days_seen30d_avg,\n       median(ds30.days_seen::float) as days_seen30d_median\n\nFROM s30\nLEFT JOIN s1 ON s1.company_id = s30.company_id\nLEFT JOIN s7 ON s7.company_id = s30.company_id\nLEFT JOIN ds30 ON ds30.company_id = s30.company_id\nWHERE s30.company_id is not NULL\nGROUP BY s30.company_id,\n         s1.seen_users_1d,\n         s7.seen_users_7d,\n         s30.seen_users_30d", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"activity_agg\""}, "model.main.key_results_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nWITH key_results_from_30d AS\n  (SELECT count(keyresult.id) AS kr_created_30d,\n          count(DISTINCT keyresult.owner_id) AS kr_created_users_30d,\n          objective.company_id as company_id\n   FROM pg.objectives_keyresult as keyresult\n   JOIN pg.objectives_objective as objective on objective.id = keyresult.objective_id\n   WHERE TRUE\n     AND keyresult.create_ts < CURRENT_DATE\n     AND keyresult.create_ts > CURRENT_DATE - interval '31 days'\n     AND keyresult.delete_ts is null\n     AND objective.delete_ts is null\n   GROUP BY objective.company_id ),\n\nkey_results_from_90d AS\n  (SELECT count(keyresult.id) AS kr_created_90d,\n          count(DISTINCT keyresult.owner_id) AS kr_created_users_90d,\n          objective.company_id as company_id\n   FROM pg.objectives_keyresult as keyresult\n   JOIN pg.objectives_objective as objective on objective.id = keyresult.objective_id\n   WHERE TRUE\n     AND keyresult.create_ts < CURRENT_DATE\n     AND keyresult.create_ts > CURRENT_DATE - interval '91 days'\n     AND keyresult.delete_ts is null\n     AND objective.delete_ts is null\n   GROUP BY objective.company_id )\n\nSELECT key_results_from_30d.company_id,\n       key_results_from_30d.kr_created_30d,\n       key_results_from_30d.kr_created_users_30d,\n       key_results_from_90d.kr_created_90d,\n       key_results_from_90d.kr_created_users_90d\n\nFROM key_results_from_90d\nLEFT JOIN key_results_from_30d USING (company_id)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "key_results_agg"], "unique_id": "model.main.key_results_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/key_results_agg.sql", "original_file_path": "models/customer/key_results_agg.sql", "name": "key_results_agg", "alias": "key_results_agg", "checksum": {"name": "sha256", "checksum": "5fe7a552258186e2676d0453b1d650ecaf3a459d32eb9ea3117ec308d059d3bf"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/key_results_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6497161, "compiled_sql": "\n\nWITH key_results_from_30d AS\n  (SELECT count(keyresult.id) AS kr_created_30d,\n          count(DISTINCT keyresult.owner_id) AS kr_created_users_30d,\n          objective.company_id as company_id\n   FROM pg.objectives_keyresult as keyresult\n   JOIN pg.objectives_objective as objective on objective.id = keyresult.objective_id\n   WHERE TRUE\n     AND keyresult.create_ts < CURRENT_DATE\n     AND keyresult.create_ts > CURRENT_DATE - interval '31 days'\n     AND keyresult.delete_ts is null\n     AND objective.delete_ts is null\n   GROUP BY objective.company_id ),\n\nkey_results_from_90d AS\n  (SELECT count(keyresult.id) AS kr_created_90d,\n          count(DISTINCT keyresult.owner_id) AS kr_created_users_90d,\n          objective.company_id as company_id\n   FROM pg.objectives_keyresult as keyresult\n   JOIN pg.objectives_objective as objective on objective.id = keyresult.objective_id\n   WHERE TRUE\n     AND keyresult.create_ts < CURRENT_DATE\n     AND keyresult.create_ts > CURRENT_DATE - interval '91 days'\n     AND keyresult.delete_ts is null\n     AND objective.delete_ts is null\n   GROUP BY objective.company_id )\n\nSELECT key_results_from_30d.company_id,\n       key_results_from_30d.kr_created_30d,\n       key_results_from_30d.kr_created_users_30d,\n       key_results_from_90d.kr_created_90d,\n       key_results_from_90d.kr_created_users_90d\n\nFROM key_results_from_90d\nLEFT JOIN key_results_from_30d USING (company_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"key_results_agg\""}, "model.main.feature_flags_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nWITH company_features_enabled as (\n    SELECT company_id, company_feature.feature_id as feature_id\n    FROM pg.company\n    LEFT JOIN pg.ff_company_features company_feature on company_feature.company_id = company.id\n    WHERE company_feature.feature_id\n    IN (\n      125, -- Reviews\n      502, -- Emplify Engagement\n      572, -- Career Hub > Career Paths\n      582, -- Career Hub > Growth Plan\n      624, -- Transform > Manager Accelerator Online\n      425  -- 15Fives/Checkins\n    )\n)\n\nSELECT\n    company_id,\n    MAX(CASE WHEN feature_id = 125 THEN 1 ELSE 0 END)::bool as bsr_enabled,\n    MAX(CASE WHEN feature_id = 502 THEN 1 ELSE 0 END)::bool as emplify_enabled,\n    MAX(CASE WHEN feature_id = 572 THEN 1 ELSE 0 END)::bool as career_paths_enabled,\n    MAX(CASE WHEN feature_id = 582 THEN 1 ELSE 0 END)::bool as growth_plan_enabled,\n    MAX(CASE WHEN feature_id = 624 THEN 1 ELSE 0 END)::bool as manager_accelerator_enabled,\n    MAX(CASE WHEN feature_id = 425 THEN 1 ELSE 0 END)::bool as checkins_enabled\n\nFROM company_features_enabled\nGROUP BY company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "feature_flags_agg"], "unique_id": "model.main.feature_flags_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/feature_flags_agg.sql", "original_file_path": "models/customer/feature_flags_agg.sql", "name": "feature_flags_agg", "alias": "feature_flags_agg", "checksum": {"name": "sha256", "checksum": "1cc04d2b70073f97c5ddb972beb3baa6aaabe63dd0139472909eae6eff881865"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/feature_flags_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.652129, "compiled_sql": "\n\nWITH company_features_enabled as (\n    SELECT company_id, company_feature.feature_id as feature_id\n    FROM pg.company\n    LEFT JOIN pg.ff_company_features company_feature on company_feature.company_id = company.id\n    WHERE company_feature.feature_id\n    IN (\n      125, -- Reviews\n      502, -- Emplify Engagement\n      572, -- Career Hub > Career Paths\n      582, -- Career Hub > Growth Plan\n      624, -- Transform > Manager Accelerator Online\n      425  -- 15Fives/Checkins\n    )\n)\n\nSELECT\n    company_id,\n    MAX(CASE WHEN feature_id = 125 THEN 1 ELSE 0 END)::bool as bsr_enabled,\n    MAX(CASE WHEN feature_id = 502 THEN 1 ELSE 0 END)::bool as emplify_enabled,\n    MAX(CASE WHEN feature_id = 572 THEN 1 ELSE 0 END)::bool as career_paths_enabled,\n    MAX(CASE WHEN feature_id = 582 THEN 1 ELSE 0 END)::bool as growth_plan_enabled,\n    MAX(CASE WHEN feature_id = 624 THEN 1 ELSE 0 END)::bool as manager_accelerator_enabled,\n    MAX(CASE WHEN feature_id = 425 THEN 1 ELSE 0 END)::bool as checkins_enabled\n\nFROM company_features_enabled\nGROUP BY company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"feature_flags_agg\""}, "model.main.one_on_one_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nselect  oo.company_id,\n        count(id) as ooo_cnt_30d,\n        count(case when is_with_reviewer then id end) as ooo_with_reviewer_cnt_30d,\n        count(distinct c_user_id) as ooo_users_cnt_30d,\n        sum(oo.talking_points_count) as ooo_tp_cnt_30d,\n        sum(oo.resolved_talking_points_count) as ooo_tp_resolved_cnt_30d,\n        sum(action_items_count) as ooo_ai_cnt_30d,\n        sum(resolved_action_items_count) as ooo_ai_resolved_cnt_30d,\n        avg(days_from_previous_1_on_1_with_reviewer::float) as ooo_avg_days_from_previous_1on1_30d\nfrom {{ ref('ooo_report_comb') }} oo\nwhere for_date  < CURRENT_DATE\n  and for_date > CURRENT_DATE - interval '31 days'\ngroup by company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.ooo_report_comb"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "one_on_one_agg"], "unique_id": "model.main.one_on_one_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/one_on_one_agg.sql", "original_file_path": "models/customer/one_on_one_agg.sql", "name": "one_on_one_agg", "alias": "one_on_one_agg", "checksum": {"name": "sha256", "checksum": "324c9140ddfa16a9f964e8f1145acdd396286a52d0178abf9247456959a689e5"}, "tags": [], "refs": [["ooo_report_comb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/one_on_one_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6545098, "compiled_sql": "\n\nselect  oo.company_id,\n        count(id) as ooo_cnt_30d,\n        count(case when is_with_reviewer then id end) as ooo_with_reviewer_cnt_30d,\n        count(distinct c_user_id) as ooo_users_cnt_30d,\n        sum(oo.talking_points_count) as ooo_tp_cnt_30d,\n        sum(oo.resolved_talking_points_count) as ooo_tp_resolved_cnt_30d,\n        sum(action_items_count) as ooo_ai_cnt_30d,\n        sum(resolved_action_items_count) as ooo_ai_resolved_cnt_30d,\n        avg(days_from_previous_1_on_1_with_reviewer::float) as ooo_avg_days_from_previous_1on1_30d\nfrom \"snowdb\".\"analytics\".\"ooo_report_comb\" oo\nwhere for_date  < CURRENT_DATE\n  and for_date > CURRENT_DATE - interval '31 days'\ngroup by company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"one_on_one_agg\""}, "model.main.total_comments_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n-- all comments\n\nWITH c30 AS (\n\nSELECT  sum(cm.total_comments) as     tc_cnt_30d,\n        count(distinct cm.cuid) as tc_unique_users_30d,\n        u.company_id\nFROM {{ ref('x_comment_comb') }} cm\nJOIN {{ ref('user_comb') }} u ON u.id = cm.user_id and left(cm.cuid, 4) = left(u.cloud_id, 4)\nWHERE TRUE\n  AND time_bin < CURRENT_DATE\n  AND time_bin > current_date - interval '31 days'\nGROUP BY company_id\n\n),\n\nc7 AS (\n\nSELECT  sum(cm.total_comments) as       tc_cnt_7d,\n        count(distinct cm.cuid) as   tc_unique_users_7d,\n        u.company_id\nFROM {{ ref('x_comment_comb') }} cm\nJOIN {{ ref('user_comb') }} u ON u.id = cm.user_id and left(cm.cuid, 4) = left(u.cloud_id, 4)\nWHERE TRUE\n  AND time_bin < CURRENT_DATE\n  AND time_bin > current_date - interval '8 days'\nGROUP BY company_id\n\n),\n\nc1 AS (\n\nSELECT  sum(cm.total_comments) as       tc_cnt_1d,\n        count(distinct cm.cuid) as   tc_unique_users_1d,\n        u.company_id\nFROM {{ ref('x_comment_comb') }} cm\nJOIN {{ ref('user_comb') }} u ON u.id = cm.user_id and left(cm.cuid, 4) = left(u.cloud_id, 4)\nWHERE TRUE\n  AND time_bin < CURRENT_DATE\n  AND time_bin > current_date - interval '2 days'\nGROUP BY company_id\n\n)\n\nSELECT  c30.company_id,\n        c30.tc_cnt_30d,\n        c30.tc_unique_users_30d,\n        c7.tc_cnt_7d,\n        c7.tc_unique_users_7d,\n        c1.tc_cnt_1d,\n        c1.tc_unique_users_1d\nFROM c30\nLEFT JOIN c7 ON c7.company_id = c30.company_id\nLEFT JOIN c1 ON c1.company_id = c30.company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.x_comment_comb", "model.main.user_comb", "model.main.x_comment_comb", "model.main.user_comb", "model.main.x_comment_comb", "model.main.user_comb"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "total_comments_agg"], "unique_id": "model.main.total_comments_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/total_comments_agg.sql", "original_file_path": "models/customer/total_comments_agg.sql", "name": "total_comments_agg", "alias": "total_comments_agg", "checksum": {"name": "sha256", "checksum": "209cfc1a027ccfe077a65d693d37abffeb958d142a4e0661b2fee2d3db68cd8c"}, "tags": [], "refs": [["x_comment_comb"], ["user_comb"], ["x_comment_comb"], ["user_comb"], ["x_comment_comb"], ["user_comb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/total_comments_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6569679, "compiled_sql": "\n\n-- all comments\n\nWITH c30 AS (\n\nSELECT  sum(cm.total_comments) as     tc_cnt_30d,\n        count(distinct cm.cuid) as tc_unique_users_30d,\n        u.company_id\nFROM \"snowdb\".\"analytics\".\"x_comment_comb\" cm\nJOIN \"snowdb\".\"analytics\".\"user_comb\" u ON u.id = cm.user_id and left(cm.cuid, 4) = left(u.cloud_id, 4)\nWHERE TRUE\n  AND time_bin < CURRENT_DATE\n  AND time_bin > current_date - interval '31 days'\nGROUP BY company_id\n\n),\n\nc7 AS (\n\nSELECT  sum(cm.total_comments) as       tc_cnt_7d,\n        count(distinct cm.cuid) as   tc_unique_users_7d,\n        u.company_id\nFROM \"snowdb\".\"analytics\".\"x_comment_comb\" cm\nJOIN \"snowdb\".\"analytics\".\"user_comb\" u ON u.id = cm.user_id and left(cm.cuid, 4) = left(u.cloud_id, 4)\nWHERE TRUE\n  AND time_bin < CURRENT_DATE\n  AND time_bin > current_date - interval '8 days'\nGROUP BY company_id\n\n),\n\nc1 AS (\n\nSELECT  sum(cm.total_comments) as       tc_cnt_1d,\n        count(distinct cm.cuid) as   tc_unique_users_1d,\n        u.company_id\nFROM \"snowdb\".\"analytics\".\"x_comment_comb\" cm\nJOIN \"snowdb\".\"analytics\".\"user_comb\" u ON u.id = cm.user_id and left(cm.cuid, 4) = left(u.cloud_id, 4)\nWHERE TRUE\n  AND time_bin < CURRENT_DATE\n  AND time_bin > current_date - interval '2 days'\nGROUP BY company_id\n\n)\n\nSELECT  c30.company_id,\n        c30.tc_cnt_30d,\n        c30.tc_unique_users_30d,\n        c7.tc_cnt_7d,\n        c7.tc_unique_users_7d,\n        c1.tc_cnt_1d,\n        c1.tc_unique_users_1d\nFROM c30\nLEFT JOIN c7 ON c7.company_id = c30.company_id\nLEFT JOIN c1 ON c1.company_id = c30.company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"total_comments_agg\""}, "model.main.exec_advisor_customer_details": {"raw_sql": "with engage_last_survey as (\n    SELECT\n        ec.organization_id,\n        MAX(ec.ended_at) as last_survey_end_date\n    FROM\n        {{ ref('engage_campaigns') }} ec\n    WHERE\n        (\n            ec.quarterly_survey_count > 0\n            OR ec.topic_based_survey_count > 0\n        )\n        AND ec.status = 'finished'\n    GROUP BY\n        ec.organization_id\n),\nnext_survey_scheduled as (\n    SELECT\n        organization_id,\n        MIN(started_at) as next_survey_scheduled\n    FROM\n        {{ ref('engage_campaigns') }}\n    WHERE\n        started_at > current_date\n    GROUP BY\n        organization_id\n),\nnext_survey_scheduled_confirmed as (\n    SELECT\n        organization_id,\n        MIN(started_at) as next_survey_scheduled_confirmed\n    FROM\n        {{ ref('engage_campaigns') }}\n    WHERE\n        started_at > current_date\n        AND status = 'active'\n    GROUP BY\n        organization_id\n),\nfirst_emplify_score as (\n    SELECT\n        a.organization_id,\n        ec.emplify_score as first_emplify_score\n    FROM\n        (\n            SELECT\n                organization_id,\n                MIN(ended_at) as first_emplify_score_date\n            FROM\n                {{ ref('engage_campaigns') }}\n            WHERE\n                emplify_score IS NOT NULL\n                and status = 'finished'\n            GROUP BY\n                organization_id\n        ) as a\n        JOIN {{ ref('engage_campaigns') }} ec on ec.organization_id = a.organization_id\n        AND ec.ended_at = first_emplify_score_date\n),\nlast_emplify_score as (\n    SELECT\n        a.organization_id,\n        ec.emplify_score as last_emplify_score,\n        ec.surveys_sent,\n        ec.surveys_completed,\n        ec.response_rate\n    FROM\n        (\n            SELECT\n                organization_id,\n                MAX(ended_at) as last_emplify_score_date\n            FROM\n                {{ ref('engage_campaigns') }}\n            WHERE\n                emplify_score IS NOT NULL\n                and status = 'finished'\n            GROUP BY\n                organization_id\n        ) as a\n        JOIN {{ ref('engage_campaigns') }} ec on ec.organization_id = a.organization_id\n        AND ec.ended_at = last_emplify_score_date\n),\nfinal as (\n    SELECT\n        ad.sfdc_id,\n        coalesce(\n            ad.company_id,\n            sf.x15five_com_company_id__c :: FLOAT :: INT\n        ) as company_id,\n        o.id as emplify_id,\n        o.name as organization_name,\n        o.employee_limit,\n        sf.company_segment__c as company_segment,\n        ad.arr as engage_product_arr,\n        sf.arr_zuora__c as arr,\n        sf.csm_owner_name__c as csm_name,\n        pe.first_name || ' ' || pe.last_name as executive_advisor,\n        sf.industry,\n        sf.implementation_specialist_name__c as implementation_specialist,\n        o.subscription_contract_date,\n        o.renewal_contract_date,\n        ls.last_survey_end_date,\n        ns.next_survey_scheduled,\n        nsc.next_survey_scheduled_confirmed,\n        ce.entitlements_limit,\n        date_diff(\n            'month',\n            o.subscription_contract_date,\n            o.renewal_contract_date\n        ) subscription_month_cnt,\n        greatest(\n            date_diff(\n                'month',\n                o.subscription_contract_date,\n                current_date\n            ),\n            1\n        ) as months_since_subscription_start,\n        (\n            CAST(ce.entitlements_limit AS DECIMAL) / subscription_month_cnt\n        ) * months_since_subscription_start as entitlements_pacing_count,\n        COUNT(cse.id) as entitlements_completed_scheduled,\n        CAST(entitlements_completed_scheduled AS DECIMAL) / entitlements_limit as percent_entitlements_redeemed,\n        LEAST(\n            CAST(entitlements_completed_scheduled AS DECIMAL) / entitlements_pacing_count,\n            1\n        ) as percent_entitlements_redeemed_paced,\n        fs.first_emplify_score,\n        les.last_emplify_score,\n        les.surveys_sent as last_emplify_surveys_sent_cnt,\n        les.surveys_completed as last_emplify_surveys_completed_cnt,\n        les.response_rate as last_emplify_response_rate\n    FROM\n        {{ ref('arr_daily') }} ad\n        JOIN {{ ref('products') }} p on p.product_id = ad.product_id\n        LEFT JOIN ext.sfdc_account sf on left(sf.id, 15) = left(ad.sfdc_id, 15)\n        LEFT JOIN engage.organizations o on CASE\n            WHEN o.ff_company_id IS NOT NULL THEN o.ff_company_id = ad.company_id\n            ELSE left(o.salesforce_id, 15) = left(sf.id, 15)\n        END\n        JOIN engage.coaching_entitlements ce on ce.organization_id = o.id\n        AND ce.coaching_subscription_type_id = 10 -- breifing\n        AND ce.entitlements_limit > 0\n        LEFT JOIN engage.coaching_subscriptions cs on cs.organization_id = ce.organization_id\n        AND cs.coaching_subscription_type_id = ce.coaching_subscription_type_id\n        AND cs.started_at >= o.subscription_contract_date\n        AND cs.started_at < o.renewal_contract_date\n        AND cs.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions cse on cse.organization_id = ce.organization_id\n        AND cse.coaching_subscription_id = cs.id\n        AND cse.deleted_at IS NULL\n        AND cse.status IN ('completed', 'scheduled')\n        LEFT JOIN engage.people_roles pr on pr.organization_id = o.id\n        AND pr.id = o.primary_executive_advisor_id\n        LEFT JOIN engage.people pe on pe.id = pr.person_id\n        LEFT JOIN engage_last_survey ls on ls.organization_id = o.id\n        LEFT JOIN next_survey_scheduled ns on ns.organization_id = o.id\n        LEFT JOIN next_survey_scheduled_confirmed nsc on nsc.organization_id = o.id\n        LEFT JOIN first_emplify_score fs on fs.organization_id = o.id\n        LEFT JOIN last_emplify_score les on les.organization_id = o.id\n    WHERE\n        ad.date = (\n            SELECT\n                MAX(date)\n            FROM\n                {{ ref('arr_daily') }}\n        )\n        AND p.product IN (\n            'Engage',\n            'Perform',\n            'Total Platform',\n            'Insights Briefing'\n        )\n    GROUP BY\n        ad.sfdc_id,\n        coalesce(\n            ad.company_id,\n            sf.x15five_com_company_id__c :: FLOAT :: INT\n        ),\n        o.id,\n        ce.entitlements_limit,\n        o.subscription_contract_date,\n        o.renewal_contract_date,\n        sf.company_segment__c,\n        sf.arr_zuora__c,\n        sf.csm_owner_name__c,\n        sf.industry,\n        sf.implementation_specialist_name__c,\n        o.name,\n        pe.first_name || ' ' || pe.last_name,\n        ls.last_survey_end_date,\n        ns.next_survey_scheduled,\n        nsc.next_survey_scheduled_confirmed,\n        o.employee_limit,\n        ad.arr,\n        fs.first_emplify_score,\n        les.last_emplify_score,\n        les.surveys_sent,\n        les.surveys_completed,\n        les.response_rate\n)\nSELECT\n    sfdc_id,\n    company_id,\n    emplify_id,\n    organization_name,\n    employee_limit,\n    company_segment,\n    sum(engage_product_arr) as engage_product_arr,\n    arr,\n    csm_name,\n    executive_advisor,\n    industry,\n    implementation_specialist,\n    subscription_contract_date,\n    renewal_contract_date,\n    last_survey_end_date,\n    next_survey_scheduled,\n    next_survey_scheduled_confirmed,\n    entitlements_limit,\n    subscription_month_cnt,\n    months_since_subscription_start,\n    entitlements_pacing_count,\n    entitlements_completed_scheduled,\n    percent_entitlements_redeemed,\n    percent_entitlements_redeemed_paced,\n    first_emplify_score,\n    last_emplify_score,\n    last_emplify_surveys_sent_cnt,\n    last_emplify_surveys_completed_cnt,\n    last_emplify_response_rate\nFROM\n    final\nGROUP BY\n    sfdc_id,\n    company_id,\n    emplify_id,\n    organization_name,\n    employee_limit,\n    company_segment,\n    arr,\n    csm_name,\n    executive_advisor,\n    industry,\n    implementation_specialist,\n    subscription_contract_date,\n    renewal_contract_date,\n    last_survey_end_date,\n    next_survey_scheduled,\n    next_survey_scheduled_confirmed,\n    entitlements_limit,\n    subscription_month_cnt,\n    months_since_subscription_start,\n    entitlements_pacing_count,\n    entitlements_completed_scheduled,\n    percent_entitlements_redeemed,\n    percent_entitlements_redeemed_paced,\n    first_emplify_score,\n    last_emplify_score,\n    last_emplify_surveys_sent_cnt,\n    last_emplify_surveys_completed_cnt,\n    last_emplify_response_rate", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.arr_daily", "model.main.products", "model.main.arr_daily"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "exec_advisor_customer_details"], "unique_id": "model.main.exec_advisor_customer_details", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/exec_advisor_customer_details.sql", "original_file_path": "models/customer/exec_advisor_customer_details.sql", "name": "exec_advisor_customer_details", "alias": "exec_advisor_customer_details", "checksum": {"name": "sha256", "checksum": "d65bfa0c9631f6b1ba0b8c1a82da47eb22cc8633c586b82de68a6e66b06f3734"}, "tags": [], "refs": [["engage_campaigns"], ["engage_campaigns"], ["engage_campaigns"], ["engage_campaigns"], ["engage_campaigns"], ["engage_campaigns"], ["engage_campaigns"], ["arr_daily"], ["products"], ["arr_daily"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/exec_advisor_customer_details.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6606529, "compiled_sql": "with engage_last_survey as (\n    SELECT\n        ec.organization_id,\n        MAX(ec.ended_at) as last_survey_end_date\n    FROM\n        \"snowdb\".\"prod\".\"engage_campaigns\" ec\n    WHERE\n        (\n            ec.quarterly_survey_count > 0\n            OR ec.topic_based_survey_count > 0\n        )\n        AND ec.status = 'finished'\n    GROUP BY\n        ec.organization_id\n),\nnext_survey_scheduled as (\n    SELECT\n        organization_id,\n        MIN(started_at) as next_survey_scheduled\n    FROM\n        \"snowdb\".\"prod\".\"engage_campaigns\"\n    WHERE\n        started_at > current_date\n    GROUP BY\n        organization_id\n),\nnext_survey_scheduled_confirmed as (\n    SELECT\n        organization_id,\n        MIN(started_at) as next_survey_scheduled_confirmed\n    FROM\n        \"snowdb\".\"prod\".\"engage_campaigns\"\n    WHERE\n        started_at > current_date\n        AND status = 'active'\n    GROUP BY\n        organization_id\n),\nfirst_emplify_score as (\n    SELECT\n        a.organization_id,\n        ec.emplify_score as first_emplify_score\n    FROM\n        (\n            SELECT\n                organization_id,\n                MIN(ended_at) as first_emplify_score_date\n            FROM\n                \"snowdb\".\"prod\".\"engage_campaigns\"\n            WHERE\n                emplify_score IS NOT NULL\n                and status = 'finished'\n            GROUP BY\n                organization_id\n        ) as a\n        JOIN \"snowdb\".\"prod\".\"engage_campaigns\" ec on ec.organization_id = a.organization_id\n        AND ec.ended_at = first_emplify_score_date\n),\nlast_emplify_score as (\n    SELECT\n        a.organization_id,\n        ec.emplify_score as last_emplify_score,\n        ec.surveys_sent,\n        ec.surveys_completed,\n        ec.response_rate\n    FROM\n        (\n            SELECT\n                organization_id,\n                MAX(ended_at) as last_emplify_score_date\n            FROM\n                \"snowdb\".\"prod\".\"engage_campaigns\"\n            WHERE\n                emplify_score IS NOT NULL\n                and status = 'finished'\n            GROUP BY\n                organization_id\n        ) as a\n        JOIN \"snowdb\".\"prod\".\"engage_campaigns\" ec on ec.organization_id = a.organization_id\n        AND ec.ended_at = last_emplify_score_date\n),\nfinal as (\n    SELECT\n        ad.sfdc_id,\n        coalesce(\n            ad.company_id,\n            sf.x15five_com_company_id__c :: FLOAT :: INT\n        ) as company_id,\n        o.id as emplify_id,\n        o.name as organization_name,\n        o.employee_limit,\n        sf.company_segment__c as company_segment,\n        ad.arr as engage_product_arr,\n        sf.arr_zuora__c as arr,\n        sf.csm_owner_name__c as csm_name,\n        pe.first_name || ' ' || pe.last_name as executive_advisor,\n        sf.industry,\n        sf.implementation_specialist_name__c as implementation_specialist,\n        o.subscription_contract_date,\n        o.renewal_contract_date,\n        ls.last_survey_end_date,\n        ns.next_survey_scheduled,\n        nsc.next_survey_scheduled_confirmed,\n        ce.entitlements_limit,\n        date_diff(\n            'month',\n            o.subscription_contract_date,\n            o.renewal_contract_date\n        ) subscription_month_cnt,\n        greatest(\n            date_diff(\n                'month',\n                o.subscription_contract_date,\n                current_date\n            ),\n            1\n        ) as months_since_subscription_start,\n        (\n            CAST(ce.entitlements_limit AS DECIMAL) / subscription_month_cnt\n        ) * months_since_subscription_start as entitlements_pacing_count,\n        COUNT(cse.id) as entitlements_completed_scheduled,\n        CAST(entitlements_completed_scheduled AS DECIMAL) / entitlements_limit as percent_entitlements_redeemed,\n        LEAST(\n            CAST(entitlements_completed_scheduled AS DECIMAL) / entitlements_pacing_count,\n            1\n        ) as percent_entitlements_redeemed_paced,\n        fs.first_emplify_score,\n        les.last_emplify_score,\n        les.surveys_sent as last_emplify_surveys_sent_cnt,\n        les.surveys_completed as last_emplify_surveys_completed_cnt,\n        les.response_rate as last_emplify_response_rate\n    FROM\n        \"snowdb\".\"prod\".\"arr_daily\" ad\n        JOIN \"snowdb\".\"prod\".\"products\" p on p.product_id = ad.product_id\n        LEFT JOIN ext.sfdc_account sf on left(sf.id, 15) = left(ad.sfdc_id, 15)\n        LEFT JOIN engage.organizations o on CASE\n            WHEN o.ff_company_id IS NOT NULL THEN o.ff_company_id = ad.company_id\n            ELSE left(o.salesforce_id, 15) = left(sf.id, 15)\n        END\n        JOIN engage.coaching_entitlements ce on ce.organization_id = o.id\n        AND ce.coaching_subscription_type_id = 10 -- breifing\n        AND ce.entitlements_limit > 0\n        LEFT JOIN engage.coaching_subscriptions cs on cs.organization_id = ce.organization_id\n        AND cs.coaching_subscription_type_id = ce.coaching_subscription_type_id\n        AND cs.started_at >= o.subscription_contract_date\n        AND cs.started_at < o.renewal_contract_date\n        AND cs.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions cse on cse.organization_id = ce.organization_id\n        AND cse.coaching_subscription_id = cs.id\n        AND cse.deleted_at IS NULL\n        AND cse.status IN ('completed', 'scheduled')\n        LEFT JOIN engage.people_roles pr on pr.organization_id = o.id\n        AND pr.id = o.primary_executive_advisor_id\n        LEFT JOIN engage.people pe on pe.id = pr.person_id\n        LEFT JOIN engage_last_survey ls on ls.organization_id = o.id\n        LEFT JOIN next_survey_scheduled ns on ns.organization_id = o.id\n        LEFT JOIN next_survey_scheduled_confirmed nsc on nsc.organization_id = o.id\n        LEFT JOIN first_emplify_score fs on fs.organization_id = o.id\n        LEFT JOIN last_emplify_score les on les.organization_id = o.id\n    WHERE\n        ad.date = (\n            SELECT\n                MAX(date)\n            FROM\n                \"snowdb\".\"prod\".\"arr_daily\"\n        )\n        AND p.product IN (\n            'Engage',\n            'Perform',\n            'Total Platform',\n            'Insights Briefing'\n        )\n    GROUP BY\n        ad.sfdc_id,\n        coalesce(\n            ad.company_id,\n            sf.x15five_com_company_id__c :: FLOAT :: INT\n        ),\n        o.id,\n        ce.entitlements_limit,\n        o.subscription_contract_date,\n        o.renewal_contract_date,\n        sf.company_segment__c,\n        sf.arr_zuora__c,\n        sf.csm_owner_name__c,\n        sf.industry,\n        sf.implementation_specialist_name__c,\n        o.name,\n        pe.first_name || ' ' || pe.last_name,\n        ls.last_survey_end_date,\n        ns.next_survey_scheduled,\n        nsc.next_survey_scheduled_confirmed,\n        o.employee_limit,\n        ad.arr,\n        fs.first_emplify_score,\n        les.last_emplify_score,\n        les.surveys_sent,\n        les.surveys_completed,\n        les.response_rate\n)\nSELECT\n    sfdc_id,\n    company_id,\n    emplify_id,\n    organization_name,\n    employee_limit,\n    company_segment,\n    sum(engage_product_arr) as engage_product_arr,\n    arr,\n    csm_name,\n    executive_advisor,\n    industry,\n    implementation_specialist,\n    subscription_contract_date,\n    renewal_contract_date,\n    last_survey_end_date,\n    next_survey_scheduled,\n    next_survey_scheduled_confirmed,\n    entitlements_limit,\n    subscription_month_cnt,\n    months_since_subscription_start,\n    entitlements_pacing_count,\n    entitlements_completed_scheduled,\n    percent_entitlements_redeemed,\n    percent_entitlements_redeemed_paced,\n    first_emplify_score,\n    last_emplify_score,\n    last_emplify_surveys_sent_cnt,\n    last_emplify_surveys_completed_cnt,\n    last_emplify_response_rate\nFROM\n    final\nGROUP BY\n    sfdc_id,\n    company_id,\n    emplify_id,\n    organization_name,\n    employee_limit,\n    company_segment,\n    arr,\n    csm_name,\n    executive_advisor,\n    industry,\n    implementation_specialist,\n    subscription_contract_date,\n    renewal_contract_date,\n    last_survey_end_date,\n    next_survey_scheduled,\n    next_survey_scheduled_confirmed,\n    entitlements_limit,\n    subscription_month_cnt,\n    months_since_subscription_start,\n    entitlements_pacing_count,\n    entitlements_completed_scheduled,\n    percent_entitlements_redeemed,\n    percent_entitlements_redeemed_paced,\n    first_emplify_score,\n    last_emplify_score,\n    last_emplify_surveys_sent_cnt,\n    last_emplify_surveys_completed_cnt,\n    last_emplify_response_rate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"exec_advisor_customer_details\""}, "model.main.sfdc_case_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith c90 as (\n    select count(sc.id)                                 as cases_count_90d,\n        sfdca.x15five_com_company_id__c::float::int     as company_id\n    from ext.sfdc_case sc\n    join ext.sfdc_account sfdca ON sfdca.id = sc.accountid\n    where sc.createddate < CURRENT_DATE\n      and sc.createddate > CURRENT_DATE - interval '91 days'\n    group by company_id\n),\n\nc30 as (\n    select count(sc.id)                                 as cases_count_30d,\n        sfdca.x15five_com_company_id__c::float::int     as company_id\n    from ext.sfdc_case sc\n    join ext.sfdc_account sfdca ON sfdca.id = sc.accountid\n    where sc.createddate < CURRENT_DATE\n      and sc.createddate > CURRENT_DATE - interval '31 days'\n    group by company_id\n),\n\nc1 as (\n    select count(sc.id)                                 as cases_count_1d,\n        sfdca.x15five_com_company_id__c::float::int     as company_id\n    from ext.sfdc_case sc\n    join ext.sfdc_account sfdca ON sfdca.id = sc.accountid\n    where sc.createddate < CURRENT_DATE\n      and sc.createddate > CURRENT_DATE - interval '2 days'\n    group by company_id\n)\n\n\nselect c90.company_id,\n       c90.cases_count_90d,\n       c30.cases_count_30d,\n       c1.cases_count_1d\nfrom c90\njoin c30 ON c30.company_id = c90.company_id\njoin c1  ON c1.company_id  = c90.company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "sfdc_case_agg"], "unique_id": "model.main.sfdc_case_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/sfdc_case_agg.sql", "original_file_path": "models/customer/sfdc_case_agg.sql", "name": "sfdc_case_agg", "alias": "sfdc_case_agg", "checksum": {"name": "sha256", "checksum": "3d2083502741c08c6b45acb7506e6848307f3fc884b2ccb6c182d2db27d4f2ad"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/sfdc_case_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.66485, "compiled_sql": "\n\nwith c90 as (\n    select count(sc.id)                                 as cases_count_90d,\n        sfdca.x15five_com_company_id__c::float::int     as company_id\n    from ext.sfdc_case sc\n    join ext.sfdc_account sfdca ON sfdca.id = sc.accountid\n    where sc.createddate < CURRENT_DATE\n      and sc.createddate > CURRENT_DATE - interval '91 days'\n    group by company_id\n),\n\nc30 as (\n    select count(sc.id)                                 as cases_count_30d,\n        sfdca.x15five_com_company_id__c::float::int     as company_id\n    from ext.sfdc_case sc\n    join ext.sfdc_account sfdca ON sfdca.id = sc.accountid\n    where sc.createddate < CURRENT_DATE\n      and sc.createddate > CURRENT_DATE - interval '31 days'\n    group by company_id\n),\n\nc1 as (\n    select count(sc.id)                                 as cases_count_1d,\n        sfdca.x15five_com_company_id__c::float::int     as company_id\n    from ext.sfdc_case sc\n    join ext.sfdc_account sfdca ON sfdca.id = sc.accountid\n    where sc.createddate < CURRENT_DATE\n      and sc.createddate > CURRENT_DATE - interval '2 days'\n    group by company_id\n)\n\n\nselect c90.company_id,\n       c90.cases_count_90d,\n       c30.cases_count_30d,\n       c1.cases_count_1d\nfrom c90\njoin c30 ON c30.company_id = c90.company_id\njoin c1  ON c1.company_id  = c90.company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"sfdc_case_agg\""}, "model.main.bsr_participants_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith bsr_ra90 as (\n\nselect\n  count(ra.id)                  as bsr_answers_90d,\n  count(distinct ra.user_id)    as bsr_users_in_answers_90d,\n  rc.company_id\n\nfrom pg.reviews_review\njoin pg.reviews_reviewpack on reviews_review.pack_id = reviews_reviewpack.id\njoin pg.reviews_answer ra ON ra.review_id = reviews_review.id\njoin pg.reviews_cycle rc ON rc.id = reviews_reviewpack.cycle_id\n\nwhere TRUE\n    AND reviews_review.submit_ts is not null -- actually submitted\n    AND reviews_review.delete_ts is null\n    AND reviews_reviewpack.delete_ts is null\n    AND rc.is_draft = false\n    AND ra.create_ts < CURRENT_DATE\n    AND ra.create_ts > CURRENT_DATE - interval '91 days'\ngroup by rc.company_id\n\n)\n\nselect bsr_answers_90d,\n       bsr_users_in_answers_90d,\n       company_id\nfrom bsr_ra90", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "bsr_participants_agg"], "unique_id": "model.main.bsr_participants_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/bsr_participants_agg.sql", "original_file_path": "models/customer/bsr_participants_agg.sql", "name": "bsr_participants_agg", "alias": "bsr_participants_agg", "checksum": {"name": "sha256", "checksum": "4a4441b3b759b7cfb1ce7b8447c0918afed89a919b7bf001f149ef777df02a1c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/bsr_participants_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6691828, "compiled_sql": "\n\nwith bsr_ra90 as (\n\nselect\n  count(ra.id)                  as bsr_answers_90d,\n  count(distinct ra.user_id)    as bsr_users_in_answers_90d,\n  rc.company_id\n\nfrom pg.reviews_review\njoin pg.reviews_reviewpack on reviews_review.pack_id = reviews_reviewpack.id\njoin pg.reviews_answer ra ON ra.review_id = reviews_review.id\njoin pg.reviews_cycle rc ON rc.id = reviews_reviewpack.cycle_id\n\nwhere TRUE\n    AND reviews_review.submit_ts is not null -- actually submitted\n    AND reviews_review.delete_ts is null\n    AND reviews_reviewpack.delete_ts is null\n    AND rc.is_draft = false\n    AND ra.create_ts < CURRENT_DATE\n    AND ra.create_ts > CURRENT_DATE - interval '91 days'\ngroup by rc.company_id\n\n)\n\nselect bsr_answers_90d,\n       bsr_users_in_answers_90d,\n       company_id\nfrom bsr_ra90", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bsr_participants_agg\""}, "model.main.bsr_cycles_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nWITH bsr90 as (\nSELECT count(id) AS bsr_cycles_90d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_90d,\n       company_id\nFROM {{ ref('cycle_comb') }}  rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '91 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n),\n\nbsr180 as (\nSELECT count(id) AS bsr_cycles_180d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_180d,\n       company_id\nFROM {{ ref('cycle_comb') }} rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '181 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n),\n\nbsr270 as (\nSELECT count(id) AS bsr_cycles_270d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_270d,\n       company_id\nFROM {{ ref('cycle_comb') }} rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '271 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n),\n\nbsr360 as (\nSELECT count(id) AS bsr_cycles_360d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_360d,\n       company_id\nFROM {{ ref('cycle_comb') }} rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '361 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n)\n\n\nSELECT  bsr360.company_id,\n        bsr360.bsr_cycles_360d,\n        bsr360.bsr_cycles_users_360d,\n        bsr270.bsr_cycles_270d,\n        bsr270.bsr_cycles_users_270d,\n        bsr180.bsr_cycles_180d,\n        bsr180.bsr_cycles_users_180d,\n        bsr90.bsr_cycles_90d,\n        bsr90.bsr_cycles_users_90d\nFROM bsr360\nLEFT JOIN bsr270 ON bsr360.company_id = bsr270.company_id\nLEFT JOIN bsr180 ON bsr360.company_id = bsr180.company_id\nLEFT JOIN bsr90 ON bsr360.company_id = bsr90.company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.cycle_comb", "model.main.cycle_comb", "model.main.cycle_comb", "model.main.cycle_comb"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "bsr_cycles_agg"], "unique_id": "model.main.bsr_cycles_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/bsr_cycles_agg.sql", "original_file_path": "models/customer/bsr_cycles_agg.sql", "name": "bsr_cycles_agg", "alias": "bsr_cycles_agg", "checksum": {"name": "sha256", "checksum": "0fa9bfc3af76ed7b34ca965b062fef148f7ccadf32babed0bd682d779a8d6bc8"}, "tags": [], "refs": [["cycle_comb"], ["cycle_comb"], ["cycle_comb"], ["cycle_comb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/bsr_cycles_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6715553, "compiled_sql": "\n\nWITH bsr90 as (\nSELECT count(id) AS bsr_cycles_90d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_90d,\n       company_id\nFROM \"snowdb\".\"analytics\".\"cycle_comb\"  rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '91 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n),\n\nbsr180 as (\nSELECT count(id) AS bsr_cycles_180d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_180d,\n       company_id\nFROM \"snowdb\".\"analytics\".\"cycle_comb\" rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '181 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n),\n\nbsr270 as (\nSELECT count(id) AS bsr_cycles_270d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_270d,\n       company_id\nFROM \"snowdb\".\"analytics\".\"cycle_comb\" rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '271 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n),\n\nbsr360 as (\nSELECT count(id) AS bsr_cycles_360d,\n       count(DISTINCT rc.creator_id) AS bsr_cycles_users_360d,\n       company_id\nFROM \"snowdb\".\"analytics\".\"cycle_comb\" rc\nWHERE   create_ts < CURRENT_DATE\n    AND create_ts > CURRENT_DATE - interval '361 days'\n    AND rc.is_draft = false\nGROUP BY company_id\n)\n\n\nSELECT  bsr360.company_id,\n        bsr360.bsr_cycles_360d,\n        bsr360.bsr_cycles_users_360d,\n        bsr270.bsr_cycles_270d,\n        bsr270.bsr_cycles_users_270d,\n        bsr180.bsr_cycles_180d,\n        bsr180.bsr_cycles_users_180d,\n        bsr90.bsr_cycles_90d,\n        bsr90.bsr_cycles_users_90d\nFROM bsr360\nLEFT JOIN bsr270 ON bsr360.company_id = bsr270.company_id\nLEFT JOIN bsr180 ON bsr360.company_id = bsr180.company_id\nLEFT JOIN bsr90 ON bsr360.company_id = bsr90.company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"bsr_cycles_agg\""}, "model.main.objectives_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nWITH oc30 AS\n  (SELECT count(oo.id) AS obj_created_30d,\n          count(DISTINCT user_id) AS obj_created_users_30d,\n          company_id\n   FROM pg.objectives_objective oo\n   WHERE TRUE\n     AND oo.create_ts < CURRENT_DATE\n     AND oo.create_ts > CURRENT_DATE - interval '31 days'\n     AND oo.delete_ts is null\n   GROUP BY company_id ),\n\noc90 AS\n  (SELECT count(oo.id) AS obj_created_90d,\n          count(DISTINCT user_id) AS obj_created_users_90d,\n          company_id\n   FROM pg.objectives_objective oo\n   WHERE TRUE\n     AND oo.create_ts < CURRENT_DATE\n     AND oo.create_ts > CURRENT_DATE - interval '91 days'\n     AND oo.delete_ts is null\n   GROUP BY company_id )\n\nSELECT oc30.company_id,\n       oc30.obj_created_30d,\n       oc30.obj_created_users_30d,\n       oc90.obj_created_90d,\n       oc90.obj_created_users_90d\nFROM oc90\nLEFT JOIN oc30 ON oc90.company_id = oc30.company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "objectives_agg"], "unique_id": "model.main.objectives_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/objectives_agg.sql", "original_file_path": "models/customer/objectives_agg.sql", "name": "objectives_agg", "alias": "objectives_agg", "checksum": {"name": "sha256", "checksum": "03c805a9a796563631b2bd8b705efe00191f38c71e8e3d29d0673ac92334768d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/objectives_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6740324, "compiled_sql": "\n\nWITH oc30 AS\n  (SELECT count(oo.id) AS obj_created_30d,\n          count(DISTINCT user_id) AS obj_created_users_30d,\n          company_id\n   FROM pg.objectives_objective oo\n   WHERE TRUE\n     AND oo.create_ts < CURRENT_DATE\n     AND oo.create_ts > CURRENT_DATE - interval '31 days'\n     AND oo.delete_ts is null\n   GROUP BY company_id ),\n\noc90 AS\n  (SELECT count(oo.id) AS obj_created_90d,\n          count(DISTINCT user_id) AS obj_created_users_90d,\n          company_id\n   FROM pg.objectives_objective oo\n   WHERE TRUE\n     AND oo.create_ts < CURRENT_DATE\n     AND oo.create_ts > CURRENT_DATE - interval '91 days'\n     AND oo.delete_ts is null\n   GROUP BY company_id )\n\nSELECT oc30.company_id,\n       oc30.obj_created_30d,\n       oc30.obj_created_users_30d,\n       oc90.obj_created_90d,\n       oc90.obj_created_users_90d\nFROM oc90\nLEFT JOIN oc30 ON oc90.company_id = oc30.company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"objectives_agg\""}, "model.main.highfives_given_alltime_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\n    SELECT  count(highfive_id) AS highfives_given_all_time,\n            count(DISTINCT user_id) AS highfives_users_given_all_time,\n            company_id\n    FROM {{ ref('highfive') }} hf\n    GROUP BY company_id, cloud", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.highfive"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "highfives_given_alltime_agg"], "unique_id": "model.main.highfives_given_alltime_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/highfives_given_alltime_agg.sql", "original_file_path": "models/customer/highfives_given_alltime_agg.sql", "name": "highfives_given_alltime_agg", "alias": "highfives_given_alltime_agg", "checksum": {"name": "sha256", "checksum": "3cbc4ab392b7d9783da1feecaca2f77810037810249dc1c6248bd73233756804"}, "tags": [], "refs": [["highfive"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/highfives_given_alltime_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.676399, "compiled_sql": "\n\n    SELECT  count(highfive_id) AS highfives_given_all_time,\n            count(DISTINCT user_id) AS highfives_users_given_all_time,\n            company_id\n    FROM \"snowdb\".\"prod\".\"highfive\" hf\n    GROUP BY company_id, cloud", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"highfives_given_alltime_agg\""}, "model.main.checkins_reviewers_agg": {"raw_sql": "{{ config(materialized = 'ephemeral', bind=False) }}\nSELECT\n    u.company_id,\n    COUNT(DISTINCT u.id) as reviewer_count\nFROM\n    {{ ref('ff_user') }} u\nWHERE\n    u.is_reviewer -- user is a reviewer\n    AND u.deactivate_ts IS NULL -- user is not deactivated\n    AND u.first_login_ts IS NOT NULL -- user has logged in at least once\nGROUP BY company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.ff_user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "checkins_reviewers_agg"], "unique_id": "model.main.checkins_reviewers_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/checkins_reviewers_agg.sql", "original_file_path": "models/customer/checkins_reviewers_agg.sql", "name": "checkins_reviewers_agg", "alias": "checkins_reviewers_agg", "checksum": {"name": "sha256", "checksum": "edca41650445dc390a5d81886b71eaa7a9410e7583e147353d25f179053cc61e"}, "tags": [], "refs": [["ff_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/checkins_reviewers_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "ephemeral", "bind": false}, "created_at": 1669795234.6788008, "compiled_sql": "\nSELECT\n    u.company_id,\n    COUNT(DISTINCT u.id) as reviewer_count\nFROM\n    \"snowdb\".\"stage\".\"ff_user\" u\nWHERE\n    u.is_reviewer -- user is a reviewer\n    AND u.deactivate_ts IS NULL -- user is not deactivated\n    AND u.first_login_ts IS NOT NULL -- user has logged in at least once\nGROUP BY company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.main.product_health": {"raw_sql": "{% if target.name == 'prod' %}\n  {{ config(materialized='table', bind=False) }}\n{% else %}\n  {{ config(materialized='view', bind=False) }}\n{% endif %}\n\nWITH companies as (\n    SELECT\n        a.date as date,\n        a.sfdc_id,\n        a.company_id,\n        CASE\n            WHEN a.segment_company is NULL THEN 'NULL'\n            ELSE a.segment_company\n        END as company_segment,\n        CASE\n            WHEN a.segment_customer is NULL THEN 'NULL'\n            ELSE a.segment_customer\n        END as customer_segment,\n        p.product,\n        p.product_group,\n        p.product_subgroup,\n        o.id as emplify_id,\n        CASE\n            WHEN o.is_ff_managed is NULL THEN 'NULL'\n            WHEN o.is_ff_managed = TRUE THEN 'True'\n            WHEN o.is_ff_managed = FALSE THEN 'False'\n        END as is_ff_managed,\n        a.seats\n    FROM\n        prod.arr_daily a\n        JOIN prod.products p on p.product_id = a.product_id\n        LEFT JOIN engage.organizations o on o.ff_company_id = a.company_id\n    WHERE\n        a.date >= '2022-01-01'\n        AND a.booked_not_active = False\n        AND product_group <> 'Miscellaneous'\n    GROUP BY\n        a.date,\n        a.segment_company,\n        a.segment_customer,\n        p.product,\n        p.product_group,\n        p.product_subgroup,\n        o.id,\n        is_ff_managed,\n        a.sfdc_id,\n        a.company_id,\n        a.seats\n    ORDER BY\n        a.date\n),\nbsr as (\n    -- set_up: paying customers with BSR that have bsr feature enabled\n    -- activation: paying customers with BSR that have initiated a bsr cycle\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.sfdc_id) as bsr_paying_company_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN cs.feature_bsr THEN cs.id\n            END\n        ) as bsr_enabled_company_count,\n.8 as bsr_setup_target,\n        COUNT(DISTINCT rc.company_id) as bsr_activated_company_count,\n.7 as bsr_activation_target\n    FROM\n        companies c\n        LEFT JOIN snapshots.customer_snapshot cs on cs.id = c.company_id\n        AND cs._date_ts :: DATE = c.date\n        LEFT JOIN pg.reviews_cycle rc on rc.company_id = c.company_id\n        AND trunc(rc.actual_start_ts) <= c.date -- initiated review cycle before or on date as \"activated\"\n        AND rc.delete_ts IS NULL\n        AND rc.actual_start_ts IS NOT NULL\n        AND rc.is_draft = FALSE\n    WHERE\n        c.product_group IN('Perform', '15Five Plus', 'Total Platform')\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nbsr_health as (\n    --- paying customers with BSR that have completed a BSR cycle with 70% or more users invited in looking back 365 days from date\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.company_id) as bsr_healthy_company_count\n    FROM\n        companies c\n        JOIN (\n            SELECT\n                rc.company_id,\n                rc.cycle_end_ts,\n                CASE\n                    WHEN COUNT(DISTINCT rp.user_id) / sp.value >=.7 THEN true\n                    else false\n                END as company_wide\n            FROM\n                pg.reviews_cycle rc\n                LEFT JOIN pg.reviews_reviewpack rp ON rp.cycle_id = rc.id\n                AND rp.delete_ts IS NULL\n                LEFT JOIN pg.stats_point sp ON sp.company_id = rc.company_id\n                AND date_trunc('week', cal_week_start_dt + interval '1 week') = date_trunc('week', rc.actual_start_ts)\n                AND sp.generator = 'TotalUsers'\n            WHERE\n                rc.delete_ts IS NULL\n                AND rc.actual_start_ts IS NOT NULL\n                AND rc.cycle_end_ts IS NOT NULL\n                AND rc.cycle_end_ts <= current_date --  cycle ended in the past, no future dates = completed\n            GROUP BY\n                rc.company_id,\n                rc.cycle_end_ts,\n                sp.value\n        ) cw on cw.company_id = c.company_id\n        AND trunc(cw.cycle_end_ts) <= c.date -- cycles ended prior to or on date\n        AND trunc(cw.cycle_end_ts) >= date_add('days', -365, c.date) -- cycle ended within 365 days prior to the date\n        AND company_wide\n    WHERE\n        c.product_group IN('Perform', '15Five Plus', 'Total Platform')\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nokr as (\n    -- set-up: customers paying for products with OKR and have objectives feature enabled\n    -- activated: customers paying for products with OKR and have created one or more company-wide OKR\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.company_id) as okr_paying_company_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN cs.feature_objectives_enabled THEN cs.id\n            END\n        ) as okr_enabled_company_count,\n        COUNT(DISTINCT oo.company_id) as okr_activated_company_count\n    FROM\n        companies c\n        LEFT JOIN snapshots.customer_snapshot cs on cs.id = c.company_id\n        AND cs._date_ts :: DATE = c.date\n        LEFT JOIN pg.objectives_objective oo on oo.company_id = c.company_id\n        AND trunc(oo.create_ts) <= c.date\n        AND oo.scope = 'company-wide'\n    WHERE\n        c.product_group IN('Focus', '15Five Plus', 'Total Platform')\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\n-- percent of activated users (have logged in, are not deactivated) that have engaged with an OKR in last 30 days\nokr_healthy as (\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT u.id) as activated_user_count,\n        COUNT(DISTINCT e.user_id) as users_engaged_with_okr_last30days_count,\n.5 as okr_healthy_target\n    FROM\n        companies c\n        LEFT JOIN pg.ff_user u on u.company_id = c.company_id\n        AND u.create_ts <= c.date -- created prior to date\n        AND (\n            u.deactivate_ts IS NULL -- not deactivated\n            OR u.deactivate_ts >= date_add('days', -31, c.date)\n        ) -- or deactivated in last 30 days from date\n        AND u.first_login_ts IS NOT NULL -- has logged in\n        AND u.first_login_ts <= c.date -- has logged in prior to the date\n        LEFT JOIN atomic.events e on e.user_id = u.id\n        AND e.collector_tstamp :: DATE >= '2021-12-01'\n        AND e.se_action IN (\n            'career_hub_objective_created',\n            'career_hub_objective_updated',\n            'comment_objective_feed_entry_commented',\n            'complete_objective',\n            'left_objective_feed_entry_comment_via_email',\n            'like_objective_comment',\n            'link_goal_to_objective',\n            'objective_bulk_marked_completed',\n            'objective_created',\n            'objective_edited',\n            'objective_followed',\n            'objective_marked_completed',\n            'objective_marked_uncompleted',\n            'objective_reactivate',\n            'objective_status_updated',\n            'unlink_goal_from_objective',\n            'update_objective_status',\n            'reactivate_objective',\n            'career_hub_key_result_comment_created',\n            'career_hub_key_result_updated',\n            'key_result_status_updated',\n            'update_key_result',\n            'user_assigns_key_result_for_user',\n            'user_creates_key_result_for_user',\n            'user_edits_key_result_linked_to_jira',\n            'user_edits_key_result_linked_to_salesforce',\n            'user_links_key_result_to_jira',\n            'user_links_key_result_to_salesforce',\n            'user_unassigns_key_result_from_user',\n            'user_updates_key_result_for_user'\n        )\n        AND app_id Ilike 'production%'\n    WHERE\n        c.product_group IN('Focus', '15Five Plus', 'Total Platform') --zuora products with OKR\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\ncompany_reviewers as (\n    --to be used for the denominator for checkin healthy usage\n    SELECT\n        c.date as date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        SUM(cs.reviewer_count) as reviewer_count\n    FROM\n        companies c\n        JOIN snapshots.customer_snapshot cs on c.company_id = cs.id -- zuora customers\n        AND c.date = cs._date_ts :: DATE\n    WHERE\n        c.product_group IN (\n            '15Five Basic',\n            '15Five Plus',\n            'Focus',\n            'Perform',\n            'Total Platform'\n        ) -- products with checkins\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\ncheckin as (\n    --set up: of companies that purchased products that include check-ins, how many have check-ins feature enabled?\n    --activation: of companies that purchased products that include checkin-ins, how many have reviewed at least one check in?\n    --healthy: of companies that purchased products that include check-ins, what percent of reviewer users have reviewed a check-in 28 day lookback?\n    SELECT\n        co.date as date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed,\n        COUNT(DISTINCT co.sfdc_id) as checkin_paying_company_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN feature_checkins_enabled THEN cs.id\n            END\n        ) as checkin_enabled_company_count,\n.95 as checkin_setup_target,\n        COUNT(\n            DISTINCT CASE\n                WHEN ci.reviewed_by_id IS NOT NULL THEN u.company_id\n            END\n        ) as checkin_company_activated_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN reviewed_ts >= date_add('days', -28, co.date)\n                AND reviewed_ts <= co.date THEN ci.reviewed_by_id\n            END\n        ) AS reviewer_reviewed_checkin_28d_count\n    FROM\n        companies co\n        LEFT JOIN snapshots.customer_snapshot cs on cs.id = co.company_id\n        AND cs._date_ts = co.date\n        JOIN pg.ff_company c on c.id = co.company_id\n        JOIN pg.ff_user u on u.company_id = c.id\n        LEFT JOIN pg.report ci on ci.reviewed_by_id = u.id -- can't join on ci.company_id because many null instances, re-eval with prod table available\n        AND ci.reviewed_ts <= co.date\n        AND ci.submit_ts IS NOT NULL\n        AND ci.reviewed_ts IS NOT NULL\n        AND ci.is_example = FALSE\n        AND ci.is_example_support = FALSE\n        AND ci.reviewed_ts >= c.converted_to_paying_ts -- exclude trial data\n    WHERE\n        co.product_group IN (\n            '15Five Basic',\n            '15Five Plus',\n            'Focus',\n            'Perform',\n            'Total Platform'\n        ) -- products with checkins\n    GROUP BY\n        co.date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed\n    ORDER BY\n        co.date\n),\ntransform_coaching as (\n    --set-up: of companies that have purchased Transform Coaching services, how many have an entitlement assigned?\n    --activation: of companies that have purchased Transform Coaching services,what percent have scheduled or completed one or more coaching sessions??\n    SELECT\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed,\n        COUNT(DISTINCT tc.sfdc_id) as companies_purchased_transform_coaching,\n        COUNT(DISTINCT cs.organization_id) as transform_coaching_orgs_set_up_count,\n.95 as transform_coaching_set_up_target,\n        COUNT(DISTINCT css.organization_id) as transform_coaching_activated_org_count,\n.9 as transform_coaching_activation_target\n    FROM\n        companies tc\n        LEFT JOIN engage.coaching_entitlements ce on ce.organization_id = tc.emplify_id\n        AND ce.entitlements_limit > 0\n        AND ce.coaching_subscription_type_id IN (7, 8, 11, 13)\n        LEFT JOIN engage.coaching_subscriptions cs on cs.organization_id = ce.organization_id\n        AND cs.coaching_subscription_type_id = ce.coaching_subscription_type_id\n        AND cs.deleted_at IS NULL\n        AND trunc(cs.started_at) <= tc.date -- subscription started on or before date\n        LEFT JOIN engage.coaching_sessions css on css.organization_id = ce.organization_id\n        AND css.coaching_subscription_id = cs.id\n        AND css.status IN ('scheduled', 'completed')\n        AND (\n            trunc(css.started_at) <= tc.date\n            OR (\n                css.status = 'scheduled'\n                and trunc(css.started_at) > tc.date\n            )\n        )\n    WHERE\n        tc.product IN (\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription',\n            'Performance Accelerator Live'\n        )\n    GROUP BY\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed\n    ORDER BY\n        tc.date\n),\ntransform_coaching_health as (\n    -- percent of participants assigned to active subscriptions attended a completed coaching session in the last 30 days\n    SELECT\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed,\n        COUNT(DISTINCT csp.person_id) as transform_coaching_subscription_participants,\n        COUNT(DISTINCT cssp.person_id) as transform_coaching_session_particpants_30d_cnt\n    FROM\n        companies tc\n        JOIN engage.coaching_subscriptions cs on cs.organization_id = tc.emplify_id\n        AND cs.coaching_subscription_type_id IN (7, 8, 11, 13) -- Leah and Andrew asked to limit to these\n        AND cs.deleted_at IS NULL\n        AND trunc(cs.started_at) <= tc.date -- subscription started on or before date\n        AND (\n            trunc(cs.ended_at) > tc.date\n            or cs.ended_at IS NULL\n        ) -- subscription active on date\n        JOIN engage.coaching_subscription_participants csp on csp.coaching_subscription_id = cs.id\n        LEFT JOIN engage.coaching_sessions css on css.organization_id = cs.organization_id\n        AND css.coaching_subscription_id = cs.id\n        AND trunc(css.started_at) >= dateadd('days', -30, tc.date)\n        AND trunc(css.ended_at) <= tc.date -- sessions in last 30 days of date\n        AND css.status = 'completed'\n        ANd css.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions_participants cssp on cssp.coaching_session_id = css.id\n        ANd cssp.person_id = csp.person_id\n    WHERE\n        tc.product IN (\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription',\n            'Performance Accelerator Live'\n        )\n    GROUP BY\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed\n    ORDER BY\n        tc.date\n),\ntransform_online_seats as (\n    -- needed for transform online healthy denominator\n    SELECT\n        ts.date,\n        ts.company_segment,\n        ts.customer_segment,\n        ts.is_ff_managed,\n        SUM(ts.seats) as transform_online_purchased_seats\n    FROM\n        companies ts\n    WHERE\n        ts.product_subgroup = 'Transform - Online'\n    GROUP BY\n        ts.date,\n        ts.company_segment,\n        ts.customer_segment,\n        ts.is_ff_managed\n    ORDER BY\n        ts.date\n),\ntransform_online as (\n    ---set-up: of companies who purchased a product that includes transform online access, how many companies have created a transform users?\n    --activation: of companies who purchased a product that includes transform online access, how many companies have one or more user that has sso'd into skilljar?\n    -- healthy: What percent of Transform Online purchased seats (zuora billing) have an SSO into Skilljar event in last 30 days?\n    SELECT\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed,\n        COUNT(DISTINCT sfdc_id) as companies_purchased_transform_online,\n        COUNT(\n            DISTINCT CASE\n                WHEN tu.user_id IS NOT NULL THEN u.company_id\n            END\n        ) as transform_online_companies_set_up_count,\n.95 as transform_online_set_up_target,\n        COUNT(\n            DISTINCT CASE\n                WHEN e.user_id IS NOT NULL THEN u.company_id\n            END\n        ) as transform_online_companies_activated,\n.9 as transform_online_activation_target,\n        COUNT(\n            DISTINCT CASE\n                WHEN e.user_id IS NOT NULL\n                AND e.collector_tstamp :: DATE >= date_add('days', -30, tc.date)\n                AND e.collector_tstamp :: DATE <= tc.date THEN e.user_id\n            END\n        ) as transfom_users_sso_skilljar_last_30d,\n.8 as transform_online_healthy_target\n    FROM\n        companies tc\n        LEFT JOIN pg.ff_company c on c.id = tc.company_id\n        LEFT JOIN pg.ff_user u on u.company_id = c.id\n        LEFT JOIN pg.transform_transformuser tu on tu.user_id = u.id\n        AND trunc(tu.create_ts) <= tc.date\n        LEFT JOIN atomic.events e on e.user_id = u.id\n        and e.se_action = 'transform_manager_accelerator_skilljar_sso_login'\n        and e.app_id ILIKE 'production%'\n        AND e.collector_tstamp :: DATE <= tc.date\n    WHERE\n        tc.product_subgroup = 'Transform - Online'\n    GROUP BY\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed\n    ORDER BY\n        tc.date\n),\nuser_management_set_up as (\n    -- set-up: --  % of companies that (have added an employee to 15FIve within the first 30 days) / (Trailing 90 days of companies that purchased 15Five)\n    --healthy -- of companies that converted to paying in last 90 days, how many companies updated one or more user within the last 30 days?\n    SELECT\n        co.date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed,\n        COUNT(DISTINCT c.id) as company_converted_to_paying_90d_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN user_count > 0 THEN c.id\n            END\n        ) as company_created_user_first_30d_count,\n.8 as user_management_setup_target,\n        COUNT(DISTINCT sa.company_id) as companies_updated_users_last_30d_count,\n.8 user_management_healthy_target\n    FROM\n        companies co\n        JOIN pg.ff_company c on c.id = co.company_id\n        AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, date) --- companies converted last 90 days\n        AND trunc(c.converted_to_paying_ts) <= date\n        LEFT JOIN (\n            SELECT\n                u.company_id,\n                u.create_ts,\n                count(u.id) as user_count\n            FROM\n                pg.ff_company c\n                JOIN pg.ff_user u on u.company_id = c.id\n                AND trunc(u.create_ts) <= date_add('days', 30, trunc(c.converted_to_paying_ts))\n                AND u.create_ts > c.converted_to_paying_ts\n            GROUP BY\n                u.company_id,\n                u.create_ts\n        ) as u on u.company_id = c.id\n        AND trunc(c.create_ts) <= co.date\n        LEFT JOIN pg.securityauditevent sa on sa.company_id = c.id\n        AND trunc(sa.create_ts) >= date_add('days', -30, co.date)\n        AND trunc(sa.create_ts) <= co.date\n        AND sa.type in (\n            'user.created_no_actor',\n            'user.created_was_deactivated',\n            'user.deactivate',\n            'user.deactivated_no_actor',\n            'user.hr_admin',\n            'user.invite',\n            'user.invite_canceled',\n            'user.invite_extended',\n            'user.ousted',\n            'user.reactivate',\n            'user.reactivated_no_actor',\n            'user.reinvite',\n            'user.role_added',\n            'user.role_removed',\n            'vacations.add_user',\n            'vacations.delete_user',\n            'vacations.edit_user',\n            'people_attribute.create',\n            'group_types.changed',\n            'group_types.create',\n            'group_types.delete',\n            'group_types.name_changed',\n            'groups.add_member',\n            'groups.admin_changed',\n            'groups.create',\n            'groups.delete',\n            'groups.move_objectives',\n            'groups.name_changed',\n            'groups.remove_member'\n        )\n    GROUP BY\n        co.date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed\n),\nuser_management_activated as (\n    --- 0f companies who bought 15Five in the last 90 days,\n    -- what is the % of purchased seats that have been activated (user has logged in and not deactivated) in the first 90 days?\n    SELECT\n        zs.date,\n        zs.company_segment,\n        zs.customer_segment,\n        zs.is_ff_managed,\n.4 as user_management_activated_target,\n        SUM(zs.seats) as purchased_seats_companies_converted_last_90d,\n        SUM(activated_user_count) as activated_users_companies_converted_last_90d\n    FROM\n        (\n            SELECT\n                z.date,\n                z.company_id,\n                z.company_segment,\n                z.customer_segment,\n                z.is_ff_managed,\n                MAX(z.seats) as seats,\n                COUNT(DISTINCT u.id) as activated_user_count\n            FROM\n                pg.ff_company c\n                JOIN companies z on z.company_id = c.id\n                AND z.product_subgroup NOT IN ('Transform - Coaching', 'Miscellaneous') -- all product except transform coaching\n                LEFT JOIN pg.ff_user u on u.company_id = z.company_id\n                AND u.first_login_ts IS NOT NULL -- has logged in\n                AND u.invite_status = 'active' -- active status\n                AND first_login_ts <= converted_to_paying_ts + interval '90 days' -- user activated in first 90 days\n                AND first_login_ts <= z.date\n                AND (\n                    u.deactivate_ts IS NULL\n                    OR u.deactivate_ts > z.date\n                ) -- not deactivated on date\n            WHERE\n                trunc(c.converted_to_paying_ts) >= date_add('days', -90, z.date)\n                AND trunc(c.converted_to_paying_ts) <= z.date\n            GROUP BY\n                z.company_id,\n                z.date,\n                z.is_ff_managed,\n                z.company_segment,\n                z.customer_segment\n            ORDER BY\n                z.company_id,\n                z.date\n        ) zs\n    GROUP BY\n        zs.date,\n        zs.company_segment,\n        zs.customer_segment,\n        zs.is_ff_managed\n    ORDER BY\n        zs.date\n),\nengage_setup as (\n    --set-up: of companies who purchased products that include engage, how many have created a campaign (deleted and test included)\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.sfdc_id) as engage_paying_company_count,\n        COUNT(DISTINCT ec.organization_id) as engage_enabled_company_count,\n.7 as engage_setup_target\n    FROM\n        companies c\n        LEFT JOIN engage.organizations o on CASE\n            WHEN o.ff_company_id IS NOT NULL THEN o.ff_company_id = c.company_id\n            ELSE left(o.salesforce_id, 15) = left(c.sfdc_id, 15)\n        END\n        LEFT JOIN engage.campaigns ec on ec.organization_id = o.id\n        AND trunc(ec.created_at) <= c.date -- engage campaign created on or before date\n    WHERE\n        c.product_group IN ('Engage', 'Perform', 'Total Platform') -- products that include engage\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nengage_activation as (\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT ec.organization_id) as engage_activated_company_count,\n        -- initiated a campaign at any time in lifetime\n        count(\n            DISTINCT CASE\n                WHEN ec.ended_at >= date_add('days', -365, c.date)\n                AND ec.ended_at <= c.date THEN ec.organization_id\n            END\n        ) as engage_healthy_company_count -- engage survey completed last 365 days\n    FROM\n        companies c\n        LEFT JOIN engage.organizations o on CASE\n            WHEN o.ff_company_id IS NOT NULL THEN o.ff_company_id = c.company_id\n            ELSE left(o.salesforce_id, 15) = left(c.sfdc_id, 15)\n        END\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = o.id\n        AND trunc(ec.started_at) <= c.date -- engage campaign initiated on or before date\n        AND ec.status IN ('finished', 'inprogress')\n        AND (\n            ec.quarterly_survey_count > 0\n            or ec.topic_based_survey_count > 0\n        ) -- survey types 1,5\n    WHERE\n        c.product_group IN ('Engage', 'Perform', 'Total Platform') -- products that include Engage\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nhr_lifecycle_activated as (\n    -- \"Successfully launched their first major use case (BSR, Engage, Objectives, or Transform) within their first Quarter.\n    -- % Companies with (at least one SKU activated D90) / (Trailing 90 days of companies that purchased 15Five)\n    SELECT\n        hr.date,\n        hr.customer_segment,\n        hr.company_segment,\n        hr.is_ff_managed,\n        COUNT(DISTINCT hr.company_id) as hr_lifecycle_activated_company_count\n    FROM\n        (\n            --companies initiated a BSR cycle in first quarter\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= date\n                JOIN pg.reviews_cycle rc on rc.company_id = co.company_id\n                AND trunc(rc.actual_start_ts) <= co.date -- initiated review cycle before or on date as \"activated\"\n                AND trunc(rc.actual_start_ts) <= converted_to_paying_ts + interval '90 days' -- initiated review cycle in first quarter\n                AND rc.delete_ts IS NULL\n                AND rc.actual_start_ts IS NOT NULL\n                AND rc.cycle_end_ts IS NOT NULL\n                AND rc.is_draft = FALSE\n            UNION\n            ---companies iniatiated an engage survey first 90 days (limited currently to those with a 15five id and converted_to_paying_ts)\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= date\n                JOIN engage.organizations o ON o.ff_company_id = co.company_id\n                JOIN prod.engage_campaigns ec on ec.organization_id = o.id\n                AND trunc(ec.started_at) <= co.date -- engage campaign initiated on or before date\n                AND trunc(ec.started_at) <= converted_to_paying_ts + interval '90 days' -- initiated a survey in first quarter\n                AND ec.status IN ('finished', 'inprogress')\n                AND (\n                    ec.topic_based_survey_count > 0\n                    or ec.quarterly_survey_count > 0\n                )\n            UNION\n            ---  companies created a company-wide objective in first quarter\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, co.date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= co.date\n                JOIN pg.objectives_objective oo on oo.company_id = co.company_id\n                AND trunc(oo.create_ts) <= co.date\n                AND trunc(oo.create_ts) <= converted_to_paying_ts + interval '90 days' -- created company wide objective first quearter\n                AND oo.scope = 'company-wide'\n            UNION\n            -- companies that have a Transform session within first quarter (limited to those with 15Five id)\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, co.date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= co.date\n                JOIN engage.organizations o on o.ff_company_id = co.company_id\n                JOIN engage.coaching_subscriptions cs on cs.organization_id = o.id\n                AND cs.coaching_subscription_type_id IN (7, 8, 11, 13)\n                AND cs.deleted_at IS NULL\n                AND trunc(cs.started_at) <= co.date\n                JOIN engage.coaching_sessions css on css.organization_id = o.id\n                AND css.coaching_subscription_id = cs.id\n                AND trunc(css.started_at) <= co.date\n                AND trunc(css.started_at) <= converted_to_paying_ts + interval '90 days' -- initiated coaching session first quarter\n                AND css.status IN ('scheduled', 'completed')\n            UNION\n            --- companies who have registered a Transform user in first quarter\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, co.date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= co.date\n                JOIN pg.ff_user u on u.company_id = c.id\n                JOIN pg.transform_transformuser tu on tu.user_id = u.id\n                AND tu.is_active\n                AND trunc(tu.create_ts) <= co.date\n                AND trunc(tu.create_ts) <= converted_to_paying_ts + interval '90 days' -- registered a transform user in first quarter\n        ) as hr\n    GROUP BY\n        hr.date,\n        hr.customer_segment,\n        hr.company_segment,\n        hr.is_ff_managed\n    ORDER BY\n        hr.date\n),\npaying_company_count as (\n    SELECT\n        a.date as date,\n        a.company_segment,\n        a.customer_segment,\n        a.is_ff_managed,\n        COUNT(DISTINCT a.sfdc_id) as total_paying_companies\n    FROM\n        companies a\n    GROUP BY\n        a.date,\n        a.company_segment,\n        a.customer_segment,\n        is_ff_managed\n    ORDER BY\n        a.date\n)\nSELECT\n    pc.date,\n    pc.company_segment as segment_company,\n    pc.customer_segment as segment_customer,\n    pc.is_ff_managed,\n    pc.total_paying_companies,\n    um.company_converted_to_paying_90d_count,\n    um.company_created_user_first_30d_count,\n    um.user_management_setup_target,\n    um.user_management_healthy_target,\n    uma.user_management_activated_target,\n    uma.purchased_seats_companies_converted_last_90d,\n    uma.activated_users_companies_converted_last_90d,\n    um.companies_updated_users_last_30d_count,\n    bsr.bsr_paying_company_count,\n    bsr.bsr_enabled_company_count,\n.8 as bsr_purchased_target,\n    bsr_setup_target,\n    bsr.bsr_activated_company_count,\n    bsr_activation_target,\n    bh.bsr_healthy_company_count,\n.6 as bsr_healthy_target,\n    okr_paying_company_count,\n    okr_enabled_company_count,\n    --would need okr setup target\n    okr_activated_company_count,\n    --     would need okr activation target\n    oh.activated_user_count,\n    oh.users_engaged_with_okr_last30days_count,\n    oh.okr_healthy_target,\n    ci.checkin_paying_company_count,\n    ci.checkin_enabled_company_count,\n    ci.checkin_setup_target,\n    ci.checkin_company_activated_count,\n    --would need checkin activation target\n    cr.reviewer_count,\n    ci.reviewer_reviewed_checkin_28d_count,\n    --     would need checkin healthy target\n    es.engage_paying_company_count,\n    es.engage_enabled_company_count,\n.5 as engage_purchased_target,\n    ea.engage_activated_company_count,\n    es.engage_setup_target,\n.5 as engage_activation_target,\n    ea.engage_healthy_company_count,\n.4 as engage_healthy_target,\n    t.companies_purchased_transform_coaching,\n    t.transform_coaching_orgs_set_up_count,\n    t.transform_coaching_set_up_target,\n    t.transform_coaching_activated_org_count,\n    t.transform_coaching_activation_target,\n    tt.companies_purchased_transform_online,\n    tt.transform_online_companies_set_up_count,\n    tt.transform_online_set_up_target,\n    tt.transform_online_companies_activated,\n    tt.transform_online_activation_target,\n    ts.transform_online_purchased_seats,\n    tt.transfom_users_sso_skilljar_last_30d,\n    tt.transform_online_healthy_target,\n    hra.hr_lifecycle_activated_company_count,\n.70 as hr_lifecycle_activation_target,\n    tch.transform_coaching_subscription_participants,\n    tch.transform_coaching_session_particpants_30d_cnt,\n.8 as transform_coaching_health_target\nFROM\n    paying_company_count pc\n    LEFT JOIN bsr as bsr on bsr.date = pc.date\n    AND bsr.customer_segment = pc.customer_segment\n    AND bsr.company_segment = pc.company_segment\n    AND bsr.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN bsr_health bh on bh.date = pc.date\n    AND bh.customer_segment = pc.customer_segment\n    AND bh.company_segment = pc.company_segment\n    AND bh.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN okr as okr on okr.date = pc.date\n    AND okr.customer_segment = pc.customer_segment\n    AND okr.company_segment = pc.company_segment\n    AND okr.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN okr_healthy oh on oh.date = pc.date\n    AND oh.customer_segment = pc.customer_segment\n    AND oh.company_segment = pc.company_segment\n    AND oh.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN checkin ci on ci.date = pc.date\n    AND ci.customer_segment = pc.customer_segment\n    AND ci.company_segment = pc.company_segment\n    AND ci.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_coaching t on t.date = pc.date\n    AND t.customer_segment = pc.customer_segment\n    AND t.company_segment = pc.company_segment\n    AND t.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_online_seats ts on ts.date = pc.date\n    AND ts.customer_segment = pc.customer_segment\n    AND ts.company_segment = pc.company_segment\n    AND ts.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_online tt on tt.date = pc.date\n    AND tt.customer_segment = pc.customer_segment\n    AND tt.company_segment = pc.company_segment\n    AND tt.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN user_management_set_up um on um.date = pc.date\n    AND um.customer_segment = pc.customer_segment\n    AND um.company_segment = pc.company_segment\n    AND um.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN user_management_activated uma on uma.date = pc.date\n    AND uma.customer_segment = pc.customer_segment\n    AND uma.company_segment = pc.company_segment\n    AND uma.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN engage_setup es on es.date = pc.date\n    AND es.customer_segment = pc.customer_segment\n    AND es.company_segment = pc.company_segment\n    AND es.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN engage_activation ea on ea.date = pc.date\n    AND ea.customer_segment = pc.customer_segment\n    AND ea.company_segment = pc.company_segment\n    AND ea.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN company_reviewers cr on cr.date = pc.date\n    AND cr.customer_segment = pc.customer_segment\n    AND cr.company_segment = pc.company_segment\n    AND cr.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN hr_lifecycle_activated hra on hra.date = pc.date\n    AND hra.customer_segment = pc.customer_segment\n    AND hra.company_segment = pc.company_segment\n    AND hra.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_coaching_health tch on tch.date = pc.date\n    AND tch.customer_segment = pc.customer_segment\n    AND tch.company_segment = pc.company_segment\n    AND tch.is_ff_managed = pc.is_ff_managed\nORDER BY\n    date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "product_health"], "unique_id": "model.main.product_health", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/product_health.sql", "original_file_path": "models/customer/product_health.sql", "name": "product_health", "alias": "product_health", "checksum": {"name": "sha256", "checksum": "06bb4438b92286d361bd80cc169cfb666efb4666f691c2eb0092149791d911ab"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/product_health.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "table", "bind": false}, "created_at": 1669795234.6814256, "compiled_sql": "\n  \n\n\nWITH companies as (\n    SELECT\n        a.date as date,\n        a.sfdc_id,\n        a.company_id,\n        CASE\n            WHEN a.segment_company is NULL THEN 'NULL'\n            ELSE a.segment_company\n        END as company_segment,\n        CASE\n            WHEN a.segment_customer is NULL THEN 'NULL'\n            ELSE a.segment_customer\n        END as customer_segment,\n        p.product,\n        p.product_group,\n        p.product_subgroup,\n        o.id as emplify_id,\n        CASE\n            WHEN o.is_ff_managed is NULL THEN 'NULL'\n            WHEN o.is_ff_managed = TRUE THEN 'True'\n            WHEN o.is_ff_managed = FALSE THEN 'False'\n        END as is_ff_managed,\n        a.seats\n    FROM\n        prod.arr_daily a\n        JOIN prod.products p on p.product_id = a.product_id\n        LEFT JOIN engage.organizations o on o.ff_company_id = a.company_id\n    WHERE\n        a.date >= '2022-01-01'\n        AND a.booked_not_active = False\n        AND product_group <> 'Miscellaneous'\n    GROUP BY\n        a.date,\n        a.segment_company,\n        a.segment_customer,\n        p.product,\n        p.product_group,\n        p.product_subgroup,\n        o.id,\n        is_ff_managed,\n        a.sfdc_id,\n        a.company_id,\n        a.seats\n    ORDER BY\n        a.date\n),\nbsr as (\n    -- set_up: paying customers with BSR that have bsr feature enabled\n    -- activation: paying customers with BSR that have initiated a bsr cycle\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.sfdc_id) as bsr_paying_company_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN cs.feature_bsr THEN cs.id\n            END\n        ) as bsr_enabled_company_count,\n.8 as bsr_setup_target,\n        COUNT(DISTINCT rc.company_id) as bsr_activated_company_count,\n.7 as bsr_activation_target\n    FROM\n        companies c\n        LEFT JOIN snapshots.customer_snapshot cs on cs.id = c.company_id\n        AND cs._date_ts :: DATE = c.date\n        LEFT JOIN pg.reviews_cycle rc on rc.company_id = c.company_id\n        AND trunc(rc.actual_start_ts) <= c.date -- initiated review cycle before or on date as \"activated\"\n        AND rc.delete_ts IS NULL\n        AND rc.actual_start_ts IS NOT NULL\n        AND rc.is_draft = FALSE\n    WHERE\n        c.product_group IN('Perform', '15Five Plus', 'Total Platform')\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nbsr_health as (\n    --- paying customers with BSR that have completed a BSR cycle with 70% or more users invited in looking back 365 days from date\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.company_id) as bsr_healthy_company_count\n    FROM\n        companies c\n        JOIN (\n            SELECT\n                rc.company_id,\n                rc.cycle_end_ts,\n                CASE\n                    WHEN COUNT(DISTINCT rp.user_id) / sp.value >=.7 THEN true\n                    else false\n                END as company_wide\n            FROM\n                pg.reviews_cycle rc\n                LEFT JOIN pg.reviews_reviewpack rp ON rp.cycle_id = rc.id\n                AND rp.delete_ts IS NULL\n                LEFT JOIN pg.stats_point sp ON sp.company_id = rc.company_id\n                AND date_trunc('week', cal_week_start_dt + interval '1 week') = date_trunc('week', rc.actual_start_ts)\n                AND sp.generator = 'TotalUsers'\n            WHERE\n                rc.delete_ts IS NULL\n                AND rc.actual_start_ts IS NOT NULL\n                AND rc.cycle_end_ts IS NOT NULL\n                AND rc.cycle_end_ts <= current_date --  cycle ended in the past, no future dates = completed\n            GROUP BY\n                rc.company_id,\n                rc.cycle_end_ts,\n                sp.value\n        ) cw on cw.company_id = c.company_id\n        AND trunc(cw.cycle_end_ts) <= c.date -- cycles ended prior to or on date\n        AND trunc(cw.cycle_end_ts) >= date_add('days', -365, c.date) -- cycle ended within 365 days prior to the date\n        AND company_wide\n    WHERE\n        c.product_group IN('Perform', '15Five Plus', 'Total Platform')\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nokr as (\n    -- set-up: customers paying for products with OKR and have objectives feature enabled\n    -- activated: customers paying for products with OKR and have created one or more company-wide OKR\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.company_id) as okr_paying_company_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN cs.feature_objectives_enabled THEN cs.id\n            END\n        ) as okr_enabled_company_count,\n        COUNT(DISTINCT oo.company_id) as okr_activated_company_count\n    FROM\n        companies c\n        LEFT JOIN snapshots.customer_snapshot cs on cs.id = c.company_id\n        AND cs._date_ts :: DATE = c.date\n        LEFT JOIN pg.objectives_objective oo on oo.company_id = c.company_id\n        AND trunc(oo.create_ts) <= c.date\n        AND oo.scope = 'company-wide'\n    WHERE\n        c.product_group IN('Focus', '15Five Plus', 'Total Platform')\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\n-- percent of activated users (have logged in, are not deactivated) that have engaged with an OKR in last 30 days\nokr_healthy as (\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT u.id) as activated_user_count,\n        COUNT(DISTINCT e.user_id) as users_engaged_with_okr_last30days_count,\n.5 as okr_healthy_target\n    FROM\n        companies c\n        LEFT JOIN pg.ff_user u on u.company_id = c.company_id\n        AND u.create_ts <= c.date -- created prior to date\n        AND (\n            u.deactivate_ts IS NULL -- not deactivated\n            OR u.deactivate_ts >= date_add('days', -31, c.date)\n        ) -- or deactivated in last 30 days from date\n        AND u.first_login_ts IS NOT NULL -- has logged in\n        AND u.first_login_ts <= c.date -- has logged in prior to the date\n        LEFT JOIN atomic.events e on e.user_id = u.id\n        AND e.collector_tstamp :: DATE >= '2021-12-01'\n        AND e.se_action IN (\n            'career_hub_objective_created',\n            'career_hub_objective_updated',\n            'comment_objective_feed_entry_commented',\n            'complete_objective',\n            'left_objective_feed_entry_comment_via_email',\n            'like_objective_comment',\n            'link_goal_to_objective',\n            'objective_bulk_marked_completed',\n            'objective_created',\n            'objective_edited',\n            'objective_followed',\n            'objective_marked_completed',\n            'objective_marked_uncompleted',\n            'objective_reactivate',\n            'objective_status_updated',\n            'unlink_goal_from_objective',\n            'update_objective_status',\n            'reactivate_objective',\n            'career_hub_key_result_comment_created',\n            'career_hub_key_result_updated',\n            'key_result_status_updated',\n            'update_key_result',\n            'user_assigns_key_result_for_user',\n            'user_creates_key_result_for_user',\n            'user_edits_key_result_linked_to_jira',\n            'user_edits_key_result_linked_to_salesforce',\n            'user_links_key_result_to_jira',\n            'user_links_key_result_to_salesforce',\n            'user_unassigns_key_result_from_user',\n            'user_updates_key_result_for_user'\n        )\n        AND app_id Ilike 'production%'\n    WHERE\n        c.product_group IN('Focus', '15Five Plus', 'Total Platform') --zuora products with OKR\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\ncompany_reviewers as (\n    --to be used for the denominator for checkin healthy usage\n    SELECT\n        c.date as date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        SUM(cs.reviewer_count) as reviewer_count\n    FROM\n        companies c\n        JOIN snapshots.customer_snapshot cs on c.company_id = cs.id -- zuora customers\n        AND c.date = cs._date_ts :: DATE\n    WHERE\n        c.product_group IN (\n            '15Five Basic',\n            '15Five Plus',\n            'Focus',\n            'Perform',\n            'Total Platform'\n        ) -- products with checkins\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\ncheckin as (\n    --set up: of companies that purchased products that include check-ins, how many have check-ins feature enabled?\n    --activation: of companies that purchased products that include checkin-ins, how many have reviewed at least one check in?\n    --healthy: of companies that purchased products that include check-ins, what percent of reviewer users have reviewed a check-in 28 day lookback?\n    SELECT\n        co.date as date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed,\n        COUNT(DISTINCT co.sfdc_id) as checkin_paying_company_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN feature_checkins_enabled THEN cs.id\n            END\n        ) as checkin_enabled_company_count,\n.95 as checkin_setup_target,\n        COUNT(\n            DISTINCT CASE\n                WHEN ci.reviewed_by_id IS NOT NULL THEN u.company_id\n            END\n        ) as checkin_company_activated_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN reviewed_ts >= date_add('days', -28, co.date)\n                AND reviewed_ts <= co.date THEN ci.reviewed_by_id\n            END\n        ) AS reviewer_reviewed_checkin_28d_count\n    FROM\n        companies co\n        LEFT JOIN snapshots.customer_snapshot cs on cs.id = co.company_id\n        AND cs._date_ts = co.date\n        JOIN pg.ff_company c on c.id = co.company_id\n        JOIN pg.ff_user u on u.company_id = c.id\n        LEFT JOIN pg.report ci on ci.reviewed_by_id = u.id -- can't join on ci.company_id because many null instances, re-eval with prod table available\n        AND ci.reviewed_ts <= co.date\n        AND ci.submit_ts IS NOT NULL\n        AND ci.reviewed_ts IS NOT NULL\n        AND ci.is_example = FALSE\n        AND ci.is_example_support = FALSE\n        AND ci.reviewed_ts >= c.converted_to_paying_ts -- exclude trial data\n    WHERE\n        co.product_group IN (\n            '15Five Basic',\n            '15Five Plus',\n            'Focus',\n            'Perform',\n            'Total Platform'\n        ) -- products with checkins\n    GROUP BY\n        co.date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed\n    ORDER BY\n        co.date\n),\ntransform_coaching as (\n    --set-up: of companies that have purchased Transform Coaching services, how many have an entitlement assigned?\n    --activation: of companies that have purchased Transform Coaching services,what percent have scheduled or completed one or more coaching sessions??\n    SELECT\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed,\n        COUNT(DISTINCT tc.sfdc_id) as companies_purchased_transform_coaching,\n        COUNT(DISTINCT cs.organization_id) as transform_coaching_orgs_set_up_count,\n.95 as transform_coaching_set_up_target,\n        COUNT(DISTINCT css.organization_id) as transform_coaching_activated_org_count,\n.9 as transform_coaching_activation_target\n    FROM\n        companies tc\n        LEFT JOIN engage.coaching_entitlements ce on ce.organization_id = tc.emplify_id\n        AND ce.entitlements_limit > 0\n        AND ce.coaching_subscription_type_id IN (7, 8, 11, 13)\n        LEFT JOIN engage.coaching_subscriptions cs on cs.organization_id = ce.organization_id\n        AND cs.coaching_subscription_type_id = ce.coaching_subscription_type_id\n        AND cs.deleted_at IS NULL\n        AND trunc(cs.started_at) <= tc.date -- subscription started on or before date\n        LEFT JOIN engage.coaching_sessions css on css.organization_id = ce.organization_id\n        AND css.coaching_subscription_id = cs.id\n        AND css.status IN ('scheduled', 'completed')\n        AND (\n            trunc(css.started_at) <= tc.date\n            OR (\n                css.status = 'scheduled'\n                and trunc(css.started_at) > tc.date\n            )\n        )\n    WHERE\n        tc.product IN (\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription',\n            'Performance Accelerator Live'\n        )\n    GROUP BY\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed\n    ORDER BY\n        tc.date\n),\ntransform_coaching_health as (\n    -- percent of participants assigned to active subscriptions attended a completed coaching session in the last 30 days\n    SELECT\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed,\n        COUNT(DISTINCT csp.person_id) as transform_coaching_subscription_participants,\n        COUNT(DISTINCT cssp.person_id) as transform_coaching_session_particpants_30d_cnt\n    FROM\n        companies tc\n        JOIN engage.coaching_subscriptions cs on cs.organization_id = tc.emplify_id\n        AND cs.coaching_subscription_type_id IN (7, 8, 11, 13) -- Leah and Andrew asked to limit to these\n        AND cs.deleted_at IS NULL\n        AND trunc(cs.started_at) <= tc.date -- subscription started on or before date\n        AND (\n            trunc(cs.ended_at) > tc.date\n            or cs.ended_at IS NULL\n        ) -- subscription active on date\n        JOIN engage.coaching_subscription_participants csp on csp.coaching_subscription_id = cs.id\n        LEFT JOIN engage.coaching_sessions css on css.organization_id = cs.organization_id\n        AND css.coaching_subscription_id = cs.id\n        AND trunc(css.started_at) >= dateadd('days', -30, tc.date)\n        AND trunc(css.ended_at) <= tc.date -- sessions in last 30 days of date\n        AND css.status = 'completed'\n        ANd css.deleted_at IS NULL\n        LEFT JOIN engage.coaching_sessions_participants cssp on cssp.coaching_session_id = css.id\n        ANd cssp.person_id = csp.person_id\n    WHERE\n        tc.product IN (\n            'Manager Accelerator Hybrid',\n            'Manager Accelerator Subscription',\n            'Performance Accelerator Live'\n        )\n    GROUP BY\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed\n    ORDER BY\n        tc.date\n),\ntransform_online_seats as (\n    -- needed for transform online healthy denominator\n    SELECT\n        ts.date,\n        ts.company_segment,\n        ts.customer_segment,\n        ts.is_ff_managed,\n        SUM(ts.seats) as transform_online_purchased_seats\n    FROM\n        companies ts\n    WHERE\n        ts.product_subgroup = 'Transform - Online'\n    GROUP BY\n        ts.date,\n        ts.company_segment,\n        ts.customer_segment,\n        ts.is_ff_managed\n    ORDER BY\n        ts.date\n),\ntransform_online as (\n    ---set-up: of companies who purchased a product that includes transform online access, how many companies have created a transform users?\n    --activation: of companies who purchased a product that includes transform online access, how many companies have one or more user that has sso'd into skilljar?\n    -- healthy: What percent of Transform Online purchased seats (zuora billing) have an SSO into Skilljar event in last 30 days?\n    SELECT\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed,\n        COUNT(DISTINCT sfdc_id) as companies_purchased_transform_online,\n        COUNT(\n            DISTINCT CASE\n                WHEN tu.user_id IS NOT NULL THEN u.company_id\n            END\n        ) as transform_online_companies_set_up_count,\n.95 as transform_online_set_up_target,\n        COUNT(\n            DISTINCT CASE\n                WHEN e.user_id IS NOT NULL THEN u.company_id\n            END\n        ) as transform_online_companies_activated,\n.9 as transform_online_activation_target,\n        COUNT(\n            DISTINCT CASE\n                WHEN e.user_id IS NOT NULL\n                AND e.collector_tstamp :: DATE >= date_add('days', -30, tc.date)\n                AND e.collector_tstamp :: DATE <= tc.date THEN e.user_id\n            END\n        ) as transfom_users_sso_skilljar_last_30d,\n.8 as transform_online_healthy_target\n    FROM\n        companies tc\n        LEFT JOIN pg.ff_company c on c.id = tc.company_id\n        LEFT JOIN pg.ff_user u on u.company_id = c.id\n        LEFT JOIN pg.transform_transformuser tu on tu.user_id = u.id\n        AND trunc(tu.create_ts) <= tc.date\n        LEFT JOIN atomic.events e on e.user_id = u.id\n        and e.se_action = 'transform_manager_accelerator_skilljar_sso_login'\n        and e.app_id ILIKE 'production%'\n        AND e.collector_tstamp :: DATE <= tc.date\n    WHERE\n        tc.product_subgroup = 'Transform - Online'\n    GROUP BY\n        tc.date,\n        tc.company_segment,\n        tc.customer_segment,\n        tc.is_ff_managed\n    ORDER BY\n        tc.date\n),\nuser_management_set_up as (\n    -- set-up: --  % of companies that (have added an employee to 15FIve within the first 30 days) / (Trailing 90 days of companies that purchased 15Five)\n    --healthy -- of companies that converted to paying in last 90 days, how many companies updated one or more user within the last 30 days?\n    SELECT\n        co.date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed,\n        COUNT(DISTINCT c.id) as company_converted_to_paying_90d_count,\n        COUNT(\n            DISTINCT CASE\n                WHEN user_count > 0 THEN c.id\n            END\n        ) as company_created_user_first_30d_count,\n.8 as user_management_setup_target,\n        COUNT(DISTINCT sa.company_id) as companies_updated_users_last_30d_count,\n.8 user_management_healthy_target\n    FROM\n        companies co\n        JOIN pg.ff_company c on c.id = co.company_id\n        AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, date) --- companies converted last 90 days\n        AND trunc(c.converted_to_paying_ts) <= date\n        LEFT JOIN (\n            SELECT\n                u.company_id,\n                u.create_ts,\n                count(u.id) as user_count\n            FROM\n                pg.ff_company c\n                JOIN pg.ff_user u on u.company_id = c.id\n                AND trunc(u.create_ts) <= date_add('days', 30, trunc(c.converted_to_paying_ts))\n                AND u.create_ts > c.converted_to_paying_ts\n            GROUP BY\n                u.company_id,\n                u.create_ts\n        ) as u on u.company_id = c.id\n        AND trunc(c.create_ts) <= co.date\n        LEFT JOIN pg.securityauditevent sa on sa.company_id = c.id\n        AND trunc(sa.create_ts) >= date_add('days', -30, co.date)\n        AND trunc(sa.create_ts) <= co.date\n        AND sa.type in (\n            'user.created_no_actor',\n            'user.created_was_deactivated',\n            'user.deactivate',\n            'user.deactivated_no_actor',\n            'user.hr_admin',\n            'user.invite',\n            'user.invite_canceled',\n            'user.invite_extended',\n            'user.ousted',\n            'user.reactivate',\n            'user.reactivated_no_actor',\n            'user.reinvite',\n            'user.role_added',\n            'user.role_removed',\n            'vacations.add_user',\n            'vacations.delete_user',\n            'vacations.edit_user',\n            'people_attribute.create',\n            'group_types.changed',\n            'group_types.create',\n            'group_types.delete',\n            'group_types.name_changed',\n            'groups.add_member',\n            'groups.admin_changed',\n            'groups.create',\n            'groups.delete',\n            'groups.move_objectives',\n            'groups.name_changed',\n            'groups.remove_member'\n        )\n    GROUP BY\n        co.date,\n        co.company_segment,\n        co.customer_segment,\n        co.is_ff_managed\n),\nuser_management_activated as (\n    --- 0f companies who bought 15Five in the last 90 days,\n    -- what is the % of purchased seats that have been activated (user has logged in and not deactivated) in the first 90 days?\n    SELECT\n        zs.date,\n        zs.company_segment,\n        zs.customer_segment,\n        zs.is_ff_managed,\n.4 as user_management_activated_target,\n        SUM(zs.seats) as purchased_seats_companies_converted_last_90d,\n        SUM(activated_user_count) as activated_users_companies_converted_last_90d\n    FROM\n        (\n            SELECT\n                z.date,\n                z.company_id,\n                z.company_segment,\n                z.customer_segment,\n                z.is_ff_managed,\n                MAX(z.seats) as seats,\n                COUNT(DISTINCT u.id) as activated_user_count\n            FROM\n                pg.ff_company c\n                JOIN companies z on z.company_id = c.id\n                AND z.product_subgroup NOT IN ('Transform - Coaching', 'Miscellaneous') -- all product except transform coaching\n                LEFT JOIN pg.ff_user u on u.company_id = z.company_id\n                AND u.first_login_ts IS NOT NULL -- has logged in\n                AND u.invite_status = 'active' -- active status\n                AND first_login_ts <= converted_to_paying_ts + interval '90 days' -- user activated in first 90 days\n                AND first_login_ts <= z.date\n                AND (\n                    u.deactivate_ts IS NULL\n                    OR u.deactivate_ts > z.date\n                ) -- not deactivated on date\n            WHERE\n                trunc(c.converted_to_paying_ts) >= date_add('days', -90, z.date)\n                AND trunc(c.converted_to_paying_ts) <= z.date\n            GROUP BY\n                z.company_id,\n                z.date,\n                z.is_ff_managed,\n                z.company_segment,\n                z.customer_segment\n            ORDER BY\n                z.company_id,\n                z.date\n        ) zs\n    GROUP BY\n        zs.date,\n        zs.company_segment,\n        zs.customer_segment,\n        zs.is_ff_managed\n    ORDER BY\n        zs.date\n),\nengage_setup as (\n    --set-up: of companies who purchased products that include engage, how many have created a campaign (deleted and test included)\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT c.sfdc_id) as engage_paying_company_count,\n        COUNT(DISTINCT ec.organization_id) as engage_enabled_company_count,\n.7 as engage_setup_target\n    FROM\n        companies c\n        LEFT JOIN engage.organizations o on CASE\n            WHEN o.ff_company_id IS NOT NULL THEN o.ff_company_id = c.company_id\n            ELSE left(o.salesforce_id, 15) = left(c.sfdc_id, 15)\n        END\n        LEFT JOIN engage.campaigns ec on ec.organization_id = o.id\n        AND trunc(ec.created_at) <= c.date -- engage campaign created on or before date\n    WHERE\n        c.product_group IN ('Engage', 'Perform', 'Total Platform') -- products that include engage\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nengage_activation as (\n    SELECT\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed,\n        COUNT(DISTINCT ec.organization_id) as engage_activated_company_count,\n        -- initiated a campaign at any time in lifetime\n        count(\n            DISTINCT CASE\n                WHEN ec.ended_at >= date_add('days', -365, c.date)\n                AND ec.ended_at <= c.date THEN ec.organization_id\n            END\n        ) as engage_healthy_company_count -- engage survey completed last 365 days\n    FROM\n        companies c\n        LEFT JOIN engage.organizations o on CASE\n            WHEN o.ff_company_id IS NOT NULL THEN o.ff_company_id = c.company_id\n            ELSE left(o.salesforce_id, 15) = left(c.sfdc_id, 15)\n        END\n        LEFT JOIN prod.engage_campaigns ec on ec.organization_id = o.id\n        AND trunc(ec.started_at) <= c.date -- engage campaign initiated on or before date\n        AND ec.status IN ('finished', 'inprogress')\n        AND (\n            ec.quarterly_survey_count > 0\n            or ec.topic_based_survey_count > 0\n        ) -- survey types 1,5\n    WHERE\n        c.product_group IN ('Engage', 'Perform', 'Total Platform') -- products that include Engage\n    GROUP BY\n        c.date,\n        c.company_segment,\n        c.customer_segment,\n        c.is_ff_managed\n    ORDER BY\n        c.date\n),\nhr_lifecycle_activated as (\n    -- \"Successfully launched their first major use case (BSR, Engage, Objectives, or Transform) within their first Quarter.\n    -- % Companies with (at least one SKU activated D90) / (Trailing 90 days of companies that purchased 15Five)\n    SELECT\n        hr.date,\n        hr.customer_segment,\n        hr.company_segment,\n        hr.is_ff_managed,\n        COUNT(DISTINCT hr.company_id) as hr_lifecycle_activated_company_count\n    FROM\n        (\n            --companies initiated a BSR cycle in first quarter\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= date\n                JOIN pg.reviews_cycle rc on rc.company_id = co.company_id\n                AND trunc(rc.actual_start_ts) <= co.date -- initiated review cycle before or on date as \"activated\"\n                AND trunc(rc.actual_start_ts) <= converted_to_paying_ts + interval '90 days' -- initiated review cycle in first quarter\n                AND rc.delete_ts IS NULL\n                AND rc.actual_start_ts IS NOT NULL\n                AND rc.cycle_end_ts IS NOT NULL\n                AND rc.is_draft = FALSE\n            UNION\n            ---companies iniatiated an engage survey first 90 days (limited currently to those with a 15five id and converted_to_paying_ts)\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= date\n                JOIN engage.organizations o ON o.ff_company_id = co.company_id\n                JOIN prod.engage_campaigns ec on ec.organization_id = o.id\n                AND trunc(ec.started_at) <= co.date -- engage campaign initiated on or before date\n                AND trunc(ec.started_at) <= converted_to_paying_ts + interval '90 days' -- initiated a survey in first quarter\n                AND ec.status IN ('finished', 'inprogress')\n                AND (\n                    ec.topic_based_survey_count > 0\n                    or ec.quarterly_survey_count > 0\n                )\n            UNION\n            ---  companies created a company-wide objective in first quarter\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, co.date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= co.date\n                JOIN pg.objectives_objective oo on oo.company_id = co.company_id\n                AND trunc(oo.create_ts) <= co.date\n                AND trunc(oo.create_ts) <= converted_to_paying_ts + interval '90 days' -- created company wide objective first quearter\n                AND oo.scope = 'company-wide'\n            UNION\n            -- companies that have a Transform session within first quarter (limited to those with 15Five id)\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, co.date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= co.date\n                JOIN engage.organizations o on o.ff_company_id = co.company_id\n                JOIN engage.coaching_subscriptions cs on cs.organization_id = o.id\n                AND cs.coaching_subscription_type_id IN (7, 8, 11, 13)\n                AND cs.deleted_at IS NULL\n                AND trunc(cs.started_at) <= co.date\n                JOIN engage.coaching_sessions css on css.organization_id = o.id\n                AND css.coaching_subscription_id = cs.id\n                AND trunc(css.started_at) <= co.date\n                AND trunc(css.started_at) <= converted_to_paying_ts + interval '90 days' -- initiated coaching session first quarter\n                AND css.status IN ('scheduled', 'completed')\n            UNION\n            --- companies who have registered a Transform user in first quarter\n            SELECT\n                DISTINCT co.date,\n                co.company_id,\n                co.customer_segment,\n                co.company_segment,\n                co.is_ff_managed\n            FROM\n                companies co\n                JOIN pg.ff_company c on c.id = co.company_id\n                AND trunc(c.converted_to_paying_ts) >= date_add('days', -90, co.date) --- companies converted last 90 days\n                AND trunc(c.converted_to_paying_ts) <= co.date\n                JOIN pg.ff_user u on u.company_id = c.id\n                JOIN pg.transform_transformuser tu on tu.user_id = u.id\n                AND tu.is_active\n                AND trunc(tu.create_ts) <= co.date\n                AND trunc(tu.create_ts) <= converted_to_paying_ts + interval '90 days' -- registered a transform user in first quarter\n        ) as hr\n    GROUP BY\n        hr.date,\n        hr.customer_segment,\n        hr.company_segment,\n        hr.is_ff_managed\n    ORDER BY\n        hr.date\n),\npaying_company_count as (\n    SELECT\n        a.date as date,\n        a.company_segment,\n        a.customer_segment,\n        a.is_ff_managed,\n        COUNT(DISTINCT a.sfdc_id) as total_paying_companies\n    FROM\n        companies a\n    GROUP BY\n        a.date,\n        a.company_segment,\n        a.customer_segment,\n        is_ff_managed\n    ORDER BY\n        a.date\n)\nSELECT\n    pc.date,\n    pc.company_segment as segment_company,\n    pc.customer_segment as segment_customer,\n    pc.is_ff_managed,\n    pc.total_paying_companies,\n    um.company_converted_to_paying_90d_count,\n    um.company_created_user_first_30d_count,\n    um.user_management_setup_target,\n    um.user_management_healthy_target,\n    uma.user_management_activated_target,\n    uma.purchased_seats_companies_converted_last_90d,\n    uma.activated_users_companies_converted_last_90d,\n    um.companies_updated_users_last_30d_count,\n    bsr.bsr_paying_company_count,\n    bsr.bsr_enabled_company_count,\n.8 as bsr_purchased_target,\n    bsr_setup_target,\n    bsr.bsr_activated_company_count,\n    bsr_activation_target,\n    bh.bsr_healthy_company_count,\n.6 as bsr_healthy_target,\n    okr_paying_company_count,\n    okr_enabled_company_count,\n    --would need okr setup target\n    okr_activated_company_count,\n    --     would need okr activation target\n    oh.activated_user_count,\n    oh.users_engaged_with_okr_last30days_count,\n    oh.okr_healthy_target,\n    ci.checkin_paying_company_count,\n    ci.checkin_enabled_company_count,\n    ci.checkin_setup_target,\n    ci.checkin_company_activated_count,\n    --would need checkin activation target\n    cr.reviewer_count,\n    ci.reviewer_reviewed_checkin_28d_count,\n    --     would need checkin healthy target\n    es.engage_paying_company_count,\n    es.engage_enabled_company_count,\n.5 as engage_purchased_target,\n    ea.engage_activated_company_count,\n    es.engage_setup_target,\n.5 as engage_activation_target,\n    ea.engage_healthy_company_count,\n.4 as engage_healthy_target,\n    t.companies_purchased_transform_coaching,\n    t.transform_coaching_orgs_set_up_count,\n    t.transform_coaching_set_up_target,\n    t.transform_coaching_activated_org_count,\n    t.transform_coaching_activation_target,\n    tt.companies_purchased_transform_online,\n    tt.transform_online_companies_set_up_count,\n    tt.transform_online_set_up_target,\n    tt.transform_online_companies_activated,\n    tt.transform_online_activation_target,\n    ts.transform_online_purchased_seats,\n    tt.transfom_users_sso_skilljar_last_30d,\n    tt.transform_online_healthy_target,\n    hra.hr_lifecycle_activated_company_count,\n.70 as hr_lifecycle_activation_target,\n    tch.transform_coaching_subscription_participants,\n    tch.transform_coaching_session_particpants_30d_cnt,\n.8 as transform_coaching_health_target\nFROM\n    paying_company_count pc\n    LEFT JOIN bsr as bsr on bsr.date = pc.date\n    AND bsr.customer_segment = pc.customer_segment\n    AND bsr.company_segment = pc.company_segment\n    AND bsr.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN bsr_health bh on bh.date = pc.date\n    AND bh.customer_segment = pc.customer_segment\n    AND bh.company_segment = pc.company_segment\n    AND bh.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN okr as okr on okr.date = pc.date\n    AND okr.customer_segment = pc.customer_segment\n    AND okr.company_segment = pc.company_segment\n    AND okr.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN okr_healthy oh on oh.date = pc.date\n    AND oh.customer_segment = pc.customer_segment\n    AND oh.company_segment = pc.company_segment\n    AND oh.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN checkin ci on ci.date = pc.date\n    AND ci.customer_segment = pc.customer_segment\n    AND ci.company_segment = pc.company_segment\n    AND ci.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_coaching t on t.date = pc.date\n    AND t.customer_segment = pc.customer_segment\n    AND t.company_segment = pc.company_segment\n    AND t.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_online_seats ts on ts.date = pc.date\n    AND ts.customer_segment = pc.customer_segment\n    AND ts.company_segment = pc.company_segment\n    AND ts.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_online tt on tt.date = pc.date\n    AND tt.customer_segment = pc.customer_segment\n    AND tt.company_segment = pc.company_segment\n    AND tt.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN user_management_set_up um on um.date = pc.date\n    AND um.customer_segment = pc.customer_segment\n    AND um.company_segment = pc.company_segment\n    AND um.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN user_management_activated uma on uma.date = pc.date\n    AND uma.customer_segment = pc.customer_segment\n    AND uma.company_segment = pc.company_segment\n    AND uma.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN engage_setup es on es.date = pc.date\n    AND es.customer_segment = pc.customer_segment\n    AND es.company_segment = pc.company_segment\n    AND es.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN engage_activation ea on ea.date = pc.date\n    AND ea.customer_segment = pc.customer_segment\n    AND ea.company_segment = pc.company_segment\n    AND ea.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN company_reviewers cr on cr.date = pc.date\n    AND cr.customer_segment = pc.customer_segment\n    AND cr.company_segment = pc.company_segment\n    AND cr.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN hr_lifecycle_activated hra on hra.date = pc.date\n    AND hra.customer_segment = pc.customer_segment\n    AND hra.company_segment = pc.company_segment\n    AND hra.is_ff_managed = pc.is_ff_managed\n    LEFT JOIN transform_coaching_health tch on tch.date = pc.date\n    AND tch.customer_segment = pc.customer_segment\n    AND tch.company_segment = pc.company_segment\n    AND tch.is_ff_managed = pc.is_ff_managed\nORDER BY\n    date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"product_health\""}, "model.main.users_agg": {"raw_sql": "{{ config(materialized='view', bind=False) }}\n\nwith us as (\n    select sum(case when u.is_reviewer = true then 1 end)  as users_reviewers_cnt,\n           sum(case when u.is_reviewer = false then 1 end) as users_reporters_cnt,\n           sum(case when u.is_company_admin = true then 1 end) as users_company_admin_cnt,\n           sum(case when COALESCE(u.reporting_period, c.reporting_period) = 'weekly' then 1 end)\n                as users_weekly_reporting_period_cnt,\n           sum(case when COALESCE(u.reporting_period, c.reporting_period) = 'biweekly' then 1 end)\n                as users_biweekly_reporting_period_cnt,\n           sum(case when COALESCE(u.reporting_period, c.reporting_period) = 'monthly' then 1 end)\n                as users_monthly_reporting_period_cnt,\n           u.company_id\n    from {{ ref('user_comb') }} u\n    join {{ ref('ff_company_comb') }} c ON c.id = u.company_id\n    where u.is_active\n      and u.invite_status = 'active'\n      and u.deactivate_ts IS NULL\n      and u.first_login_ts IS NOT NULL\n    group by u.company_id\n),\n\nflu1d as (\n    select count(u.id) as users_first_login_1d,\n           u.company_id\n    from {{ ref('user_comb') }} u\n    where u.first_login_ts <  CURRENT_DATE\n      and u.first_login_ts >  CURRENT_DATE - interval '2 day'\n    group by u.company_id\n),\n\nflu7d as (\n    select count(u.id) as users_first_login_7d,\n           u.company_id\n    from {{ ref('user_comb') }} u\n    where u.first_login_ts <  CURRENT_DATE\n      and u.first_login_ts >  CURRENT_DATE - interval '8 day'\n    group by u.company_id\n),\n\n\nflu30d as (\n    select count(u.id) as users_first_login_30d,\n           u.company_id\n    from {{ ref('user_comb') }} u\n    where u.first_login_ts <  CURRENT_DATE\n      and u.first_login_ts >  CURRENT_DATE - interval '31 day'\n    group by u.company_id\n),\n\ndu1d as (\n    select count(u.id) as users_deactivated_1d,\n           u.company_id\n    from {{ ref('user_comb') }} u\n    where u.deactivate_ts <  CURRENT_DATE\n      and u.deactivate_ts >  CURRENT_DATE - interval '2 day'\n    group by u.company_id\n),\n\ndu7d as (\n    select count(u.id) as users_deactivated_7d,\n           u.company_id\n    from {{ ref('user_comb') }} u\n    where u.deactivate_ts <  CURRENT_DATE\n      and u.deactivate_ts >  CURRENT_DATE - interval '8 day'\n    group by u.company_id\n),\n\ndu30d as (\n    select count(u.id) as users_deactivated_30d,\n           u.company_id\n    from {{ ref('user_comb') }} u\n    where u.deactivate_ts <  CURRENT_DATE\n      and u.deactivate_ts >  CURRENT_DATE - interval '31 day'\n    group by u.company_id\n)\n\n\nselect DISTINCT us.company_id,\n       us.users_reviewers_cnt,\n       us.users_reporters_cnt,\n       us.users_company_admin_cnt,\n       us.users_weekly_reporting_period_cnt,\n       us.users_biweekly_reporting_period_cnt,\n       us.users_monthly_reporting_period_cnt,\n       flu1d.users_first_login_1d,\n       flu7d.users_first_login_7d,\n       flu30d.users_first_login_30d,\n       du1d.users_deactivated_1d,\n       du7d.users_deactivated_7d,\n       du30d.users_deactivated_30d\nfrom us\nleft join flu1d  ON flu1d.company_id  = us.company_id\nleft join flu7d  ON flu7d.company_id  = us.company_id\nleft join flu30d ON flu30d.company_id = us.company_id\nleft join du1d   ON du1d.company_id   = us.company_id\nleft join du7d   ON du7d.company_id   = us.company_id\nleft join du30d  ON du30d.company_id  = us.company_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.main.user_comb", "model.main.ff_company_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "customer", "users_agg"], "unique_id": "model.main.users_agg", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer/users_agg.sql", "original_file_path": "models/customer/users_agg.sql", "name": "users_agg", "alias": "users_agg", "checksum": {"name": "sha256", "checksum": "2ecf94eeb3b484367557e79dc5e915985580adf25bada7a420b9be2cca9bf344"}, "tags": [], "refs": [["user_comb"], ["ff_company_comb"], ["user_comb"], ["user_comb"], ["user_comb"], ["user_comb"], ["user_comb"], ["user_comb"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/customer/users_agg.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "view", "bind": false}, "created_at": 1669795234.6874058, "compiled_sql": "\n\nwith us as (\n    select sum(case when u.is_reviewer = true then 1 end)  as users_reviewers_cnt,\n           sum(case when u.is_reviewer = false then 1 end) as users_reporters_cnt,\n           sum(case when u.is_company_admin = true then 1 end) as users_company_admin_cnt,\n           sum(case when COALESCE(u.reporting_period, c.reporting_period) = 'weekly' then 1 end)\n                as users_weekly_reporting_period_cnt,\n           sum(case when COALESCE(u.reporting_period, c.reporting_period) = 'biweekly' then 1 end)\n                as users_biweekly_reporting_period_cnt,\n           sum(case when COALESCE(u.reporting_period, c.reporting_period) = 'monthly' then 1 end)\n                as users_monthly_reporting_period_cnt,\n           u.company_id\n    from \"snowdb\".\"analytics\".\"user_comb\" u\n    join \"snowdb\".\"analytics\".\"ff_company_comb\" c ON c.id = u.company_id\n    where u.is_active\n      and u.invite_status = 'active'\n      and u.deactivate_ts IS NULL\n      and u.first_login_ts IS NOT NULL\n    group by u.company_id\n),\n\nflu1d as (\n    select count(u.id) as users_first_login_1d,\n           u.company_id\n    from \"snowdb\".\"analytics\".\"user_comb\" u\n    where u.first_login_ts <  CURRENT_DATE\n      and u.first_login_ts >  CURRENT_DATE - interval '2 day'\n    group by u.company_id\n),\n\nflu7d as (\n    select count(u.id) as users_first_login_7d,\n           u.company_id\n    from \"snowdb\".\"analytics\".\"user_comb\" u\n    where u.first_login_ts <  CURRENT_DATE\n      and u.first_login_ts >  CURRENT_DATE - interval '8 day'\n    group by u.company_id\n),\n\n\nflu30d as (\n    select count(u.id) as users_first_login_30d,\n           u.company_id\n    from \"snowdb\".\"analytics\".\"user_comb\" u\n    where u.first_login_ts <  CURRENT_DATE\n      and u.first_login_ts >  CURRENT_DATE - interval '31 day'\n    group by u.company_id\n),\n\ndu1d as (\n    select count(u.id) as users_deactivated_1d,\n           u.company_id\n    from \"snowdb\".\"analytics\".\"user_comb\" u\n    where u.deactivate_ts <  CURRENT_DATE\n      and u.deactivate_ts >  CURRENT_DATE - interval '2 day'\n    group by u.company_id\n),\n\ndu7d as (\n    select count(u.id) as users_deactivated_7d,\n           u.company_id\n    from \"snowdb\".\"analytics\".\"user_comb\" u\n    where u.deactivate_ts <  CURRENT_DATE\n      and u.deactivate_ts >  CURRENT_DATE - interval '8 day'\n    group by u.company_id\n),\n\ndu30d as (\n    select count(u.id) as users_deactivated_30d,\n           u.company_id\n    from \"snowdb\".\"analytics\".\"user_comb\" u\n    where u.deactivate_ts <  CURRENT_DATE\n      and u.deactivate_ts >  CURRENT_DATE - interval '31 day'\n    group by u.company_id\n)\n\n\nselect DISTINCT us.company_id,\n       us.users_reviewers_cnt,\n       us.users_reporters_cnt,\n       us.users_company_admin_cnt,\n       us.users_weekly_reporting_period_cnt,\n       us.users_biweekly_reporting_period_cnt,\n       us.users_monthly_reporting_period_cnt,\n       flu1d.users_first_login_1d,\n       flu7d.users_first_login_7d,\n       flu30d.users_first_login_30d,\n       du1d.users_deactivated_1d,\n       du7d.users_deactivated_7d,\n       du30d.users_deactivated_30d\nfrom us\nleft join flu1d  ON flu1d.company_id  = us.company_id\nleft join flu7d  ON flu7d.company_id  = us.company_id\nleft join flu30d ON flu30d.company_id = us.company_id\nleft join du1d   ON du1d.company_id   = us.company_id\nleft join du7d   ON du7d.company_id   = us.company_id\nleft join du30d  ON du30d.company_id  = us.company_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"users_agg\""}, "model.main.issue": {"raw_sql": "WITH issue_final as (\n    SELECT\n        id,\n        key,\n        json_extract_path_text(fields, 'status', 'statusCategory', 'key', true) as status,\n        json_extract_path_text(fields, 'created', true) as created_at,\n        json_extract_path_text(fields, 'customfield_10037', 'value', true) as priority,\n        json_extract_path_text(fields, 'resolutiondate', true) as resolved_at_raw,\n        json_extract_path_text(fields, 'project', 'id', true) as project_id,\n        CASE\n            WHEN resolved_at_raw LIKE '%-%' THEN resolved_at_raw :: timestamp\n            WHEN resolved_at_raw = '' THEN NULL\n            ELSE timestamp 'epoch' + CAST(resolved_at_raw AS BIGINT) / 1000 * interval '1 second'\n        END as resolved_at\n    FROM\n        stg_jira.issues\n)\nSELECT\n    id,\n    key,\n    status,\n    created_at,\n    priority,\n    resolved_at\nFROM\n    issue_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "jira", "fqn": ["main", "jira", "issue"], "unique_id": "model.main.issue", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "jira/issue.sql", "original_file_path": "models/jira/issue.sql", "name": "issue", "alias": "issue", "checksum": {"name": "sha256", "checksum": "f683ca5f6dd4c0ddf02eaf640374ab88b440d262d53b7e08165db0c824e6b862"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/jira/issue.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "jira", "bind": false}, "created_at": 1669795234.690191, "compiled_sql": "WITH issue_final as (\n    SELECT\n        id,\n        key,\n        json_extract_path_text(fields, 'status', 'statusCategory', 'key', true) as status,\n        json_extract_path_text(fields, 'created', true) as created_at,\n        json_extract_path_text(fields, 'customfield_10037', 'value', true) as priority,\n        json_extract_path_text(fields, 'resolutiondate', true) as resolved_at_raw,\n        json_extract_path_text(fields, 'project', 'id', true) as project_id,\n        CASE\n            WHEN resolved_at_raw LIKE '%-%' THEN resolved_at_raw :: timestamp\n            WHEN resolved_at_raw = '' THEN NULL\n            ELSE timestamp 'epoch' + CAST(resolved_at_raw AS BIGINT) / 1000 * interval '1 second'\n        END as resolved_at\n    FROM\n        stg_jira.issues\n)\nSELECT\n    id,\n    key,\n    status,\n    created_at,\n    priority,\n    resolved_at\nFROM\n    issue_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"jira\".\"issue\""}, "model.main.changelog": {"raw_sql": "select\n    id as changlog_id,\n    json_extract_path_text(author, 'emailAddress', true) as author,\n    issueid as issue_id,\n    created as created_at,\n    json_extract_path_text(\n        JSON_EXTRACT_ARRAY_ELEMENT_TEXT(items, seq.i),\n        'field'\n    ) as field_name,\n    json_extract_path_text(\n        JSON_EXTRACT_ARRAY_ELEMENT_TEXT(items, seq.i),\n        'fromString'\n    ) as from_value,\n    json_extract_path_text(\n        JSON_EXTRACT_ARRAY_ELEMENT_TEXT(items, seq.i),\n        'toString'\n    ) as to_value\nfrom\n    stg_jira.changelogs,\n    seq_0_to_10 as seq\nwhere\n    seq.i < JSON_ARRAY_LENGTH(items)\norder by\n    created_at,\n    issue_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "jira", "fqn": ["main", "jira", "changelog"], "unique_id": "model.main.changelog", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "jira/changelog.sql", "original_file_path": "models/jira/changelog.sql", "name": "changelog", "alias": "changelog", "checksum": {"name": "sha256", "checksum": "75c3d29c3fa6040e4208201336cba4c0f25e3465a90366cd0582801e60767f4a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/jira/changelog.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "jira", "bind": false}, "created_at": 1669795234.6931188, "compiled_sql": "select\n    id as changlog_id,\n    json_extract_path_text(author, 'emailAddress', true) as author,\n    issueid as issue_id,\n    created as created_at,\n    json_extract_path_text(\n        JSON_EXTRACT_ARRAY_ELEMENT_TEXT(items, seq.i),\n        'field'\n    ) as field_name,\n    json_extract_path_text(\n        JSON_EXTRACT_ARRAY_ELEMENT_TEXT(items, seq.i),\n        'fromString'\n    ) as from_value,\n    json_extract_path_text(\n        JSON_EXTRACT_ARRAY_ELEMENT_TEXT(items, seq.i),\n        'toString'\n    ) as to_value\nfrom\n    stg_jira.changelogs,\n    seq_0_to_10 as seq\nwhere\n    seq.i < JSON_ARRAY_LENGTH(items)\norder by\n    created_at,\n    issue_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"jira\".\"changelog\""}, "model.main.issue_transition": {"raw_sql": "select\n    id,\n    issueid as issue_id,\n    isinitial as is_initial,\n    name\nfrom\n    stg_jira.issue_transitions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "jira", "fqn": ["main", "jira", "issue_transition"], "unique_id": "model.main.issue_transition", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "jira/issue_transition.sql", "original_file_path": "models/jira/issue_transition.sql", "name": "issue_transition", "alias": "issue_transition", "checksum": {"name": "sha256", "checksum": "fef711bff86e03a47c5da191f2d4f792d6affe5c123a62fb40b0163208db5f4f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/jira/issue_transition.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "jira", "bind": false}, "created_at": 1669795234.6961532, "compiled_sql": "select\n    id,\n    issueid as issue_id,\n    isinitial as is_initial,\n    name\nfrom\n    stg_jira.issue_transitions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"jira\".\"issue_transition\""}, "model.main.project": {"raw_sql": "select\n    id,\n    name,\n    JSON_EXTRACT_ARRAY_ELEMENT_TEXT(projectkeys, 0) as key\nfrom\n    stg_jira.projects", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}, {"sql": "grant usage on schema {{ this.schema }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "jira", "fqn": ["main", "jira", "project"], "unique_id": "model.main.project", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "jira/project.sql", "original_file_path": "models/jira/project.sql", "name": "project", "alias": "project", "checksum": {"name": "sha256", "checksum": "a9e1445e2010c8c50bc01c135bca312bd10a94ddba8aded79f3271340cd3ba5f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/jira/project.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant usage on schema {{ this.schema }} to read_only"], "materialized": "table", "schema": "jira", "bind": false}, "created_at": 1669795234.6990557, "compiled_sql": "select\n    id,\n    name,\n    JSON_EXTRACT_ARRAY_ELEMENT_TEXT(projectkeys, 0) as key\nfrom\n    stg_jira.projects", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"jira\".\"project\""}, "snapshot.main.customer_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='snapshots',\n      unique_key=\"unique_key\",\n      strategy='timestamp',\n      updated_at='_date_ts'\n    )\n}}\n\n\nselect * \nfrom (\n  select\n    *,\n    COALESCE(id,0)::text || '-' || COALESCE(emplify_id,0::text)::text || '-' || COALESCE(transform_id,0::text)::text as unique_key,\n    row_number() over (partition by unique_key) as rn\n  from {{ ref('customer') }}\n)\nwhere rn = 1\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.main.customer"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "snapshots", "updated_at": "_date_ts", "post-hook": [], "pre-hook": []}, "database": "snowdb", "schema": "snapshots", "fqn": ["main", "customer_snapshot", "customer_snapshot"], "unique_id": "snapshot.main.customer_snapshot", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "customer_snapshot.sql", "original_file_path": "snapshots/customer_snapshot.sql", "name": "customer_snapshot", "alias": "customer_snapshot", "checksum": {"name": "sha256", "checksum": "6bb8617796d357735a3085d75b99ec51651d575d237aebb24f5e2c82abc8c480"}, "tags": [], "refs": [["customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "snapshots", "unique_key": "unique_key", "strategy": "timestamp", "updated_at": "_date_ts"}, "created_at": 1669795234.7082603, "compiled_sql": "\n\n\n\n\nselect * \nfrom (\n  select\n    *,\n    COALESCE(id,0)::text || '-' || COALESCE(emplify_id,0::text)::text || '-' || COALESCE(transform_id,0::text)::text as unique_key,\n    row_number() over (partition by unique_key) as rn\n  from \"snowdb\".\"analytics\".\"customer\"\n)\nwhere rn = 1\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"snapshots\".\"customer_snapshot\""}, "test.main.assert_all_zuora_records_present": {"raw_sql": "WITH zuora AS\n(\nSELECT\n    SUM(charge_sub.mrr) * 12 as arr\nFROM zuora.rateplancharge charge_sub\nJOIN zuora.rateplan plan_sub on charge_sub.rateplanid = plan_sub.id\nJOIN zuora.subscription subs_sub on plan_sub.subscriptionid = subs_sub.id\n    AND subs_sub.status NOT IN ('Draft', 'Expired')\nJOIN zuora.account account_sub on subs_sub.accountid = account_sub.id\nWHERE charge_sub.chargetype = 'Recurring'\n    AND charge_sub.effectivestartdate <> charge_sub.effectiveenddate\n    AND (dateadd(day,1,(SELECT MAX(date) FROM prod.arr_daily)) BETWEEN charge_sub.effectivestartdate AND DATEADD(second,-1,charge_sub.effectiveenddate)\n    OR charge_sub.effectivestartdate BETWEEN TRUNC(SYSDATE) AND TRUNC(dateadd(day,30,SYSDATE)))\n),\nprod AS\n(\nSELECT\n    SUM(arr) arr\nFROM prod.arr_daily\nWHERE date = (SELECT MAX(date) FROM prod.arr_daily)\n)\nSELECT\n    zuora.arr AS zuora,\n    prod.arr AS prod\nFROM zuora zuora\nJOIN prod prod ON 1 = 1 AND zuora.arr NOT BETWEEN prod.arr - (prod.arr * 0.015) AND prod.arr + (prod.arr * 0.015)", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "snowdb", "schema": "dbt_test__audit", "fqn": ["main", "assert_all_zuora_records_present"], "unique_id": "test.main.assert_all_zuora_records_present", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "assert_all_zuora_records_present.sql", "original_file_path": "tests/assert_all_zuora_records_present.sql", "name": "assert_all_zuora_records_present", "alias": "assert_all_zuora_records_present", "checksum": {"name": "sha256", "checksum": "24d285fbde65b980795442c62be90d14234c105a0e0022f7de76059ac5cc3552"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/tests/assert_all_zuora_records_present.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1669795234.7176363, "compiled_sql": "WITH zuora AS\n(\nSELECT\n    SUM(charge_sub.mrr) * 12 as arr\nFROM zuora.rateplancharge charge_sub\nJOIN zuora.rateplan plan_sub on charge_sub.rateplanid = plan_sub.id\nJOIN zuora.subscription subs_sub on plan_sub.subscriptionid = subs_sub.id\n    AND subs_sub.status NOT IN ('Draft', 'Expired')\nJOIN zuora.account account_sub on subs_sub.accountid = account_sub.id\nWHERE charge_sub.chargetype = 'Recurring'\n    AND charge_sub.effectivestartdate <> charge_sub.effectiveenddate\n    AND (dateadd(day,1,(SELECT MAX(date) FROM prod.arr_daily)) BETWEEN charge_sub.effectivestartdate AND DATEADD(second,-1,charge_sub.effectiveenddate)\n    OR charge_sub.effectivestartdate BETWEEN TRUNC(SYSDATE) AND TRUNC(dateadd(day,30,SYSDATE)))\n),\nprod AS\n(\nSELECT\n    SUM(arr) arr\nFROM prod.arr_daily\nWHERE date = (SELECT MAX(date) FROM prod.arr_daily)\n)\nSELECT\n    zuora.arr AS zuora,\n    prod.arr AS prod\nFROM zuora zuora\nJOIN prod prod ON 1 = 1 AND zuora.arr NOT BETWEEN prod.arr - (prod.arr * 0.015) AND prod.arr + (prod.arr * 0.015)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stl_explain": {"raw_sql": "select\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "stl_explain"], "unique_id": "model.redshift.stl_explain", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/stl_explain.sql", "original_file_path": "models/base/stl_explain.sql", "name": "stl_explain", "alias": "stl_explain", "checksum": {"name": "sha256", "checksum": "b0b93ae44126046ae6035dc99eaf7bd1077f67b9fabf6617aad954f5485529e7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/stl_explain.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7554808, "compiled_sql": "select\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_views": {"raw_sql": "select\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "pg_views"], "unique_id": "model.redshift.pg_views", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/pg_views.sql", "original_file_path": "models/base/pg_views.sql", "name": "pg_views", "alias": "pg_views", "checksum": {"name": "sha256", "checksum": "c7df6f10a6ff3efd1c74332fd7f6451b6aefb271dd4710a40d7c9b630f7526ae"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/pg_views.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7579942, "compiled_sql": "select\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stl_query": {"raw_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "stl_query"], "unique_id": "model.redshift.stl_query", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/stl_query.sql", "original_file_path": "models/base/stl_query.sql", "name": "stl_query", "alias": "stl_query", "checksum": {"name": "sha256", "checksum": "be05654f2603028c02a6cf55a585e2812f1193cfc5eeb5e4115e74d76e63878c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/stl_query.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7609336, "compiled_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stv_partitions": {"raw_sql": "select\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "stv_partitions"], "unique_id": "model.redshift.stv_partitions", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/stv_partitions.sql", "original_file_path": "models/base/stv_partitions.sql", "name": "stv_partitions", "alias": "stv_partitions", "checksum": {"name": "sha256", "checksum": "0adfaf4beb6df74660cf360622ab9d68b1ff0374c3b80d2b9ba6f0af1326af13"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/stv_partitions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7633417, "compiled_sql": "select\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_cost": {"raw_sql": "with stl_explain as (\n\n  select query_id, plannode from {{ref('stl_explain')}}\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.redshift.stl_explain"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "redshift_cost"], "unique_id": "model.redshift.redshift_cost", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/redshift_cost.sql", "original_file_path": "models/base/redshift_cost.sql", "name": "redshift_cost", "alias": "redshift_cost", "checksum": {"name": "sha256", "checksum": "9828e9a6ce80a8c8c59d5acfa10a31895f7404f5876f9891de83a53523639767"}, "tags": [], "refs": [["stl_explain"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/redshift_cost.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.765729, "compiled_sql": "with  __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n),stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stl_explain", "sql": " __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n)"}], "relation_name": null}, "model.redshift.stv_tbl_perm": {"raw_sql": "select\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "stv_tbl_perm"], "unique_id": "model.redshift.stv_tbl_perm", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/stv_tbl_perm.sql", "original_file_path": "models/base/stv_tbl_perm.sql", "name": "stv_tbl_perm", "alias": "stv_tbl_perm", "checksum": {"name": "sha256", "checksum": "b53a98cc6b043f0b1359439aec8c83acb314d682b7484564bd6a8f23168b157a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/stv_tbl_perm.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7681456, "compiled_sql": "select\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_user": {"raw_sql": "select\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "pg_user"], "unique_id": "model.redshift.pg_user", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/pg_user.sql", "original_file_path": "models/base/pg_user.sql", "name": "pg_user", "alias": "pg_user", "checksum": {"name": "sha256", "checksum": "43f9c11894915d879fe8bfb448b08608289341f00a23a79139fe8c1cdf4c62e2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/pg_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7705271, "compiled_sql": "select\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_attribute": {"raw_sql": "select\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "pg_attribute"], "unique_id": "model.redshift.pg_attribute", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/pg_attribute.sql", "original_file_path": "models/base/pg_attribute.sql", "name": "pg_attribute", "alias": "pg_attribute", "checksum": {"name": "sha256", "checksum": "dbb015e30883e1251ce2a7eb2618284098be30cdccc29e5a3237b0697371f20a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/pg_attribute.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7729561, "compiled_sql": "select\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_namespace": {"raw_sql": "select\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "pg_namespace"], "unique_id": "model.redshift.pg_namespace", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/pg_namespace.sql", "original_file_path": "models/base/pg_namespace.sql", "name": "pg_namespace", "alias": "pg_namespace", "checksum": {"name": "sha256", "checksum": "3ee3fc7af6eb6177bf5469353d8d64aa690df5841187ef181bd6c8878214ae09"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/pg_namespace.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7760236, "compiled_sql": "select\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_class": {"raw_sql": "select\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "pg_class"], "unique_id": "model.redshift.pg_class", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/pg_class.sql", "original_file_path": "models/base/pg_class.sql", "name": "pg_class", "alias": "pg_class", "checksum": {"name": "sha256", "checksum": "d48a780a073f51ac48e63cae7b1276b59a25ac9ad8c50a78b59002d3105cf9e8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/pg_class.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7784002, "compiled_sql": "select\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.svv_diskusage": {"raw_sql": "select\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "svv_diskusage"], "unique_id": "model.redshift.svv_diskusage", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/svv_diskusage.sql", "original_file_path": "models/base/svv_diskusage.sql", "name": "svv_diskusage", "alias": "svv_diskusage", "checksum": {"name": "sha256", "checksum": "bbe110bc79920bf2d341f4f866e3e08be75b0b4b0cf089c7387b998d2bd6b6b5"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/svv_diskusage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7807975, "compiled_sql": "select\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stv_blocklist": {"raw_sql": "select\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "stv_blocklist"], "unique_id": "model.redshift.stv_blocklist", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/stv_blocklist.sql", "original_file_path": "models/base/stv_blocklist.sql", "name": "stv_blocklist", "alias": "stv_blocklist", "checksum": {"name": "sha256", "checksum": "1961739a6349ab7f3c476acccb2412cab8fcc48d61b7943987d22be841d1cb35"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/stv_blocklist.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7831795, "compiled_sql": "select\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_depend": {"raw_sql": "select\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "pg_depend"], "unique_id": "model.redshift.pg_depend", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/pg_depend.sql", "original_file_path": "models/base/pg_depend.sql", "name": "pg_depend", "alias": "pg_depend", "checksum": {"name": "sha256", "checksum": "14c8f7a82df6a7a5db34f238173427193881500ace2155bf013d57e40a75f3ae"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/pg_depend.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7855654, "compiled_sql": "select\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.pg_tables": {"raw_sql": "select\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "pg_tables"], "unique_id": "model.redshift.pg_tables", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/pg_tables.sql", "original_file_path": "models/base/pg_tables.sql", "name": "pg_tables", "alias": "pg_tables", "checksum": {"name": "sha256", "checksum": "9a874bae17f49e9793550d35b67beaecfc82756dcb13af50e2987dad0d8d915a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/pg_tables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7879362, "compiled_sql": "select\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.stl_wlm_query": {"raw_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "base", "stl_wlm_query"], "unique_id": "model.redshift.stl_wlm_query", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "base/stl_wlm_query.sql", "original_file_path": "models/base/stl_wlm_query.sql", "name": "stl_wlm_query", "alias": "stl_wlm_query", "checksum": {"name": "sha256", "checksum": "778791758aa532d8d1590a54513e74677e48dd4a9111deed305cea72e13521db"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/base/stl_wlm_query.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.790974, "compiled_sql": "select\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_admin_queries": {"raw_sql": "with queries as (\n\n  select * from {{ref('stl_query')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n\n), cost as (\n\n  select * from {{ref('redshift_cost')}}\n\n), timings as (\n\n  select * from {{ref('stl_wlm_query')}}\n\n)\n\n\n\nselect\n\n  queries.query_id\n, queries.transaction_id\n, users.username::varchar\n\n, cost.starting_cost\n, cost.total_cost\n\n, queries.started_at\n, queries.finished_at\n\n, timings.queue_start_time\n, timings.queue_end_time\n, (timings.total_queue_time::float / 1000000.0) as total_queue_time_seconds\n\n, timings.exec_start_time\n, timings.exec_end_time\n, (timings.total_exec_time::float / 1000000.0) as total_exec_time_seconds\n\nfrom queries\n\nleft join users\n  on queries.user_id = users.user_id\n\nleft join cost\n  on queries.query_id = cost.query_id\n\nleft join timings\n  on queries.query_id = timings.query_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.redshift.stl_query", "model.redshift.pg_user", "model.redshift.redshift_cost", "model.redshift.stl_wlm_query"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "views", "redshift_admin_queries"], "unique_id": "model.redshift.redshift_admin_queries", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "views/redshift_admin_queries.sql", "original_file_path": "models/views/redshift_admin_queries.sql", "name": "redshift_admin_queries", "alias": "redshift_admin_queries", "checksum": {"name": "sha256", "checksum": "c8069e43e51f35bcc6fe948afb4c31aace859e2787b7a7ba88bdb118b24f4ce7"}, "tags": [], "refs": [["stl_query"], ["pg_user"], ["redshift_cost"], ["stl_wlm_query"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_queries.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7933736, "compiled_sql": "with  __dbt__cte__stl_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n),  __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n),  __dbt__cte__redshift_cost as (\nwith stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two\n),  __dbt__cte__stl_wlm_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query\n),queries as (\n\n  select * from __dbt__cte__stl_query\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), cost as (\n\n  select * from __dbt__cte__redshift_cost\n\n), timings as (\n\n  select * from __dbt__cte__stl_wlm_query\n\n)\n\n\n\nselect\n\n  queries.query_id\n, queries.transaction_id\n, users.username::varchar\n\n, cost.starting_cost\n, cost.total_cost\n\n, queries.started_at\n, queries.finished_at\n\n, timings.queue_start_time\n, timings.queue_end_time\n, (timings.total_queue_time::float / 1000000.0) as total_queue_time_seconds\n\n, timings.exec_start_time\n, timings.exec_end_time\n, (timings.total_exec_time::float / 1000000.0) as total_exec_time_seconds\n\nfrom queries\n\nleft join users\n  on queries.user_id = users.user_id\n\nleft join cost\n  on queries.query_id = cost.query_id\n\nleft join timings\n  on queries.query_id = timings.query_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stl_query", "sql": " __dbt__cte__stl_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n)"}, {"id": "model.redshift.stl_explain", "sql": " __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n)"}, {"id": "model.redshift.redshift_cost", "sql": " __dbt__cte__redshift_cost as (\nwith stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two\n)"}, {"id": "model.redshift.stl_wlm_query", "sql": " __dbt__cte__stl_wlm_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query\n)"}], "relation_name": "\"snowdb\".\"analytics\".\"redshift_admin_queries\""}, "model.redshift.redshift_admin_users_schema_privileges": {"raw_sql": "with tables as (\n\n  select * from {{ref('pg_tables')}}\n\n), views as (\n\n  select * from {{ref('pg_views')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n  \n), schemas as (\n  \n  select\n  distinct(schema_name)\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n        \n  union\n        \n  select\n  distinct(schema_name)\n  from views\n        \n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\n\nselect \n  schemas.schema_name\n, users.username\n, has_schema_privilege(users.username, schemas.schema_name, 'usage') AS has_usage_privilege\n, has_schema_privilege(users.username, schemas.schema_name, 'create') AS has_create_privilege\nfrom schemas\ncross join users\norder by schemas.schema_name, users.username", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.redshift.pg_tables", "model.redshift.pg_views", "model.redshift.pg_user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "views", "redshift_admin_users_schema_privileges"], "unique_id": "model.redshift.redshift_admin_users_schema_privileges", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "views/redshift_admin_users_schema_privileges.sql", "original_file_path": "models/views/redshift_admin_users_schema_privileges.sql", "name": "redshift_admin_users_schema_privileges", "alias": "redshift_admin_users_schema_privileges", "checksum": {"name": "sha256", "checksum": "afdfa16e7d05ab0196532631e0f6f4c95394938ce26317fd24617b320ff1999d"}, "tags": [], "refs": [["pg_tables"], ["pg_views"], ["pg_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_users_schema_privileges.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7959154, "compiled_sql": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n),tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n  \n), schemas as (\n  \n  select\n  distinct(schema_name)\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n        \n  union\n        \n  select\n  distinct(schema_name)\n  from views\n        \n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\n\nselect \n  schemas.schema_name\n, users.username\n, has_schema_privilege(users.username, schemas.schema_name, 'usage') AS has_usage_privilege\n, has_schema_privilege(users.username, schemas.schema_name, 'create') AS has_create_privilege\nfrom schemas\ncross join users\norder by schemas.schema_name, users.username", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_tables", "sql": " __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n)"}, {"id": "model.redshift.pg_views", "sql": " __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n)"}], "relation_name": "\"snowdb\".\"analytics\".\"redshift_admin_users_schema_privileges\""}, "model.redshift.redshift_admin_users_table_view_privileges": {"raw_sql": "with tables as (\n\n  select * from {{ref('pg_tables')}}\n\n), views as (\n\n  select * from {{ref('pg_views')}}\n\n), users as (\n\n  select * from {{ref('pg_user')}}\n\n), objects as (\n  \n  select\n    schema_name\n  , 'table' as object_type\n  , table_name as object_name\n  , '\"' || schema_name || '\".\"' || table_name || '\"' as full_object_name\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n  union\n  \n  select\n    schema_name\n  , 'view' as object_type\n  , view_name as object_name\n  , '\"' || schema_name || '\".\"' || view_name || '\"' as full_object_name\n  from views\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\nselect \n  objects.schema_name\n, objects.object_name\n, users.username\n, has_table_privilege(users.username, objects.full_object_name, 'select') as has_select_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'insert') as has_insert_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'update') as has_update_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'delete') as has_delete_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'references') as has_references_privilege\nfrom objects\ncross join users\norder by objects.full_object_name, users.username", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.redshift.pg_tables", "model.redshift.pg_views", "model.redshift.pg_user"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "views", "redshift_admin_users_table_view_privileges"], "unique_id": "model.redshift.redshift_admin_users_table_view_privileges", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "views/redshift_admin_users_table_view_privileges.sql", "original_file_path": "models/views/redshift_admin_users_table_view_privileges.sql", "name": "redshift_admin_users_table_view_privileges", "alias": "redshift_admin_users_table_view_privileges", "checksum": {"name": "sha256", "checksum": "b54435515d07898ca5d517fcb24ccbc03c92a55f470059c947d36979461a655a"}, "tags": [], "refs": [["pg_tables"], ["pg_views"], ["pg_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_users_table_view_privileges.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.7983918, "compiled_sql": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n),tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), objects as (\n  \n  select\n    schema_name\n  , 'table' as object_type\n  , table_name as object_name\n  , '\"' || schema_name || '\".\"' || table_name || '\"' as full_object_name\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n  union\n  \n  select\n    schema_name\n  , 'view' as object_type\n  , view_name as object_name\n  , '\"' || schema_name || '\".\"' || view_name || '\"' as full_object_name\n  from views\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\nselect \n  objects.schema_name\n, objects.object_name\n, users.username\n, has_table_privilege(users.username, objects.full_object_name, 'select') as has_select_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'insert') as has_insert_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'update') as has_update_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'delete') as has_delete_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'references') as has_references_privilege\nfrom objects\ncross join users\norder by objects.full_object_name, users.username", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_tables", "sql": " __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n)"}, {"id": "model.redshift.pg_views", "sql": " __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n)"}, {"id": "model.redshift.pg_user", "sql": " __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n)"}], "relation_name": "\"snowdb\".\"analytics\".\"redshift_admin_users_table_view_privileges\""}, "model.redshift.redshift_admin_dependencies": {"raw_sql": "{# SOURCE: https://github.com/awslabs/amazon-redshift-utils/blob/master/src/AdminViews/v_view_dependency.sql #}\n\nselect distinct\n  srcobj.oid as source_oid\n  , srcnsp.nspname as source_schemaname\n  , srcobj.relname as source_objectname\n  , tgtobj.oid as dependent_oid\n  , tgtnsp.nspname as dependent_schemaname\n  , tgtobj.relname as dependent_objectname\n\nfrom\n\n  {{ ref('pg_class') }} as srcobj\n  join {{ ref('pg_depend') }} as srcdep on srcobj.oid = srcdep.refobjid\n  join {{ ref('pg_depend') }} as tgtdep on srcdep.objid = tgtdep.objid\n  join {{ ref('pg_class') }} as tgtobj\n    on tgtdep.refobjid = tgtobj.oid\n    and srcobj.oid <> tgtobj.oid\n  left join {{ ref('pg_namespace') }} as srcnsp\n    on srcobj.relnamespace = srcnsp.oid\n  left join {{ ref('pg_namespace') }} tgtnsp on tgtobj.relnamespace = tgtnsp.oid\n\nwhere\n  tgtdep.deptype = 'i' --dependency_internal\n  and tgtobj.relkind = 'v' --i=index, v=view, s=sequence", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.redshift.pg_class", "model.redshift.pg_depend", "model.redshift.pg_depend", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.pg_namespace"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "views", "redshift_admin_dependencies"], "unique_id": "model.redshift.redshift_admin_dependencies", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "views/redshift_admin_dependencies.sql", "original_file_path": "models/views/redshift_admin_dependencies.sql", "name": "redshift_admin_dependencies", "alias": "redshift_admin_dependencies", "checksum": {"name": "sha256", "checksum": "a3117e2ff0f093b77cef2f1c07afbfecf2dd5134bd8701d83f23a66349b4c521"}, "tags": [], "refs": [["pg_class"], ["pg_depend"], ["pg_depend"], ["pg_class"], ["pg_namespace"], ["pg_namespace"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_dependencies.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.8009222, "compiled_sql": "\n\nwith __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n),  __dbt__cte__pg_depend as (\nselect\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n)select distinct\n  srcobj.oid as source_oid\n  , srcnsp.nspname as source_schemaname\n  , srcobj.relname as source_objectname\n  , tgtobj.oid as dependent_oid\n  , tgtnsp.nspname as dependent_schemaname\n  , tgtobj.relname as dependent_objectname\n\nfrom\n\n  __dbt__cte__pg_class as srcobj\n  join __dbt__cte__pg_depend as srcdep on srcobj.oid = srcdep.refobjid\n  join __dbt__cte__pg_depend as tgtdep on srcdep.objid = tgtdep.objid\n  join __dbt__cte__pg_class as tgtobj\n    on tgtdep.refobjid = tgtobj.oid\n    and srcobj.oid <> tgtobj.oid\n  left join __dbt__cte__pg_namespace as srcnsp\n    on srcobj.relnamespace = srcnsp.oid\n  left join __dbt__cte__pg_namespace tgtnsp on tgtobj.relnamespace = tgtnsp.oid\n\nwhere\n  tgtdep.deptype = 'i' --dependency_internal\n  and tgtobj.relkind = 'v' --i=index, v=view, s=sequence", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.pg_class", "sql": " __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n)"}, {"id": "model.redshift.pg_depend", "sql": " __dbt__cte__pg_depend as (\nselect\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend\n)"}, {"id": "model.redshift.pg_namespace", "sql": " __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n)"}], "relation_name": "\"snowdb\".\"analytics\".\"redshift_admin_dependencies\""}, "model.redshift.redshift_admin_table_stats": {"raw_sql": "with unsorted_by_table as (\n\n  select\n    db_id\n  , id as table_id\n  , name as table_name\n  , sum(rows) as rows\n  , sum(unsorted_rows) as unsorted_rows\n  from {{ref('stv_tbl_perm')}}\n  group by 1, 2, 3\n\n), pg_class as (\n\n  select * from {{ref('pg_class')}}\n\n), pg_namespace as (\n\n  select * from {{ref('pg_namespace')}}\n\n), table_sizes as (\n\n  select\n    tbl as table_id\n  , count(*) as size_in_megabytes\n  from {{ref('stv_blocklist')}}\n  group by 1\n\n), table_attributes as (\n\n  select\n    attrelid as table_id\n  , min(dist_key) as dist_key\n  , min(sort_key) as sort_key\n  , max(attsortkeyord) as num_sort_keys\n  , (max(attencodingtype) > 0) as is_encoded\n  , max(attnum) as num_columns\n  from {{ref('pg_attribute')}}\n  group by 1\n\n), slice_distribution as (\n\n  select\n    tbl as table_id\n  , trim(name) as name\n  , slice\n  , count(*) as size_in_megabytes\n\n  from {{ref('svv_diskusage')}}\n  group by 1, 2, 3\n\n), capacity as (\n\n  select\n    sum(capacity) as total_megabytes\n  from {{ref('stv_partitions')}}\n  where part_begin=0\n\n), table_distribution_ratio as (\n\n  select\n    table_id\n  , (max(size_in_megabytes)::float / min(size_in_megabytes)::float)\n      as ratio\n  from slice_distribution\n  group by 1\n\n)\n\nselect\n\n  trim(pg_namespace.nspname) as schema\n, trim(unsorted_by_table.table_name) as table\n, unsorted_by_table.rows\n, unsorted_by_table.unsorted_rows\n, {{percentage('unsorted_by_table.unsorted_rows',\n               'unsorted_by_table.rows')}}\n    as percent_rows_unsorted\n, unsorted_by_table.table_id\n\n, {{decode_reldiststyle('pg_class.reldiststyle',\n                        'table_attributes.dist_key')}} as dist_style\n, table_distribution_ratio.ratio as dist_skew\n\n, (table_attributes.sort_key is not null) as is_sorted\n, table_attributes.sort_key\n, table_attributes.num_sort_keys\n, table_attributes.num_columns\n\n, table_sizes.size_in_megabytes\n, {{percentage('table_sizes.size_in_megabytes',\n               'capacity.total_megabytes')}}\n    as disk_used_percent_of_total\n, table_attributes.is_encoded\n\nfrom unsorted_by_table\n\ninner join pg_class\n  on pg_class.oid = unsorted_by_table.table_id\n\ninner join pg_namespace\n  on pg_namespace.oid = pg_class.relnamespace\n\ninner join capacity\n  on 1=1\n\nleft join table_sizes\n  on unsorted_by_table.table_id = table_sizes.table_id\n\ninner join table_attributes\n  on table_attributes.table_id = unsorted_by_table.table_id\n\ninner join table_distribution_ratio\n  on table_distribution_ratio.table_id = unsorted_by_table.table_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.percentage", "macro.redshift.decode_reldiststyle"], "nodes": ["model.redshift.stv_tbl_perm", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.stv_blocklist", "model.redshift.pg_attribute", "model.redshift.svv_diskusage", "model.redshift.stv_partitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "views", "redshift_admin_table_stats"], "unique_id": "model.redshift.redshift_admin_table_stats", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "views/redshift_admin_table_stats.sql", "original_file_path": "models/views/redshift_admin_table_stats.sql", "name": "redshift_admin_table_stats", "alias": "redshift_admin_table_stats", "checksum": {"name": "sha256", "checksum": "e15cffecf9bc0a43681414aba35c42ac70fb66ae6f02c5ae269dc0c4f19409d1"}, "tags": [], "refs": [["stv_tbl_perm"], ["pg_class"], ["pg_namespace"], ["stv_blocklist"], ["pg_attribute"], ["svv_diskusage"], ["stv_partitions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/views/redshift_admin_table_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.8045344, "compiled_sql": "with  __dbt__cte__stv_tbl_perm as (\nselect\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm\n),  __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n),  __dbt__cte__stv_blocklist as (\nselect\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist\n),  __dbt__cte__pg_attribute as (\nselect\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute\n),  __dbt__cte__svv_diskusage as (\nselect\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage\n),  __dbt__cte__stv_partitions as (\nselect\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions\n),unsorted_by_table as (\n\n  select\n    db_id\n  , id as table_id\n  , name as table_name\n  , sum(rows) as rows\n  , sum(unsorted_rows) as unsorted_rows\n  from __dbt__cte__stv_tbl_perm\n  group by 1, 2, 3\n\n), pg_class as (\n\n  select * from __dbt__cte__pg_class\n\n), pg_namespace as (\n\n  select * from __dbt__cte__pg_namespace\n\n), table_sizes as (\n\n  select\n    tbl as table_id\n  , count(*) as size_in_megabytes\n  from __dbt__cte__stv_blocklist\n  group by 1\n\n), table_attributes as (\n\n  select\n    attrelid as table_id\n  , min(dist_key) as dist_key\n  , min(sort_key) as sort_key\n  , max(attsortkeyord) as num_sort_keys\n  , (max(attencodingtype) > 0) as is_encoded\n  , max(attnum) as num_columns\n  from __dbt__cte__pg_attribute\n  group by 1\n\n), slice_distribution as (\n\n  select\n    tbl as table_id\n  , trim(name) as name\n  , slice\n  , count(*) as size_in_megabytes\n\n  from __dbt__cte__svv_diskusage\n  group by 1, 2, 3\n\n), capacity as (\n\n  select\n    sum(capacity) as total_megabytes\n  from __dbt__cte__stv_partitions\n  where part_begin=0\n\n), table_distribution_ratio as (\n\n  select\n    table_id\n  , (max(size_in_megabytes)::float / min(size_in_megabytes)::float)\n      as ratio\n  from slice_distribution\n  group by 1\n\n)\n\nselect\n\n  trim(pg_namespace.nspname) as schema\n, trim(unsorted_by_table.table_name) as table\n, unsorted_by_table.rows\n, unsorted_by_table.unsorted_rows\n, (case unsorted_by_table.rows\n        when 0 then 0\n        else (unsorted_by_table.unsorted_rows::float / unsorted_by_table.rows::float) * 100.0 end)\n    as percent_rows_unsorted\n, unsorted_by_table.table_id\n\n, decode(pg_class.reldiststyle, 0, 'even',\n                              1, table_attributes.dist_key,\n                              'all') as dist_style\n, table_distribution_ratio.ratio as dist_skew\n\n, (table_attributes.sort_key is not null) as is_sorted\n, table_attributes.sort_key\n, table_attributes.num_sort_keys\n, table_attributes.num_columns\n\n, table_sizes.size_in_megabytes\n, (case capacity.total_megabytes\n        when 0 then 0\n        else (table_sizes.size_in_megabytes::float / capacity.total_megabytes::float) * 100.0 end)\n    as disk_used_percent_of_total\n, table_attributes.is_encoded\n\nfrom unsorted_by_table\n\ninner join pg_class\n  on pg_class.oid = unsorted_by_table.table_id\n\ninner join pg_namespace\n  on pg_namespace.oid = pg_class.relnamespace\n\ninner join capacity\n  on 1=1\n\nleft join table_sizes\n  on unsorted_by_table.table_id = table_sizes.table_id\n\ninner join table_attributes\n  on table_attributes.table_id = unsorted_by_table.table_id\n\ninner join table_distribution_ratio\n  on table_distribution_ratio.table_id = unsorted_by_table.table_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.redshift.stv_tbl_perm", "sql": " __dbt__cte__stv_tbl_perm as (\nselect\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm\n)"}, {"id": "model.redshift.pg_class", "sql": " __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n)"}, {"id": "model.redshift.pg_namespace", "sql": " __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n)"}, {"id": "model.redshift.stv_blocklist", "sql": " __dbt__cte__stv_blocklist as (\nselect\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist\n)"}, {"id": "model.redshift.pg_attribute", "sql": " __dbt__cte__pg_attribute as (\nselect\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute\n)"}, {"id": "model.redshift.svv_diskusage", "sql": " __dbt__cte__svv_diskusage as (\nselect\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage\n)"}, {"id": "model.redshift.stv_partitions", "sql": " __dbt__cte__stv_partitions as (\nselect\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions\n)"}], "relation_name": "\"snowdb\".\"analytics\".\"redshift_admin_table_stats\""}, "model.redshift.redshift_constraints": {"raw_sql": "{{ redshift.fetch_constraint_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_constraint_data_sql"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "introspection", "redshift_constraints"], "unique_id": "model.redshift.redshift_constraints", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "introspection/redshift_constraints.sql", "original_file_path": "models/introspection/redshift_constraints.sql", "name": "redshift_constraints", "alias": "redshift_constraints", "checksum": {"name": "sha256", "checksum": "ebbdac8bcd47696be306290c83330b2e934fe8de401168fd8b69d6c996444924"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/introspection/redshift_constraints.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.8107643, "compiled_sql": "\n\n    select\n        c.nspname as schemaname,\n        b.relname as tablename,\n        case\n            when a.contype = 'p' then 'primary key'\n            when a.contype = 'u' then 'unique'\n            when a.contype = 'f' then 'foreign key'\n            else null\n        end as constraint_type,\n        pg_get_constraintdef(a.oid) as col_constraint\n\n    from pg_catalog.pg_constraint a\n    join pg_catalog.pg_class b on(a.conrelid=b.oid)\n    join pg_catalog.pg_namespace c on(a.connamespace=c.oid)\n    where a.contype in ('p', 'u', 'f')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_tables": {"raw_sql": "{{ redshift.fetch_table_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_table_data_sql"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "introspection", "redshift_tables"], "unique_id": "model.redshift.redshift_tables", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "introspection/redshift_tables.sql", "original_file_path": "models/introspection/redshift_tables.sql", "name": "redshift_tables", "alias": "redshift_tables", "checksum": {"name": "sha256", "checksum": "b66f9a5a131ed61ecc528d32098fc6e21e5e4406e7804e37ad24256afdc27c2d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/introspection/redshift_tables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.81402, "compiled_sql": "\n\n    select\n        n.nspname AS schemaname,\n        c.relname AS tablename,\n        d.description,\n        case\n            when c.relkind = 'v' then 'view'\n            when c.relkind = 'r' then 'table'\n            else null\n        end as relation_type\n\n    from pg_catalog.pg_namespace n\n    join pg_catalog.pg_class c on n.oid = c.relnamespace\n    left outer join pg_catalog.pg_description d ON (d.objoid = c.oid AND d.objsubid = 0)\n\n    where schemaname not like 'pg_%'\n      and schemaname != 'information_schema'\n      and relkind in ('v', 'r')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_sort_dist_keys": {"raw_sql": "{{ redshift.fetch_sort_dist_key_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_sort_dist_key_data_sql"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "introspection", "redshift_sort_dist_keys"], "unique_id": "model.redshift.redshift_sort_dist_keys", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "introspection/redshift_sort_dist_keys.sql", "original_file_path": "models/introspection/redshift_sort_dist_keys.sql", "name": "redshift_sort_dist_keys", "alias": "redshift_sort_dist_keys", "checksum": {"name": "sha256", "checksum": "ce3d51c03cd59a2d56a22b846222abcd7d44878116a5e46aa800e59a44c50973"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/introspection/redshift_sort_dist_keys.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.817284, "compiled_sql": "\n\n    with dist_config as (\n\n        -- gets distyle and distkey (if there is one)\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n\n            case\n                when c.reldiststyle = 0 then 'even'\n                when c.reldiststyle = 1 then 'key'\n                when c.reldiststyle = 8 then 'all'\n                else null\n            end as diststyle,\n\n            max(case when c.reldiststyle = 1 and a.attisdistkey IS TRUE and a.attnum > 0 then a.attname else null end) over (partition by n.nspname, c.relname) as dist_key\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n\n    ),\n\n    sort_config as (\n\n        -- get sortstyle and sortkeys\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n            case\n                when min(a.attsortkeyord) over (partition by n.nspname, c.relname) = -1 then 'interleaved'\n                else 'compound'\n            end as sort_style,\n            listagg(a.attname, '|') within group (order by a.attsortkeyord) over (partition by n.nspname, c.relname) as sort_keys\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n          and abs(a.attsortkeyord) > 0\n          and a.attnum > 0\n    )\n\n    select *\n    from sort_config\n    join dist_config using (schemaname, tablename)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.redshift.redshift_columns": {"raw_sql": "{{ redshift.fetch_column_data_sql() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.fetch_column_data_sql"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["redshift", "introspection", "redshift_columns"], "unique_id": "model.redshift.redshift_columns", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "introspection/redshift_columns.sql", "original_file_path": "models/introspection/redshift_columns.sql", "name": "redshift_columns", "alias": "redshift_columns", "checksum": {"name": "sha256", "checksum": "f18c67ba5ea2c91f122b905dfdd31df5c4ae1970d0dcc1e51d9365462298d10c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/introspection/redshift_columns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "post-hook": ["grant select on {{ this }} to read_only"]}, "created_at": 1669795234.8205905, "compiled_sql": "\n\n    with columns as (\n        select\n            n.nspname as schemaname,\n            c.relname as tablename,\n            a.attnum as col_index,\n            a.attname as col_name,\n            d.description,\n\n            case\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING', 'VARCHAR')\n\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER', 'CHAR')\n\n                else upper(format_type(a.atttypid, a.atttypmod))\n            end as col_datatype,\n\n            case\n                when format_encoding((a.attencodingtype)::integer) = 'none' then 'raw'\n                else format_encoding((a.attencodingtype)::integer)\n            end as col_encoding,\n\n            case\n                when a.atthasdef is true then adef.adsrc\n                else null\n            end as col_default,\n\n            a.attnotnull as col_not_null\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        left outer join pg_catalog.pg_description as d ON (d.objoid = a.attrelid AND d.objsubid = a.attnum)\n        left outer join pg_catalog.pg_attrdef as adef on a.attrelid = adef.adrelid and a.attnum = adef.adnum\n        where c.relkind = 'r'\n          and a.attnum > 0\n\n    )\n    select *\n    from columns\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.main.user_activity": {"raw_sql": "{% if target.name == 'prod' %}\n  {{ config(materialized='incremental', bind=False) }}\n{% else %}\n  {{ config(materialized='view', bind=False) }}\n{% endif %}\n\nWITH prep AS (\n\n    SELECT  date_trunc('day', ae.derived_tstamp::TIMESTAMP) AS time_day,\n            case\n                when trim(ae.user_id) ~ '^[0-9]+$' then trim(ae.user_id)::int\n                else 0\n                end as id,\n            ae.se_value::int as company_id,\n            CASE WHEN\n                ( c.converted_to_paying_ts is not NULL\n                    AND c.converted_to_paying_ts <= time_day\n                    AND (c.stopped_paying_ts > time_day OR c.stopped_paying_ts is null) )\n                  OR c.id = 34572   -- CreditKarma -- cloud 101\n                  OR c.id = 55006   -- EpicGames   -- cloud 102\n                  OR c.id = 58539   -- AirBus US   -- cloud 103\n                    THEN 'paying'\n                 WHEN\n                  fs.is_active = true\n                    THEN 'freemium_active'\n                 WHEN\n                  c.trial_start_date <= time_day AND (c.converted_to_paying_ts > time_day OR c.converted_to_paying_ts is null)\n                                                 AND c.is_dev = false\n                    THEN 'trial'\n                  ELSE\n                    'unknown'\n                END AS customer_state,\n\n            count(distinct ae.event_id) as events_count,\n            count(distinct ae.se_action) as unique_actions_count,\n\n            -- production python app\n            count(DISTINCT CASE WHEN ae.platform = 'web' AND ae.app_id = 'production_web'\n                                        THEN  ae.event_id END)\n                                        as events_count_webapp,\n            -- web frontend js tracker\n            count(DISTINCT CASE WHEN ae.platform = 'web' AND ae.app_id = 'jsFF'\n                                        THEN  ae.event_id END)\n                                        as events_count_jsff,\n            -- mobile api calls\n            count(DISTINCT CASE WHEN ae.platform = 'mob' AND (ae.app_id = 'production_android' OR ae.app_id = 'production_ios')\n                                        THEN  ae.event_id END)\n                                        as events_count_mobile_api,\n            count(DISTINCT CASE WHEN ae.platform = 'mob' AND (ae.app_id = 'production_android')\n                                        THEN  ae.event_id END)\n                                        as events_count_mobile_api_android,\n            count(DISTINCT CASE WHEN ae.platform = 'mob' AND (ae.app_id = 'production_ios')\n                                        THEN  ae.event_id END)\n                                        as events_count_mobile_api_ios,\n            -- slack\n            count(DISTINCT CASE WHEN ae.platform = 'web' AND ae.app_id = 'production_slack'\n                                        THEN  ae.event_id END)\n                                        as events_count_slack,\n\n\n            count(DISTINCT CASE WHEN ae.se_action = 'login' THEN  ae.event_id END)\n                                        as e_login,\n            count(DISTINCT CASE WHEN ae.se_action = 'user_became_active' THEN ae.event_id END)\n                                        as e_user_became_active,\n            count(DISTINCT CASE WHEN ae.se_action = 'user_deactivated' THEN ae.event_id END)\n                                        as e_user_deactivated,\n            count(DISTINCT CASE WHEN ae.se_action = 'user_reviewed_report_for_first_time' THEN  ae.event_id END)\n                                        as e_user_reviewed_report_for_first_time,\n            -- https://15five-dev.atlassian.net/browse/ENG-13510\n            count(DISTINCT CASE WHEN ae.se_action = 'report_submitted' THEN ae.user_id::text || '-' || ae.se_value::text || '-' || date_trunc('minute', ae.derived_tstamp)::text  END)\n                                        as e_report_submitted,\n            count(DISTINCT CASE WHEN ae.se_action = 'report_reviewed' THEN ae.user_id::text || '-' || ae.se_value::text || '-' || date_trunc('second', ae.derived_tstamp)::text  END)\n                                        as e_report_reviewed,\n            count(DISTINCT CASE WHEN ae.se_action = 'comment_reviewer_commented_report_answer' THEN  ae.event_id END)\n                                        as e_comment_reviewer_commented_report_answer,\n            count(DISTINCT CASE WHEN ae.se_action = 'event_feature_high_fives_high_five_given' THEN ae.event_id END)\n                                        as e_event_feature_high_fives_high_five_given,\n            count(DISTINCT CASE WHEN ae.se_action = 'objective_created' THEN ae.event_id END)\n                                        as e_objective_created,\n            count(DISTINCT CASE WHEN ae.se_action = 'objective_status_updated' THEN ae.event_id END)\n                                        as e_objective_status_updated,\n            count(DISTINCT CASE WHEN ae.se_action = 'objective_marked_completed' THEN ae.event_id END)\n                                        as e_objective_marked_completed,\n            count(DISTINCT CASE WHEN ae.se_action = 'engagement_survey_created' THEN ae.event_id END)\n                                        as e_engagement_survey_created,\n            count(DISTINCT CASE WHEN ae.se_action = 'survey_state_completed' THEN ae.event_id END)\n                                        as e_survey_state_completed\n    FROM atomic.events ae\n    LEFT JOIN pg.ff_company c ON c.id = ae.se_value::int\n    LEFT JOIN pg.freemium_freemiumsettings fs ON fs.company_id = c.id\n    {% if target.name == 'prod' %}\n      WHERE ae.derived_tstamp::DATE >= '2019-01-01'\n      {% if is_incremental() %}\n        AND date_trunc('day', ae.derived_tstamp::TIMESTAMP) > (select max(time_day) from {{ this }})\n      {% endif %}\n    {% else %}\n      WHERE ae.derived_tstamp::DATE > current_date - interval '30 days'\n    {% endif %}\n       AND ae.event_name = 'page_view'\n       AND ae.se_action NOT LIKE 'public_api_%'\n       AND ae.se_action NOT IN ('profile_updated',\n                                'not_ended_one_on_one_reminder_sent',\n                                'unfinished_report_review_5_days_sent',\n                                'reporting_period_changed',\n                                'due_day_changed',\n                                'user_sanitization_started',\n                                'user_sanitization_complete',\n                                'user_deactivated')\n       -- production only events\n       AND ae.app_id IN ('jsFF', 'production', 'production_web',\n                         'production_ios', 'production_android',\n                         'production_slack',\n                         'production_unknown')\n       AND c.is_dev = false\n\n    GROUP BY    time_day,\n                ae.user_id,\n                ae.se_value,\n                customer_state\n )\n\n SELECT * FROM prep", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [{"sql": "grant select on {{ this }} to read_only", "transaction": true, "index": null}], "pre-hook": []}, "database": "snowdb", "schema": "analytics", "fqn": ["main", "user", "user_activity"], "unique_id": "model.main.user_activity", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "user/user_activity.sql", "original_file_path": "models/user/user_activity.sql", "name": "user_activity", "alias": "user_activity", "checksum": {"name": "sha256", "checksum": "dddc87b5c4540ab4d3e5b2c478467cb2f81726857176e4721c5a87aabe0a4e31"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/main/models/user/user_activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["grant select on {{ this }} to read_only"], "materialized": "incremental", "bind": false}, "created_at": 1669898638.0349178, "compiled_sql": "\n  \n\n\nWITH prep AS (\n\n    SELECT  date_trunc('day', ae.derived_tstamp::TIMESTAMP) AS time_day,\n            case\n                when trim(ae.user_id) ~ '^[0-9]+$' then trim(ae.user_id)::int\n                else 0\n                end as id,\n            ae.se_value::int as company_id,\n            CASE WHEN\n                ( c.converted_to_paying_ts is not NULL\n                    AND c.converted_to_paying_ts <= time_day\n                    AND (c.stopped_paying_ts > time_day OR c.stopped_paying_ts is null) )\n                  OR c.id = 34572   -- CreditKarma -- cloud 101\n                  OR c.id = 55006   -- EpicGames   -- cloud 102\n                  OR c.id = 58539   -- AirBus US   -- cloud 103\n                    THEN 'paying'\n                 WHEN\n                  fs.is_active = true\n                    THEN 'freemium_active'\n                 WHEN\n                  c.trial_start_date <= time_day AND (c.converted_to_paying_ts > time_day OR c.converted_to_paying_ts is null)\n                                                 AND c.is_dev = false\n                    THEN 'trial'\n                  ELSE\n                    'unknown'\n                END AS customer_state,\n\n            count(distinct ae.event_id) as events_count,\n            count(distinct ae.se_action) as unique_actions_count,\n\n            -- production python app\n            count(DISTINCT CASE WHEN ae.platform = 'web' AND ae.app_id = 'production_web'\n                                        THEN  ae.event_id END)\n                                        as events_count_webapp,\n            -- web frontend js tracker\n            count(DISTINCT CASE WHEN ae.platform = 'web' AND ae.app_id = 'jsFF'\n                                        THEN  ae.event_id END)\n                                        as events_count_jsff,\n            -- mobile api calls\n            count(DISTINCT CASE WHEN ae.platform = 'mob' AND (ae.app_id = 'production_android' OR ae.app_id = 'production_ios')\n                                        THEN  ae.event_id END)\n                                        as events_count_mobile_api,\n            count(DISTINCT CASE WHEN ae.platform = 'mob' AND (ae.app_id = 'production_android')\n                                        THEN  ae.event_id END)\n                                        as events_count_mobile_api_android,\n            count(DISTINCT CASE WHEN ae.platform = 'mob' AND (ae.app_id = 'production_ios')\n                                        THEN  ae.event_id END)\n                                        as events_count_mobile_api_ios,\n            -- slack\n            count(DISTINCT CASE WHEN ae.platform = 'web' AND ae.app_id = 'production_slack'\n                                        THEN  ae.event_id END)\n                                        as events_count_slack,\n\n\n            count(DISTINCT CASE WHEN ae.se_action = 'login' THEN  ae.event_id END)\n                                        as e_login,\n            count(DISTINCT CASE WHEN ae.se_action = 'user_became_active' THEN ae.event_id END)\n                                        as e_user_became_active,\n            count(DISTINCT CASE WHEN ae.se_action = 'user_deactivated' THEN ae.event_id END)\n                                        as e_user_deactivated,\n            count(DISTINCT CASE WHEN ae.se_action = 'user_reviewed_report_for_first_time' THEN  ae.event_id END)\n                                        as e_user_reviewed_report_for_first_time,\n            -- https://15five-dev.atlassian.net/browse/ENG-13510\n            count(DISTINCT CASE WHEN ae.se_action = 'report_submitted' THEN ae.user_id::text || '-' || ae.se_value::text || '-' || date_trunc('minute', ae.derived_tstamp)::text  END)\n                                        as e_report_submitted,\n            count(DISTINCT CASE WHEN ae.se_action = 'report_reviewed' THEN ae.user_id::text || '-' || ae.se_value::text || '-' || date_trunc('second', ae.derived_tstamp)::text  END)\n                                        as e_report_reviewed,\n            count(DISTINCT CASE WHEN ae.se_action = 'comment_reviewer_commented_report_answer' THEN  ae.event_id END)\n                                        as e_comment_reviewer_commented_report_answer,\n            count(DISTINCT CASE WHEN ae.se_action = 'event_feature_high_fives_high_five_given' THEN ae.event_id END)\n                                        as e_event_feature_high_fives_high_five_given,\n            count(DISTINCT CASE WHEN ae.se_action = 'objective_created' THEN ae.event_id END)\n                                        as e_objective_created,\n            count(DISTINCT CASE WHEN ae.se_action = 'objective_status_updated' THEN ae.event_id END)\n                                        as e_objective_status_updated,\n            count(DISTINCT CASE WHEN ae.se_action = 'objective_marked_completed' THEN ae.event_id END)\n                                        as e_objective_marked_completed,\n            count(DISTINCT CASE WHEN ae.se_action = 'engagement_survey_created' THEN ae.event_id END)\n                                        as e_engagement_survey_created,\n            count(DISTINCT CASE WHEN ae.se_action = 'survey_state_completed' THEN ae.event_id END)\n                                        as e_survey_state_completed\n    FROM atomic.events ae\n    LEFT JOIN pg.ff_company c ON c.id = ae.se_value::int\n    LEFT JOIN pg.freemium_freemiumsettings fs ON fs.company_id = c.id\n    \n      WHERE ae.derived_tstamp::DATE >= '2019-01-01'\n      \n        AND date_trunc('day', ae.derived_tstamp::TIMESTAMP) > (select max(time_day) from \"snowdb\".\"analytics\".\"user_activity\")\n      \n    \n       AND ae.event_name = 'page_view'\n       AND ae.se_action NOT LIKE 'public_api_%'\n       AND ae.se_action NOT IN ('profile_updated',\n                                'not_ended_one_on_one_reminder_sent',\n                                'unfinished_report_review_5_days_sent',\n                                'reporting_period_changed',\n                                'due_day_changed',\n                                'user_sanitization_started',\n                                'user_sanitization_complete',\n                                'user_deactivated')\n       -- production only events\n       AND ae.app_id IN ('jsFF', 'production', 'production_web',\n                         'production_ios', 'production_android',\n                         'production_slack',\n                         'production_unknown')\n       AND c.is_dev = false\n\n    GROUP BY    time_day,\n                ae.user_id,\n                ae.se_value,\n                customer_state\n )\n\n SELECT * FROM prep", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"snowdb\".\"analytics\".\"user_activity\""}}, "sources": {"source.main.pg.company": {"fqn": ["main", "pg", "company"], "database": "snowdb", "schema": "pg", "unique_id": "source.main.pg.company", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "company", "source_name": "pg", "source_description": "", "loader": "", "identifier": "company", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowdb\".\"pg\".\"company\"", "created_at": 1669795234.8350406}, "source.main.customer.customer": {"fqn": ["main", "customer", "customer", "customer"], "database": "snowdb", "schema": "customer", "unique_id": "source.main.customer.customer", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "models/customer/customer.yaml", "original_file_path": "models/customer/customer.yaml", "name": "customer", "source_name": "customer", "source_description": "", "loader": "", "identifier": "customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowdb\".\"customer\".\"customer\"", "created_at": 1669795234.835121}}, "macros": {"macro.main.mrr_by_period": {"unique_id": "macro.main.mrr_by_period", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/mrr_by_period.sql", "original_file_path": "macros/mrr_by_period.sql", "name": "mrr_by_period", "macro_sql": "{% macro mrr_by_period(period='monthly') %}\n\n    {{ zuora_mrr(period) }}\n\n    emplify_historical as (\n        select\n            CASE WHEN '{{ period }}' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_emplify' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = 'Emplify'\n        AND mrr_h.ts <= '2021-12-31'\n        AND mrr_h.ts >= '2021-03-31'\n        {% if period in ('monthly', 'weekly') %}\n            and mrr_h.ts = '2021-12-31'\n        {% endif %}\n        ORDER BY dt, za.accountnumber\n    ),\n\n    fifteen5_historical as (\n        select\n            CASE WHEN '{{ period }}' = 'weekly' and mrr_h.ts = '2021-12-31' THEN\n                '2021-12-26'\n            ELSE\n                mrr_h.ts\n            END as dt,\n            'historical_15five' as source,\n            mrr_h.company_name as name,\n            mrr_h.mrr as current_mrr,\n            CASE \n                WHEN za.id is not null THEN\n                    za.id\n                ELSE\n                    mrr_h.zuora_account_id \n            END\n            as zuora_acc_id,\n            za.crmid as sfdc_id,\n            mrr_h.id_15five::int company_id,\n            mrr_h.segmentation as raw_segment,\n            UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',1))) as customer_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    'CONTRACT'\n                ELSE\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n            END as revenue_segment,\n            CASE\n                WHEN customer_segment = 'MANAGED' THEN\n                    UPPER(TRIM( SPLIT_PART(mrr_h.segmentation,'-',2)))\n                ELSE\n                    null\n            END as company_segment\n\n        from ext.mrr_history_v2 mrr_h\n        left join zuora.account za on za.accountnumber = mrr_h.zuora_account_id\n        where True\n        and mrr_h.company = '15Five'\n        AND mrr_h.ts <= '2021-12-31'\n        {% if period in ('monthly', 'weekly') %}\n            and mrr_h.ts = '2021-12-31'\n        {% endif %}\n        ORDER BY dt, za.accountnumber\n    ),\n\n    mrr_records as (\n\n        select\n            all_mrr.dt,\n            all_mrr.source,\n            all_mrr.name,\n            all_mrr.sfdc_id,\n            all_mrr.company_id,\n            all_mrr.raw_segment,\n            all_mrr.customer_segment,\n            all_mrr.revenue_segment,\n            all_mrr.company_segment,\n            all_mrr.current_mrr,\n            all_mrr.zuora_acc_id,\n            CASE\n                WHEN\n                    (all_mrr.dt = '2021-12-31' and '{{ period }}' = 'monthly')\n                    OR (all_mrr.dt = '2021-12-26' and '{{ period }}' = 'weekly') THEN\n                    current_mrr\n                ELSE\n                    COALESCE(lag(all_mrr.current_mrr, 1) over (partition by all_mrr.zuora_acc_id order by all_mrr.dt), 0)\n            END as prev_mrr,\n            CASE\n                WHEN prev_mrr = 0 and not (all_mrr.dt = '2021-03-31' and source = 'historical_emplify')\n                THEN current_mrr ELSE 0\n            END as new_logo,\n            CASE\n                WHEN prev_mrr = 0 and all_mrr.dt = '2021-03-31' and source = 'historical_emplify'\n            THEN current_mrr ELSE 0\n            END as other,\n            CASE\n                WHEN prev_mrr < current_mrr and prev_mrr > 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as expansion,\n            CASE\n                WHEN prev_mrr > current_mrr and current_mrr != 0\n                THEN current_mrr - prev_mrr ELSE 0\n            END as contraction,\n            CASE\n                WHEN prev_mrr > 0 and current_mrr = 0\n                THEN -prev_mrr ELSE 0\n            END as churn,\n\n            CASE WHEN bp.product_name is not null THEN\n                bp.product_name\n            ELSE\n                most_recent_bp.product_name\n            END as product_name\n        from (\n            select * from mrr_by_period\n            union all\n            select * from emplify_historical\n            union all\n            select * from fifteen5_historical\n        ) all_mrr\n        left join {{ ref('bi_main_billing_plans') }} bp on all_mrr.dt = bp.dt and all_mrr.zuora_acc_id = bp.zuora_acc_id\n        left join (\n            select\n                *,\n                row_number() over (partition by zuora_acc_id order by dt desc) as row_n\n            from {{ ref('bi_main_billing_plans') }}\n        ) most_recent_bp on all_mrr.zuora_acc_id = most_recent_bp.zuora_acc_id and row_n = 1\n        order by all_mrr.dt\n    )\n\nselect\n    mrr_records.*\n    {% if period in ('quarterly', 'monthly') %}\n        ,\n        COALESCE(lag(current_mrr,\n        {% if period == 'quarterly'%}\n            4\n        {% else %}\n            12\n        {% endif %}\n        ) over (partition by zuora_acc_id order by dt), 0) as mrr_12m_ago,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(churn) over (\n                    partition by zuora_acc_id order by dt rows\n                    {% if period == 'quarterly' %}\n                        3\n                    {% else %}\n                        11\n                    {% endif %}\n                    preceding\n                )\n            ELSE\n                0\n        END as churn_trail_12m,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(contraction) over (\n                    partition by zuora_acc_id order by dt rows\n                    {% if period == 'quarterly' %}\n                        3\n                    {% else %}\n                        11\n                    {% endif %}\n                    preceding\n                )\n            ELSE\n                0\n        END as contraction_trail_12m,\n        CASE\n            WHEN mrr_12m_ago > 0 THEN\n                sum(expansion) over (\n                    partition by zuora_acc_id order by dt rows\n                    {% if period == 'quarterly' %}\n                        3\n                    {% else %}\n                        11\n                    {% endif %}\n                    preceding\n                )\n            ELSE\n                0\n        END as expansion_trail_12m\n    {% endif %}\nfrom mrr_records\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.main.zuora_mrr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8287551}, "macro.main.generate_schema_name": {"unique_id": "macro.main.generate_schema_name", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n        {% if target.name == 'dev' %}\n            {{ default_schema }}_{{ custom_schema_name | trim }}\n        {% else %}\n            {{ custom_schema_name | trim }}\n        {% endif %}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8295188}, "macro.main.custom_star": {"unique_id": "macro.main.custom_star", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/custom_star.sql", "original_file_path": "macros/custom_star.sql", "name": "custom_star", "macro_sql": "{% macro custom_star(\n    from,\n    relation_alias=False,\n    except=[],\n    select_nulls_as_columns=False,\n    skip_nulling_for=[],\n    skip_prefix=none\n) -%}\n    {{ return(\n        adapter.dispatch('custom_star', 'dbt_utils')(\n            from, relation_alias, except, select_nulls_as_columns, skip_nulling_for, skip_prefix\n        )\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.main.default__custom_star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8305657}, "macro.main.default__custom_star": {"unique_id": "macro.main.default__custom_star", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/custom_star.sql", "original_file_path": "macros/custom_star.sql", "name": "default__custom_star", "macro_sql": "{% macro default__custom_star(from, relation_alias=False, except=[], select_nulls_as_columns=False, skip_nulling_for=[], skip_prefix=none) -%}\n    {%- do dbt_utils._is_relation(from, 'custom_star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'custom_star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n    {%- set cols = dbt_utils.get_filtered_columns_in_relation(from, except) -%}\n    {% if skip_prefix%}\n        {%- set filtered_by_prefix = [] -%}\n        {%- for col in cols -%}\n            {%- if not col.startswith(skip_prefix) -%}\n                {%- do filtered_by_prefix.append(col) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- set cols = filtered_by_prefix -%}\n    {% endif %}\n\n    {%- for col in cols %}\n        {%- if select_nulls_as_columns and col not in skip_nulling_for -%}\n            {{ 'null as ' }}\n        {%- endif -%}\n        {%- if relation_alias -%}\n            {{ relation_alias }}.\n        {% else %}\n        {%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last -%}\n                ,{{ '\\n  ' }}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8319097}, "macro.main.zuora_mrr": {"unique_id": "macro.main.zuora_mrr", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/zuora_mrr.sql", "original_file_path": "macros/zuora_mrr.sql", "name": "zuora_mrr", "macro_sql": "{% macro zuora_mrr(period='monthly') %}\n\n    with t as (\n        select * from const.dim_calendar\n        where True\n        and (\n            {% if period in ('monthly', 'quarterly') %}\n                day = 1\n            {% else %}\n            -- we are subtracting 1 day in the following CTE which gives us last day of a week\n                day_name = 'Monday'\n            {% endif %}\n            {% if period == 'quarterly' %}\n            -- we are subtracting 1 day in the following CTE which gives us last day of a quarter\n                and month in (4, 7, 10, 1)\n            {% endif %}\n            {% if period == 'weekly' %}\n                and date <= date_trunc('week', CURRENT_DATE)\n            {% else %}\n                and date <= date_trunc('month', CURRENT_DATE)\n            {% endif %}\n            and date > '2022-01-01'\n        )\n        or date = CURRENT_DATE\n    ),\n\n    mrr_by_period as (\n        select\n            t.date - interval '1 day' as dt,\n            'zuora' as source,\n            za.name as name,\n            COALESCE(sum(rpc.mrr), 0) as current_mrr,\n            za.id as zuora_acc_id,\n            za.crmid as sfdc_id,\n            trim('t' from za.x15five_com_company_id__c)::int as company_id,\n            za.customersegment__c || ' - ' || za.revenuesegment__c as raw_segment,\n            UPPER(za.customersegment__c) as customer_segment,\n            UPPER(za.revenuesegment__c) as revenue_segment,\n            UPPER(sfdc.company_segment__c) as company_segment\n\n        from zuora.account za\n\n        join t on 1=1\n\n        left join (\n            select\n                rpc_sub.mrr as mrr,\n                a.id as accountid,\n                rpc_sub.effectivestartdate as effectivestartdate,\n                rpc_sub.effectiveenddate as effectiveenddate,\n                rpc_sub.chargetype as charge_type\n            from zuora.rateplancharge rpc_sub\n            join zuora.rateplan rp on rp.id = rpc_sub.rateplanid\n            join zuora.subscription s on s.id = rp.subscriptionid and s.status not in ('Draft', 'Expired')\n            join zuora.account a on s.accountid = a.id\n        ) rpc\n        on za.id = rpc.accountid\n        and rpc.effectivestartdate <= t.date - interval '1 day'\n        AND (rpc.effectiveenddate > t.date - interval '1 day' or rpc.effectiveenddate is null)\n        and rpc.charge_type = 'Recurring'\n\n        left join ext.sfdc_account sfdc on left(sfdc.id, 15) = left(za.crmid, 15)\n\n        GROUP BY t.date, za.id, za.crmid, za.name, company_id, raw_segment, company_segment, revenue_segment, customer_segment\n        ORDER BY t.date, za.id\n    ),\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.833125}, "macro.main.update_flash_logos": {"unique_id": "macro.main.update_flash_logos", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/arr/update_flash_logos.sql", "original_file_path": "macros/arr/update_flash_logos.sql", "name": "update_flash_logos", "macro_sql": "{% macro update_flash_logos() %}\n{% set sql %}\n\n    DROP TABLE IF EXISTS #segment;\n    SELECT\n        calendar.first_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) AS sfdc_id,\n        daily.flash_segment,\n        ROW_NUMBER() OVER (\n            PARTITION BY calendar.first_day_of_quarter,\n            ISNULL(\n                LEFT(daily.sfdc_id, 15),\n                daily.company_id :: varchar(max)\n            )\n            ORDER BY\n                daily.date\n        ) AS relevant_record INTO #segment\n    FROM\n        finance.arr_daily daily\n        JOIN view_dim_calendar calendar ON daily.date = calendar.date;\n\n    /*BoP Query*/\n    DROP TABLE IF EXISTS #bop;\n    SELECT\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) AS sfdc_id,\n        ISNULL(segment.flash_segment, daily.flash_segment) AS flash_segment,\n        SUM(daily.arr :: decimal(10, 2)) AS bop INTO #bop\n    FROM\n        finance.arr_daily daily\n        JOIN view_dim_calendar calendar ON dateadd(day, 1, daily.date) = calendar.date\n        LEFT JOIN #segment segment\n        ON calendar.first_day_of_quarter = segment.first_day_of_quarter\n        AND ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) = segment.sfdc_id\n        AND segment.relevant_record = 1\n    WHERE\n        calendar.date = calendar.first_day_of_quarter\n    GROUP BY\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ),\n        ISNULL(segment.flash_segment, daily.flash_segment)\n    ORDER BY\n        last_day_of_quarter DESC,\n        flash_segment;\n\n    /*EoP Query*/\n    DROP TABLE IF EXISTS #eop;\n    SELECT\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) AS sfdc_id,\n        daily.flash_segment,\n        SUM(daily.arr :: decimal(10, 2)) AS eop INTO #eop\n    FROM\n        finance.arr_daily daily\n        JOIN view_dim_calendar calendar ON daily.date = calendar.date\n    WHERE\n        calendar.date = calendar.last_day_of_quarter\n        OR calendar.date = (\n            SELECT\n                MAX(date)\n            FROM\n                finance.arr_daily\n        )\n    GROUP BY\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ),\n        daily.flash_segment\n    ORDER BY\n        last_day_of_quarter DESC,\n        flash_segment;\n\n    DROP TABLE IF EXISTS #new_logo;\n    SELECT\n        eop.last_day_of_quarter,\n        eop.sfdc_id,\n        eop.flash_segment,\n        eop.EoP AS new_logo INTO #new_logo\n    FROM\n        #eop eop\n    WHERE\n        NOT EXISTS (\n            SELECT\n                1\n            FROM\n                #bop bop\n            WHERE\n                eop.last_day_of_quarter = bop.last_day_of_quarter\n                AND eop.sfdc_id = bop.sfdc_id\n        );\n\n    DROP TABLE IF EXISTS #expansion;\n    SELECT\n        eop.last_day_of_quarter,\n        eop.sfdc_id,\n        eop.flash_segment,\n        (eop.EoP - bop.bop) :: decimal(10, 2) AS expansion INTO #expansion\n    FROM\n        #eop eop\n        JOIN #bop bop\n        ON eop.last_day_of_quarter = bop.last_day_of_quarter\n        AND eop.sfdc_id = bop.sfdc_id\n        AND eop.eop > bop.bop;\n\n    DROP TABLE IF EXISTS #contraction;\n    SELECT\n        eop.last_day_of_quarter,\n        eop.sfdc_id,\n        eop.flash_segment,\n        (eop.EoP - bop.bop) :: decimal(10, 2) AS contraction INTO #contraction\n    FROM\n        #bop bop\n        JOIN #eop eop\n        ON eop.last_day_of_quarter = bop.last_day_of_quarter\n        AND eop.sfdc_id = bop.sfdc_id\n        AND eop.eop < bop.bop;\n\n    DROP TABLE IF EXISTS #churn;\n    SELECT\n        bop.last_day_of_quarter,\n        bop.sfdc_id,\n        bop.flash_segment,\n        (-1 * bop.bop) :: decimal(10, 2) AS churn INTO #churn\n    FROM\n        #bop bop\n    WHERE\n        NOT EXISTS (\n            SELECT\n                1\n            FROM\n                #eop eop\n            WHERE\n                eop.last_day_of_quarter = bop.last_day_of_quarter\n                AND eop.sfdc_id = bop.sfdc_id\n        );\n\n    DROP TABLE IF EXISTS #bop_aggregate; SELECT last_day_of_quarter, flash_segment, COUNT(DISTINCT(sfdc_id)) AS bop INTO #bop_aggregate FROM #bop GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #eop_aggregate; SELECT last_day_of_quarter, flash_segment, COUNT(DISTINCT(sfdc_id)) AS eop INTO #eop_aggregate FROM #eop GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #new_logo_aggregate; SELECT last_day_of_quarter, flash_segment, COUNT(DISTINCT(sfdc_id)) AS new_logo INTO #new_logo_aggregate FROM #new_logo GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #expansion_aggregate; SELECT last_day_of_quarter, flash_segment, COUNT(DISTINCT(sfdc_id)) AS expansion INTO #expansion_aggregate FROM #expansion GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #contraction_aggregate; SELECT last_day_of_quarter, flash_segment, COUNT(DISTINCT(sfdc_id)) AS contraction INTO #contraction_aggregate FROM #contraction GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #churn_aggregate; SELECT last_day_of_quarter, flash_segment, COUNT(DISTINCT(sfdc_id)) AS churn INTO #churn_aggregate FROM #churn GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #arr_staging;\n    SELECT\n        calendar.last_day_of_quarter,\n        calendar.year,\n        'Q' + calendar.quarter :: varchar(1) AS quarter,\n        eop.flash_segment,\n        NVL(bop.bop, 0) AS bop,\n        NVL(new_logo.new_logo, 0) AS new_logo,\n        NVL(expansion.expansion, 0) AS expansion,\n        -1 * NVL(contraction.contraction, 0) AS contraction,\n        -1 * NVL(churn.churn, 0) AS churn,\n        eop.eop,\n        NVL(NVL(bop_next_quarter.bop, eop.eop), 0) - NVL(eop.eop, 0) AS segment_movement,\n        NVL(bop_next_quarter.bop, eop.eop) AS eop_restated INTO #arr_staging\n    FROM\n        #eop_aggregate eop\n        JOIN view_dim_calendar calendar ON eop.last_day_of_quarter = calendar.date\n        LEFT JOIN #bop_aggregate bop ON eop.last_day_of_quarter = bop.last_day_of_quarter AND eop.flash_segment = bop.flash_segment\n        LEFT JOIN #new_logo_aggregate new_logo ON eop.last_day_of_quarter = new_logo.last_day_of_quarter AND eop.flash_segment = new_logo.flash_segment\n        LEFT JOIN #expansion_aggregate expansion ON eop.last_day_of_quarter = expansion.last_day_of_quarter AND eop.flash_segment = expansion.flash_segment\n        LEFT JOIN #contraction_aggregate contraction ON eop.last_day_of_quarter = contraction.last_day_of_quarter AND eop.flash_segment = contraction.flash_segment\n        LEFT JOIN #churn_aggregate churn ON eop.last_day_of_quarter = churn.last_day_of_quarter AND eop.flash_segment = churn.flash_segment\n        LEFT JOIN #bop_aggregate bop_next_quarter ON dateadd(day,-1,dateadd(month,3,dateadd(day,1,eop.last_day_of_quarter))) = bop_next_quarter.last_day_of_quarter AND eop.flash_segment = bop_next_quarter.flash_segment\n    ORDER BY\n        calendar.last_day_of_quarter DESC,\n        flash_segment;\n\n    DROP TABLE IF EXISTS #arr_with_totals;\n    SELECT\n        * INTO #arr_with_totals\n    FROM\n        #arr_staging\n    UNION\n    ALL\n    SELECT\n        last_day_of_quarter,\n        year,\n        quarter,\n        '~TOTAL~' AS flash_segment,\n        SUM(bop) AS bop,\n        SUM(new_logo) AS new_logo,\n        SUM(expansion) AS expansion,\n        SUM(contraction) AS contraction,\n        SUM(churn) AS churn,\n        SUM(eop) AS eop,\n        0 AS segment_movement,\n        SUM(eop_restated) AS eop_restated\n    FROM\n        #arr_staging\n    GROUP BY\n        last_day_of_quarter,\n        year,\n        quarter;\n\n    DROP TABLE IF EXISTS #flash_report;\n    SELECT\n        arr.last_day_of_quarter,\n        arr.year,\n        arr.quarter,\n        arr.flash_segment,\n        arr.bop,\n        arr.new_logo,\n        arr.expansion,\n        arr.contraction,\n        arr.churn,\n        arr.eop,\n        arr.segment_movement,\n        arr.eop_restated,\n        (arr.eop - arr.bop) AS net_change INTO #flash_report\n    FROM\n        #arr_with_totals arr\n        JOIN view_dim_calendar calendar ON arr.last_day_of_quarter = calendar.date\n        JOIN view_dim_calendar yesterday ON TRUNC(dateadd(day, -1, SYSDATE)) = yesterday.date\n        AND calendar.first_day_of_quarter = yesterday.first_day_of_quarter\n    ORDER BY\n        arr.last_day_of_quarter DESC,\n        arr.flash_segment;\n\n    UPDATE\n        finance.flash_logos\n    SET\n        last_day_of_quarter = flash.last_day_of_quarter,\n        year = flash.year,\n        quarter = flash.quarter,\n        flash_segment = flash.flash_segment,\n        bop = flash.bop,\n        new_logo = flash.new_logo,\n        expansion = flash.expansion,\n        contraction = flash.contraction,\n        churn = flash.churn,\n        eop = flash.eop,\n        segment_adjustment = flash.segment_movement,\n        eop_restated = flash.eop_restated,\n        net_change = flash.net_change,\n        update_date = sysdate\n    FROM\n        finance.flash_logos arr\n        JOIN #flash_report flash ON arr.last_day_of_quarter = flash.last_day_of_quarter AND arr.flash_segment = flash.flash_segment;\n    INSERT INTO\n        finance.flash_logos (\n            last_day_of_quarter,\n            year,\n            quarter,\n            flash_segment,\n            bop,\n            new_logo,\n            expansion,\n            contraction,\n            churn,\n            eop,\n            segment_adjustment,\n            eop_restated,\n            net_change,\n            load_date\n        )\n    SELECT\n        flash.last_day_of_quarter,\n        flash.year,\n        flash.quarter,\n        flash.flash_segment,\n        flash.bop,\n        flash.new_logo,\n        flash.expansion,\n        flash.contraction,\n        flash.churn,\n        flash.eop,\n        flash.segment_movement,\n        flash.eop_restated,\n        flash.net_change,\n        sysdate\n    FROM\n        #flash_report flash\n    WHERE\n        NOT EXISTS (\n            SELECT\n                1\n            FROM\n                finance.flash_logos arr\n            WHERE\n                flash.last_day_of_quarter = arr.last_day_of_quarter\n                AND flash.flash_segment = arr.flash_segment\n        );\n\n{% endset %}\n{% do run_query(sql) %}\n{% do log(\"Update flash logo procedure completed\", info=True) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8348475}, "macro.main.update_arr_daily": {"unique_id": "macro.main.update_arr_daily", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/arr/update_arr_daily.sql", "original_file_path": "macros/arr/update_arr_daily.sql", "name": "update_arr_daily", "macro_sql": "{% macro update_arr_daily() %}\n{% set sql %}\n    DROP TABLE IF EXISTS #zuora_temp;\n    WITH customer AS (\n        SELECT\n            customer._date_ts,\n            customer.id,\n            customer.sfdc_id,\n            customer.customer_segment,\n            customer.revenue_segment,\n            customer.sfdc_company_segment__c,\n            ROW_NUMBER() OVER (PARTITION BY customer.sfdc_id, customer._date_ts ORDER BY customer.create_ts DESC) AS relevant_record\n        FROM snapshots.customer_snapshot customer\n        WHERE customer._date_ts < sysdate::date\n        UNION ALL\n        SELECT\n            sysdate::date AS _date_ts,\n            account.x15five_com_company_id__c::float::int AS id,\n            account.id AS sfdc_id,\n            NULL AS customer_segment,\n            NULL AS revenue_segment,\n            account.company_segment__c,\n            ROW_NUMBER() OVER (PARTITION BY account.id ORDER BY lastmodifieddate DESC) AS relevant_record\n        FROM ext.sfdc_account account\n    ),\n    zuora_arr AS (\n        SELECT\n            'zuora' AS source,\n            account.name AS company,\n            charge.mrr,\n            account.id AS unique_id,\n            account.crmid AS sfdc_id,\n            ISNULL(CASE\n                WHEN TRIM(\n                    't'\n                    FROM\n                        account.x15five_com_company_id__c\n                ) :: int = 0 THEN NULL\n                ELSE TRIM(\n                    't'\n                    FROM\n                        account.x15five_com_company_id__c\n                )\n            END,LEFT(sfdc.x15five_com_company_id__c,LEN(sfdc.x15five_com_company_id__c)-2))::int AS company_id,\n            account.customersegment__c || ' - ' || account.revenuesegment__c AS segment,\n            UPPER(account.customersegment__c) AS customer_segment,\n            UPPER(account.revenuesegment__c) AS revenue_segment,\n            UPPER(sfdc.company_segment__c) AS company_segment,\n            charge.effectivestartdate,\n            CASE\n                WHEN charge.id = '8a129f6f818a36d4018191cc1c4b7c2c' THEN '2022-06-29 23:59:59.000000'\n                ELSE charge.effectiveenddate\n            END AS effectiveenddate,\n            charge.productid,\n            CASE\n                WHEN charge.id = '8a128aa88021da2d0180234c60ce4804' THEN '2022-03-31'\n                WHEN charge.id = '8a12866a81b534b30181b8e382711399' THEN '2022-03-31'\n                WHEN charge.id = '8a12822481a4449c0181aea5104a5768' THEN '2022-03-31'\n                WHEN charge.id IN (\n                    '8a128eda81429f150181492079b335d0',\n                    '8a128eda81429f150181492079b835db'\n                ) THEN '2022-03-31'\n                WHEN charge.id = '8a128cc781b534b00181b8ed5d3034a0' THEN '2022-03-31'\n                WHEN charge.id = '8a1296a581b554130181b8ec841a6f86' THEN '2022-03-31'\n                WHEN charge.id = '8a129ac281b5541c0181c85772746547' THEN '2022-03-31'\n                WHEN charge.id = '8a12992181b554170181c855d73314a6' THEN '2022-03-31'\n                WHEN charge.id = '8a12987d81b554130181c85e3567059d' THEN '2022-03-31'\n                WHEN charge.id = '8a1281388193f5b301819a080e0b5669' THEN '2022-03-31'\n                WHEN charge.id = '8a12879981a444a30181aeaca30944ce' THEN '2022-03-31'\n                WHEN charge.id = '8a12879981b534a80181c85cfeda1704' THEN '2022-03-31'\n                WHEN charge.id = '8a1298df81b5540e0181b8e2a63417aa' THEN '2022-03-31'\n                WHEN charge.id = '8a1296a581a4652c0181aeab46c90342' THEN '2022-03-31'\n                WHEN charge.id = '8a129ac281b5541c0181c857fbe86738' THEN '2022-03-31'\n                WHEN charge.id = '8a1282cd81b534a30181c85c17261e58' THEN '2022-03-31'\n                WHEN charge.id = '8a12813881b534a40181b8e6e70c6872' THEN '2022-03-31'\n                WHEN charge.id = '8a12866581940b83018199fbd3546675' THEN '2022-03-31'\n                WHEN charge.id = '8a12847f81b534ae0181b8ec8cb6577c' THEN '2022-03-31'\n                WHEN charge.id = '8a12866581b534a80181c85f7d2b5a9f' THEN '2022-03-31'\n                WHEN charge.id = '8a128c0b81b534aa0181c862338e2958' THEN '2022-03-31'\n                WHEN charge.id = '8a128d0281d870140181ec6b563214e5' THEN '2022-03-31'\n                WHEN charge.id = '8a12947a81b554180181c338b14669a7' THEN '2022-03-31'\n                WHEN charge.id IN (\n                    '8a1288757fd6c6b4017ffa48b31f1bb2',\n                    '8a1288757fd6c6b4017ffa48b3001ba8',\n                    '8a1288757fd6c6b4017ffa48b34c1bbc',\n                    '8a1288757fd6c6b4017ffa48b2d31b9f'\n                ) THEN '2022-03-31'\n                WHEN charge.id = '8a12847f8108873501811941a93f186f' THEN '2022-03-31'\n                WHEN charge.id = '8a129f6f818a36d4018191242f8e4c7a' THEN '2022-03-31'\n                WHEN charge.id = '8a128a6a7ffe331c018017c169630d20' THEN '2022-03-31'\n                WHEN charge.id = '8a12987d8194121901819a0692283b97' THEN '2022-03-31'\n                WHEN charge.id = '8a12947a81b554180181b8e816d5762a' THEN '2022-03-31'\n                WHEN charge.id = '8a12801c81b534ab0181b721f13631ed'\n                OR charge.id = '8a128b6181b534ae0181b9a85d6b1129'\n                OR charge.id = '8a1291ae81b5540d0181ba359f7e6ecf' THEN '2022-06-30'\n                WHEN charge.id = '8a1293d881b5540f0181b8e51be76d2d' THEN '2022-05-27'\n                WHEN charge.id = '8a1282cd81b534a30181b8e474d83ecd' THEN '2022-06-24'\n                WHEN charge.id = '8a12838081b534a80181b8ee33243554' THEN '2022-05-02'\n                WHEN charge.id = '8a128d0281b534ad0181b8e32e724978' THEN '2022-06-29'\n                WHEN charge.id = '8a12847f81b534ae0181b8e287e02eb2' THEN '2022-05-24'\n                WHEN charge.id = '8a129cc381ce06920181d2a8d0d10f9b' THEN '2022-05-20'\n                WHEN charge.id = '8a12987d81b554130181b8e540693eda' THEN '2022-05-20'\n                WHEN charge.id = '8a12987d81b554130181b8e763d6491c' THEN '2022-05-06'\n                WHEN charge.id = '8a1298df81ce06780181d2abfd1440cc' THEN '2022-06-03'\n                WHEN charge.id = '8a1282cd81b534a30181b8eecf586f58' THEN '2022-06-22'\n                WHEN charge.id = '8a129ac281b5541c0181b8e3156320ae' THEN '2022-05-30'\n                WHEN charge.id = '8a128d0281cded780181d2a71b753408' THEN '2022-06-03'\n                WHEN charge.id = '8a128c0b81b534aa0181b8ec979a7105' THEN '2022-05-30'\n                WHEN charge.id = '8a12822481b534ab0181c3316ab44950' THEN '2022-06-03'\n                WHEN charge.id = '8a1299297d589b58017d6ad7151a1f24' THEN '2022-04-27'\n                WHEN charge.id = '2c92a010798d3f890179aa273a122acb' THEN '2022-05-28'\n                WHEN charge.id = '8a12947a81ce06850181d2a730941fcb'\n                OR charge.id = '8a12947a81ce06850181d2a7308a1fc1' THEN '2022-06-01'\n                WHEN charge.id = '8a128eda81429f150181492079b335d0'\n                OR charge.id = '8a128eda81429f150181492079b835db' THEN '2022-03-31'\n                WHEN charge.id = '8a1282cd81f8e01e0181fbdcb8ad2f15' THEN '2022-06-30'\n                ELSE charge.createddate\n            END AS createddate,\n            charge.billingperiod,\n            charge.quantity,\n            charge.id AS rateplanchargeid\n        FROM\n            zuora.account account\n            LEFT JOIN (\n                SELECT\n                    charge_sub.mrr as mrr,\n                    CASE\n                        WHEN account_sub.parentzuoraaccountid__c is not null THEN TRIM(\n                            't'\n                            FROM\n                                account_sub.parentzuoraaccountid__c\n                        )\n                        ELSE account_sub.id\n                    END AS accountid,\n                    charge_sub.effectivestartdate,\n                    DATEADD(second, -1, charge_sub.effectiveenddate) as effectiveenddate,\n                    plan_sub.productid,\n                    TRUNC(charge_sub.createddate) AS createddate,\n                    charge_sub.billingperiod,\n                    charge_sub.quantity,\n                    charge_sub.id\n                FROM\n                    zuora.rateplancharge charge_sub\n                    JOIN zuora.rateplan plan_sub on charge_sub.rateplanid = plan_sub.id\n                    JOIN zuora.subscription subs_sub on plan_sub.subscriptionid = subs_sub.id\n                    AND subs_sub.status NOT IN ('Draft', 'Expired')\n                    JOIN zuora.account account_sub on subs_sub.accountid = account_sub.id\n                WHERE\n                    charge_sub.chargetype = 'Recurring'\n                    AND charge_sub.effectivestartdate <> charge_sub.effectiveenddate\n            ) charge ON account.id = charge.accountid\n            LEFT JOIN ext.sfdc_account sfdc ON LEFT(account.crmid, 15) = LEFT(sfdc.id, 15)\n        WHERE\n            account.parentzuoraaccountid__c IS NULL\n    ),\n    zuora_arr_daily AS (\n        SELECT\n            CASE\n                WHEN calendar.date >= TRUNC(SYSDATE) THEN TRUNC(dateadd(day, -1, SYSDATE))\n                ELSE calendar.date\n            END AS date,\n            zuora.source,\n            zuora.company,\n            CASE\n                WHEN zuora.sfdc_id = '0012I00002Qhhll' THEN '0012I00002QhhllQAB'\n                ELSE zuora.sfdc_id\n            END AS sfdc_id,\n            zuora.company_id,\n            UPPER(\n                ISNULL(\n                    customer.customer_segment,\n                    zuora.customer_segment\n                )\n            ) + ' - ' + UPPER(\n                ISNULL(customer.revenue_segment, zuora.revenue_segment)\n            ) AS segment,\n            ISNULL(\n                customer.customer_segment,\n                zuora.customer_segment\n            ) AS customer_segment,\n            ISNULL(customer.revenue_segment, zuora.revenue_segment) AS revenue_segment,\n            ISNULL(\n                customer.sfdc_company_segment__c,\n                zuora.company_segment\n            ) AS company_segment,\n            zuora.mrr - ISNULL(zuora2.mrr, 0) AS mrr,\n            zuora.unique_id,\n            zuora.productid,\n            calendar.date AS reporting_date,\n            zuora.billingperiod,\n            calendar.First_Day_of_Quarter,\n            zuora.quantity - ISNULL(zuora2.quantity, 0) AS quantity,\n            zuora.rateplanchargeid,\n            CASE\n                WHEN calendar.date < zuora.effectivestartdate THEN true\n                ELSE false\n            END AS booked_not_active,\n            ROW_NUMBER() OVER (\n                PARTITION BY zuora.unique_id,\n                calendar.First_Day_of_Quarter\n                ORDER BY\n                    calendar.date ASC\n            ) AS quarter_relevant_record\n        FROM\n            zuora_arr zuora\n            JOIN view_dim_calendar yesterday ON TRUNC(dateadd(day, -1, SYSDATE)) = yesterday.date\n            JOIN view_dim_calendar calendar ON (\n                calendar.date BETWEEN CAST(zuora.effectivestartdate AS DATE)\n                AND CAST(zuora.effectiveenddate AS DATE)\n                OR (\n                    calendar.date BETWEEN CAST(zuora.createddate AS DATE)\n                    AND CAST(zuora.effectiveenddate AS DATE)\n                    AND datediff(\n                        day,\n                        CASE\n                            WHEN calendar.date >= TRUNC(SYSDATE) THEN TRUNC(dateadd(day, -1, SYSDATE))\n                            ELSE calendar.date\n                        END,\n                        zuora.effectivestartdate\n                    ) BETWEEN 0\n                    AND CASE\n                        WHEN yesterday.quarter = 1 THEN 30\n                        ELSE 31\n                    END\n                )\n            )\n            AND calendar.date BETWEEN '2022-01-01'\n            AND TRUNC(dateadd(day, -1, SYSDATE))\n            LEFT JOIN customer customer ON --Changed 2022-Q3\n            --zuora.sfdc_id = customer.sfdc_id\n            ISNULL(\n                LEFT(zuora.sfdc_id, 15),\n                zuora.company_id :: varchar(max)\n            ) = ISNULL(\n                LEFT(customer.sfdc_id, 15),\n                customer.id :: varchar(max)\n            )\n            AND CASE\n                WHEN calendar.date >= TRUNC(SYSDATE) THEN dateadd(day, -1, customer._date_ts)\n                ELSE calendar.date\n            END = dateadd(day, -1, customer._date_ts)\n            AND customer.relevant_record = 1\n            LEFT JOIN zuora_arr zuora2 ON zuora.sfdc_id = zuora2.sfdc_id\n            /* In instances of customers going from 15Five Plus to Total Platform, we treat that as same product */\n            AND zuora.productid = CASE WHEN zuora.productid = '2c92a00d78f898d001791005a23f3fd4' AND zuora2.productid = '2c92a00e7693a30701769640ece53466' THEN '2c92a00d78f898d001791005a23f3fd4' ELSE zuora2.productid END\n            AND zuora.effectivestartdate = TRUNC(dateadd(day, 1, zuora2.effectiveenddate))\n            AND zuora.mrr >= zuora2.mrr\n            AND zuora.effectivestartdate > calendar.date\n        WHERE\n            NOT EXISTS (\n                SELECT\n                    1\n                FROM\n                    zuora_arr zuora_sub\n                WHERE\n                    zuora.sfdc_id = zuora_sub.sfdc_id\n                    AND zuora.productid = zuora_sub.productid\n                    AND zuora.effectivestartdate = TRUNC(dateadd(day, 1, zuora_sub.effectiveenddate))\n                    AND zuora.mrr <= zuora_sub.mrr\n                    AND zuora.effectivestartdate > calendar.date\n            )\n            AND (\n                calendar.date > (\n                    SELECT\n                        MAX(date)\n                    FROM\n                        finance.arr_daily\n                )\n                OR zuora.createddate >= (\n                    SELECT\n                        MAX(date)\n                    FROM\n                        finance.arr_daily\n                )\n                /*TRUNC(dateadd(day,-1,SYSDATE))*/\n            )\n            AND calendar.first_day_of_quarter = yesterday.first_day_of_quarter\n    )\nSELECT\n    * INTO #zuora_temp FROM zuora_arr_daily\nORDER BY\n    sfdc_id,\n    date,\n    mrr;\n\n-- SELECT * FROM #zuora_temp\n-- WHERE sfdc_id = '0014T00000NIdixQAD'\n-- ORDER BY date DESC;\nINSERT INTO\n    finance.arr_daily (\n        date,\n        source,\n        company_id,\n        sfdc_id,\n        company,\n        segment,\n        segment_customer,\n        segment_revenue,\n        segment_company,\n        mrr,\n        arr,\n        product_id,\n        seats,\n        billing_frequency,\n        flash_segment,\n        flash_segment_customer,\n        flash_segment_revenue,\n        flash_segment_company,\n        zuora_rate_plan_charge_id,\n        load_date,\n        update_date,\n        booked_not_active\n    )\nSELECT\n    date,\n    source,\n    company_id,\n    sfdc_id,\n    company,\n    UPPER(customer_segment) + ' - ' + CASE\n        WHEN UPPER(customer_segment) = 'UNMANAGED' THEN UPPER(revenue_segment)\n        ELSE UPPER(company_segment)\n    END,\n    UPPER(customer_segment),\n    UPPER(revenue_segment),\n    UPPER(company_segment),\n    mrr,\n    mrr * 12,\n    productid,\n    quantity,\n    billingperiod,\n    NULL,\n    NULL,\n    NULL,\n    NULL,\n    rateplanchargeid,\n    SYSDATE,\n    NULL,\n    booked_not_active\nFROM\n    #zuora_temp zuora\nWHERE\n    NOT EXISTS (\n        SELECT\n            1\n        FROM\n            finance.arr_daily arr_sub\n        WHERE\n            (\n                zuora.sfdc_id = arr_sub.sfdc_id\n                OR zuora.company_id = arr_sub.company_id\n            )\n            AND zuora.date = arr_sub.date\n            AND zuora.rateplanchargeid = arr_sub.zuora_rate_plan_charge_id\n    )\n    AND ISNULL(zuora.sfdc_id, zuora.company_id :: varchar(max)) IS NOT NULL\nORDER BY\n    sfdc_id,\n    date,\n    mrr;\n\nUPDATE\n    finance.arr_daily\nSET\n    company_id = zuora.company_id,\n    sfdc_id = zuora.sfdc_id,\n    company = zuora.company,\n    mrr = zuora.mrr,\n    arr = zuora.mrr * 12,\n    seats = zuora.quantity,\n    billing_frequency = zuora.billingperiod,\n    update_date = SYSDATE,\n    booked_not_active = zuora.booked_not_active\nFROM\n    #zuora_temp zuora\n    JOIN finance.arr_daily fact ON (\n        zuora.sfdc_id = fact.sfdc_id\n        OR zuora.company_id = fact.company_id\n    )\n    AND zuora.date = fact.date\n    AND zuora.rateplanchargeid = fact.zuora_rate_plan_charge_id\nWHERE\n    fact.company_id <> zuora.company_id\n    OR fact.sfdc_id <> zuora.sfdc_id\n    OR fact.company <> zuora.company\n    OR fact.mrr <> zuora.mrr\n    OR fact.seats <> zuora.quantity\n    OR fact.billing_frequency <> zuora.billingperiod;\n\n/*This block of code is to delete removed zuora records for this quarter only*/\nDROP TABLE IF EXISTS #zuora_rateplancharge_deleted;\nDROP TABLE IF EXISTS #remove_deleted_records;\nSELECT\n    charge_sub.id INTO #zuora_rateplancharge_deleted\nFROM\n    zuora.rateplancharge charge_sub\n    JOIN zuora.rateplan plan_sub on charge_sub.rateplanid = plan_sub.id\n    JOIN zuora.subscription subs_sub on plan_sub.subscriptionid = subs_sub.id\n    AND subs_sub.status NOT IN ('Draft', 'Expired')\n    JOIN zuora.account account_sub on subs_sub.accountid = account_sub.id\nWHERE\n    charge_sub.chargetype = 'Recurring'\n    AND charge_sub.effectivestartdate <> charge_sub.effectiveenddate;\n\nSELECT\n    fact.date,\n    fact.zuora_rate_plan_charge_id INTO #remove_deleted_records FROM finance.arr_daily fact\n    JOIN view_dim_calendar calendar ON fact.date = calendar.date\n    JOIN view_dim_calendar today ON TRUNC(dateadd(day, -1, SYSDATE)) = today.date\nWHERE\n    NOT EXISTS (\n        SELECT\n            1\n        FROM\n            #zuora_rateplancharge_deleted rateplan WHERE rateplan.id = fact.zuora_rate_plan_charge_id)\n            AND today.first_day_of_quarter = calendar.first_day_of_quarter;\n\nDELETE FROM\n    finance.arr_daily\nWHERE\n    EXISTS (\n        SELECT\n            1\n        FROM\n            #remove_deleted_records remove WHERE remove.zuora_rate_plan_charge_id = arr_daily.zuora_rate_plan_charge_id AND remove.date = arr_daily.date);\n            /*This block of code is to update the flash_segment fields on late-added sales_force id's*/\n            DROP TABLE IF EXISTS #holding;\n        SELECT\n            fact.*,\n            ROW_NUMBER() OVER (\n                PARTITION BY fact.company_id\n                ORDER BY\n                    fact.date DESC\n            ) AS relevant_record INTO #holding\n        FROM\n            finance.arr_daily fact\n        WHERE\n            company_id <> 0\n            AND company_id IS NOT NULL;\n\nUPDATE\n    finance.arr_daily\nSET\n    sfdc_id = holding.sfdc_id,\n    segment_company = ISNULL(fact.segment_company, holding.segment_company),\n    update_date = SYSDATE\nFROM\n    finance.arr_daily fact\n    JOIN #holding holding ON fact.company_id::varchar(max) = holding.company_id::varchar(max) AND holding.relevant_record = 1\n    JOIN view_dim_calendar calendar ON fact.date = calendar.date\n    JOIN view_dim_calendar yesterday ON TRUNC(dateadd(day, -1, SYSDATE)) = yesterday.date\n    AND calendar.first_day_of_quarter = yesterday.first_day_of_quarter\nWHERE\n    ISNULL(fact.sfdc_id, '') <> ISNULL(holding.sfdc_id, '')\n    OR fact.segment_company IS NULL;\n\n/*This block of code is to update the flash_segment fields to the segment at the start of the quarter for flash reporting*/\nDROP TABLE IF EXISTS #flash_segment_update;\nWITH cte AS (\n    SELECT\n        arr_daily.*,\n        calendar.first_day_of_quarter,\n        ROW_NUMBER() OVER (\n            PARTITION BY ISNULL(sfdc_id, company_id :: varchar(max)),\n            calendar.first_day_of_quarter\n            ORDER BY\n                calendar.date ASC\n        ) AS quarter_relevant_record\n    FROM\n        finance.arr_daily\n        JOIN view_dim_calendar calendar ON arr_daily.date = calendar.date --AND calendar.year < 2020 --AND quarter = 2\n        JOIN view_dim_calendar today ON TRUNC(dateadd(day, -1, SYSDATE)) = today.date\n    WHERE\n        calendar.first_day_of_quarter = today.first_day_of_quarter\n)\nSELECT\n    cte.date,\n    cte.source,\n    cte.company_id,\n    cte.sfdc_id,\n    cte.company,\n    cte.segment,\n    cte.segment_customer,\n    cte.segment_revenue,\n    cte.segment_company,\n    cte.mrr,\n    cte.mrr * 12 AS arr,\n    cte.product_id,\n    cte.seats,\n    cte.billing_frequency,\n    cte2.segment AS flash_segment,\n    cte2.segment_customer AS flash_segment_customer,\n    cte2.segment_revenue AS flash_segment_revenue,\n    cte2.segment_company AS flash_segment_company,\n    cte.zuora_rate_plan_charge_id,\n    cte.load_date,\n    SYSDATE AS update_date INTO #flash_segment_update\nFROM\n    cte\n    LEFT JOIN cte cte2 ON ISNULL(cte.sfdc_id, cte.company_id :: varchar(max)) = ISNULL(cte2.sfdc_id, cte2.company_id :: varchar(max))\n    AND cte.first_day_of_quarter = cte2.first_day_of_quarter\n    AND cte2.quarter_relevant_record = 1;\n\nUPDATE\n    finance.arr_daily\nSET\n    flash_segment = flash.flash_segment,\n    flash_segment_customer = flash.flash_segment_customer,\n    flash_segment_revenue = flash.flash_segment_revenue,\n    flash_segment_company = flash.flash_segment_company,\n    update_date = flash.update_date\nFROM\n    #flash_segment_update flash\n    JOIN finance.arr_daily fact ON ISNULL(flash.sfdc_id, flash.company_id :: varchar(max)) = ISNULL(fact.sfdc_id, fact.company_id :: varchar(max))\n    AND flash.date = fact.date\nWHERE\n    fact.flash_segment IS NULL\n    OR fact.flash_segment <> flash.flash_segment\n    OR fact.flash_segment_customer <> flash.flash_segment_customer\n    OR fact.flash_segment_revenue <> flash.flash_segment_revenue\n    OR fact.flash_segment_company <> flash.flash_segment_company;\n\n{% endset %}\n{% do run_query(sql) %}\n{% do log(\"Update arr daily procedure completed\", info=True) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8379967}, "macro.main.update_arr_flash": {"unique_id": "macro.main.update_arr_flash", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/arr/update_arr_flash.sql", "original_file_path": "macros/arr/update_arr_flash.sql", "name": "update_arr_flash", "macro_sql": "{% macro update_arr_flash() %}\n{% set sql %}\n\n    DROP TABLE IF EXISTS #segment;\n    SELECT\n        calendar.first_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) AS sfdc_id,\n        daily.flash_segment,\n        ROW_NUMBER() OVER (\n            PARTITION BY calendar.first_day_of_quarter,\n            ISNULL(\n                LEFT(daily.sfdc_id, 15),\n                daily.company_id :: varchar(max)\n            )\n            ORDER BY\n                daily.date\n        ) AS relevant_record INTO #segment\n    FROM\n        finance.arr_daily daily\n        JOIN view_dim_calendar calendar ON daily.date = calendar.date;\n\n    /*BoP Query*/\n    DROP TABLE IF EXISTS #bop;\n    SELECT\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) AS sfdc_id,\n        ISNULL(segment.flash_segment, daily.flash_segment) AS flash_segment,\n        SUM(daily.arr :: decimal(10, 2)) AS bop INTO #bop\n    FROM\n        finance.arr_daily daily\n        JOIN view_dim_calendar calendar ON dateadd(day, 1, daily.date) = calendar.date\n        LEFT JOIN #segment segment\n        ON calendar.first_day_of_quarter = segment.first_day_of_quarter\n        AND ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) = segment.sfdc_id\n        AND segment.relevant_record = 1\n    WHERE\n        calendar.date = calendar.first_day_of_quarter\n    GROUP BY\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ),\n        ISNULL(segment.flash_segment, daily.flash_segment)\n    ORDER BY\n        last_day_of_quarter DESC,\n        flash_segment;\n\n    /*EoP Query*/\n    DROP TABLE IF EXISTS #eop;\n    SELECT\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ) AS sfdc_id,\n        daily.flash_segment,\n        SUM(daily.arr :: decimal(10, 2)) AS eop INTO #eop\n    FROM\n        finance.arr_daily daily\n        JOIN view_dim_calendar calendar ON daily.date = calendar.date\n    WHERE\n        calendar.date = calendar.last_day_of_quarter\n        OR calendar.date = (\n            SELECT\n                MAX(date)\n            FROM\n                finance.arr_daily\n        )\n    GROUP BY\n        calendar.last_day_of_quarter,\n        ISNULL(\n            LEFT(daily.sfdc_id, 15),\n            daily.company_id :: varchar(max)\n        ),\n        daily.flash_segment\n    ORDER BY\n        last_day_of_quarter DESC,\n        flash_segment;\n\n    DROP TABLE IF EXISTS #new_logo;\n    SELECT\n        eop.last_day_of_quarter,\n        eop.sfdc_id,\n        eop.flash_segment,\n        eop.EoP AS new_logo INTO #new_logo\n    FROM\n        #eop eop\n    WHERE\n        NOT EXISTS (\n            SELECT\n                1\n            FROM\n                #bop bop\n            WHERE\n                eop.last_day_of_quarter = bop.last_day_of_quarter\n                AND eop.sfdc_id = bop.sfdc_id\n        );\n\n    DROP TABLE IF EXISTS #expansion;\n    SELECT\n        eop.last_day_of_quarter,\n        eop.sfdc_id,\n        eop.flash_segment,\n        (eop.EoP - bop.bop) :: decimal(10, 2) AS expansion INTO #expansion\n    FROM\n        #eop eop\n        JOIN #bop bop\n        ON eop.last_day_of_quarter = bop.last_day_of_quarter\n        AND eop.sfdc_id = bop.sfdc_id\n        AND eop.eop > bop.bop;\n\n    DROP TABLE IF EXISTS #contraction;\n    SELECT\n        eop.last_day_of_quarter,\n        eop.sfdc_id,\n        eop.flash_segment,\n        (eop.EoP - bop.bop) :: decimal(10, 2) AS contraction INTO #contraction\n    FROM\n        #bop bop\n        JOIN #eop eop\n        ON eop.last_day_of_quarter = bop.last_day_of_quarter\n        AND eop.sfdc_id = bop.sfdc_id\n        AND eop.eop < bop.bop;\n\n    DROP TABLE IF EXISTS #churn;\n    SELECT\n        bop.last_day_of_quarter,\n        bop.sfdc_id,\n        bop.flash_segment,\n        (-1 * bop.bop) :: decimal(10, 2) AS churn INTO #churn\n    FROM\n        #bop bop\n    WHERE\n        NOT EXISTS (\n            SELECT\n                1\n            FROM\n                #eop eop\n            WHERE\n                eop.last_day_of_quarter = bop.last_day_of_quarter\n                AND eop.sfdc_id = bop.sfdc_id\n        );\n\n    DROP TABLE IF EXISTS #bop_aggregate; SELECT last_day_of_quarter, flash_segment, SUM(bop) AS bop INTO #bop_aggregate FROM #bop GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #eop_aggregate; SELECT last_day_of_quarter, flash_segment, SUM(eop) AS eop INTO #eop_aggregate FROM #eop GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #new_logo_aggregate; SELECT last_day_of_quarter, flash_segment, SUM(new_logo) AS new_logo INTO #new_logo_aggregate FROM #new_logo GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #expansion_aggregate; SELECT last_day_of_quarter, flash_segment, SUM(expansion) AS expansion INTO #expansion_aggregate FROM #expansion GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #contraction_aggregate; SELECT last_day_of_quarter, flash_segment, SUM(contraction) AS contraction INTO #contraction_aggregate FROM #contraction GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #churn_aggregate; SELECT last_day_of_quarter, flash_segment, SUM(churn) AS churn INTO #churn_aggregate FROM #churn GROUP BY last_day_of_quarter, flash_segment;\n    DROP TABLE IF EXISTS #arr_staging;\n    SELECT\n        calendar.last_day_of_quarter,\n        calendar.year,\n        'Q' + calendar.quarter :: varchar(1) AS quarter,\n        eop.flash_segment,\n        NVL(bop.bop, 0) AS bop,\n        NVL(new_logo.new_logo, 0) AS new_logo,\n        NVL(expansion.expansion, 0) AS expansion,\n        NVL(contraction.contraction, 0) AS contraction,\n        NVL(churn.churn, 0) AS churn,\n        eop.eop,\n        NVL(NVL(bop_next_quarter.bop, eop.eop), 0) - NVL(eop.eop, 0) AS segment_movement,\n        NVL(bop_next_quarter.bop, eop.eop) AS eop_restated INTO #arr_staging\n    FROM\n        #eop_aggregate eop\n        JOIN view_dim_calendar calendar ON eop.last_day_of_quarter = calendar.date\n        LEFT JOIN #bop_aggregate bop ON eop.last_day_of_quarter = bop.last_day_of_quarter AND eop.flash_segment = bop.flash_segment\n        LEFT JOIN #new_logo_aggregate new_logo ON eop.last_day_of_quarter = new_logo.last_day_of_quarter AND eop.flash_segment = new_logo.flash_segment\n        LEFT JOIN #expansion_aggregate expansion ON eop.last_day_of_quarter = expansion.last_day_of_quarter AND eop.flash_segment = expansion.flash_segment\n        LEFT JOIN #contraction_aggregate contraction ON eop.last_day_of_quarter = contraction.last_day_of_quarter AND eop.flash_segment = contraction.flash_segment\n        LEFT JOIN #churn_aggregate churn ON eop.last_day_of_quarter = churn.last_day_of_quarter AND eop.flash_segment = churn.flash_segment\n        LEFT JOIN #bop_aggregate bop_next_quarter ON dateadd(day,-1,dateadd(month,3,dateadd(day,1,eop.last_day_of_quarter))) = bop_next_quarter.last_day_of_quarter AND eop.flash_segment = bop_next_quarter.flash_segment\n    ORDER BY\n        calendar.last_day_of_quarter DESC,\n        flash_segment;\n\n    DROP TABLE IF EXISTS #arr_with_totals;\n    SELECT\n        * INTO #arr_with_totals\n    FROM\n        #arr_staging\n    UNION\n    ALL\n    SELECT\n        last_day_of_quarter,\n        year,\n        quarter,\n        '~TOTAL~' AS flash_segment,\n        SUM(bop) AS bop,\n        SUM(new_logo) AS new_logo,\n        SUM(expansion) AS expansion,\n        SUM(contraction) AS contraction,\n        SUM(churn) AS churn,\n        SUM(eop) AS eop,\n        0 AS segment_movement,\n        SUM(eop_restated) AS eop_restated\n    FROM\n        #arr_staging\n    GROUP BY\n        last_day_of_quarter,\n        year,\n        quarter;\n\n    DROP TABLE IF EXISTS #flash_report;\n    SELECT\n        arr.last_day_of_quarter,\n        arr.year,\n        arr.quarter,\n        arr.flash_segment,\n        arr.bop,\n        arr.new_logo,\n        arr.expansion,\n        arr.contraction,\n        arr.churn,\n        arr.eop,\n        arr.segment_movement,\n        arr.eop_restated,\n        (arr.eop - arr.bop) AS net_change,\n        (\n            (\n                (\n                    arr.bop + (arr.contraction * 4) + (arr.churn * 4)\n                ) / CASE\n                    WHEN arr.bop = 0 THEN 1\n                    ELSE arr.bop\n                END\n            ) * 100\n        ) :: decimal(10, 2) AS grr,\n        (\n            (\n                (\n                    arr.bop + (arr.expansion * 4) + (arr.contraction * 4) + (arr.churn * 4)\n                ) / CASE\n                    WHEN arr.bop = 0 THEN 1\n                    ELSE arr.bop\n                END\n            ) * 100\n        ) :: decimal(10, 2) AS nrr,\n        (\n            (\n                (arr.eop_restated - arr_yoy.eop_restated) / arr_yoy.eop_restated\n            ) * 100\n        ) :: decimal(10, 2) AS yoy_growth,\n        (\n            (\n                (\n                    arr_ttm_bop.bop + SUM(arr_lag.contraction) + SUM(arr_lag.churn)\n                ) / CASE\n                    WHEN arr_ttm_bop.bop = 0 THEN 1\n                    ELSE arr_ttm_bop.bop\n                END\n            ) * 100\n        ) :: decimal(10, 2) AS grr_ttm,\n        (\n            (\n                (\n                    arr_ttm_bop.bop + SUM(arr_lag.expansion) + SUM(arr_lag.contraction) + SUM(arr_lag.churn)\n                ) / CASE\n                    WHEN arr_ttm_bop.bop = 0 THEN 1\n                    ELSE arr_ttm_bop.bop\n                END\n            ) * 100\n        ) :: decimal(10, 2) AS nrr_ttm INTO #flash_report\n    FROM\n        #arr_with_totals arr\n        JOIN view_dim_calendar calendar ON arr.last_day_of_quarter = calendar.date\n        LEFT JOIN finance.flash_arr arr_yoy ON dateadd(year, -1, arr.last_day_of_quarter) = arr_yoy.last_day_of_quarter\n        AND arr.flash_segment = arr_yoy.flash_segment\n        LEFT JOIN finance.flash_arr arr_ttm_bop ON dateadd(\n            day,\n            -1,\n            dateadd(month, -9, dateadd(day, 1, arr.last_day_of_quarter))\n        ) = arr_ttm_bop.last_day_of_quarter\n        AND arr.flash_segment = arr_ttm_bop.flash_segment\n        LEFT JOIN finance.flash_arr arr_lag ON arr_lag.last_day_of_quarter BETWEEN dateadd(year, -1, dateadd(day, 1, arr.last_day_of_quarter))\n        AND arr.last_day_of_quarter\n        AND arr.flash_segment = arr_lag.flash_segment\n        JOIN view_dim_calendar yesterday ON TRUNC(dateadd(day, -1, SYSDATE)) = yesterday.date\n        AND calendar.first_day_of_quarter = yesterday.first_day_of_quarter\n    GROUP BY\n        arr.last_day_of_quarter,\n        arr.year,\n        arr.quarter,\n        arr.flash_segment,\n        arr.bop,\n        arr.new_logo,\n        arr.expansion,\n        arr.contraction,\n        arr.churn,\n        arr.eop,\n        arr.segment_movement,\n        arr.eop_restated,\n        arr.eop - arr.bop,\n        ((arr.eop - arr_yoy.eop) / arr_yoy.eop) * 100,\n        (\n            (arr.bop + arr.contraction + arr.churn) / CASE\n                WHEN arr.bop = 0 THEN 1\n                ELSE arr.bop\n            END\n        ) * 100,\n        (\n            (\n                arr.bop + arr.expansion + arr.contraction + arr.churn\n            ) / CASE\n                WHEN arr.bop = 0 THEN 1\n                ELSE arr.bop\n            END\n        ) * 100,\n        arr_ttm_bop.bop,\n        arr_yoy.eop_restated\n    ORDER BY\n        arr.last_day_of_quarter DESC,\n        arr.flash_segment;\n\n    UPDATE\n        finance.flash_arr\n    SET\n        last_day_of_quarter = flash.last_day_of_quarter,\n        year = flash.year,\n        quarter = flash.quarter,\n        flash_segment = flash.flash_segment,\n        bop = flash.bop,\n        new_logo = flash.new_logo,\n        expansion = flash.expansion,\n        contraction = flash.contraction,\n        churn = flash.churn,\n        eop = flash.eop,\n        segment_adjustment = flash.segment_movement,\n        eop_restated = flash.eop_restated,\n        net_change = flash.net_change,\n        grr = flash.grr,\n        nrr = flash.nrr,\n        yoy_growth = flash.yoy_growth,\n        grr_ttm = flash.grr_ttm,\n        nrr_ttm = flash.nrr_ttm,\n        update_date = sysdate\n    FROM\n        finance.flash_arr arr\n        JOIN #flash_report flash ON arr.last_day_of_quarter = flash.last_day_of_quarter AND arr.flash_segment = flash.flash_segment;\n    INSERT INTO\n        finance.flash_arr (\n            last_day_of_quarter,\n            year,\n            quarter,\n            flash_segment,\n            bop,\n            new_logo,\n            expansion,\n            contraction,\n            churn,\n            eop,\n            segment_adjustment,\n            eop_restated,\n            net_change,\n            grr,\n            nrr,\n            yoy_growth,\n            grr_ttm,\n            nrr_ttm,\n            load_date\n        )\n    SELECT\n        flash.last_day_of_quarter,\n        flash.year,\n        flash.quarter,\n        flash.flash_segment,\n        flash.bop,\n        flash.new_logo,\n        flash.expansion,\n        flash.contraction,\n        flash.churn,\n        flash.eop,\n        flash.segment_movement,\n        flash.eop_restated,\n        flash.net_change,\n        flash.grr,\n        flash.nrr,\n        flash.yoy_growth,\n        flash.grr_ttm,\n        flash.nrr_ttm,\n        sysdate\n    FROM\n        #flash_report flash\n    WHERE\n        NOT EXISTS (\n            SELECT\n                1\n            FROM\n                finance.flash_arr arr\n            WHERE\n                flash.last_day_of_quarter = arr.last_day_of_quarter\n                AND flash.flash_segment = arr.flash_segment\n        );\n\n{% endset %}\n{% do run_query(sql) %}\n{% do log(\"Update arr flash procedure completed\", info=True) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.840155}, "macro.main.update_arr_detail": {"unique_id": "macro.main.update_arr_detail", "package_name": "main", "root_path": "/home/mszyjkowski/workspace/data-dbt", "path": "macros/arr/update_arr_detail.sql", "original_file_path": "macros/arr/update_arr_detail.sql", "name": "update_arr_detail", "macro_sql": "{% macro update_arr_detail() %}\n{% set sql %}\nDROP TABLE IF EXISTS #segment;\nSELECT\n    calendar.first_day_of_quarter,\n    ISNULL(LEFT(daily.sfdc_id,15),daily.company_id::varchar(max)) AS sfdc_id,\n    daily.flash_segment,\n    ROW_NUMBER() OVER (PARTITION BY calendar.first_day_of_quarter,ISNULL(LEFT(daily.sfdc_id,15),daily.company_id::varchar(max)) ORDER BY daily.date) AS relevant_record\nINTO #segment\nFROM finance.arr_daily daily\n         JOIN view_dim_calendar calendar ON daily.date = calendar.date;\n\nDROP TABLE IF EXISTS #daily_storage;\nSELECT\n    calendar.last_day_of_quarter,\n    calendar.date,\n    ISNULL(LEFT(fact.sfdc_id,15),fact.company_id::varchar(max)) AS sfdc_id,\n    fact.flash_segment,\n    SUM(fact.arr::decimal(10,2)) AS arr,\n    ROW_NUMBER() OVER (PARTITION BY ISNULL(LEFT(fact.sfdc_id,15),fact.company_id::varchar(max)) ORDER BY fact.date ASC) AS rn\nINTO #daily_storage\nFROM finance.arr_daily fact\n         JOIN view_dim_calendar calendar ON fact.date = calendar.date\nGROUP BY calendar.last_day_of_quarter, calendar.date, ISNULL(LEFT(fact.sfdc_id,15),fact.company_id::varchar(max)), fact.flash_segment, fact.date;\n\n/*BoP Query*/\nDROP TABLE IF EXISTS #bop;\nSELECT\n    calendar.last_day_of_quarter,\n    ISNULL(LEFT(daily.sfdc_id,15),daily.company_id::varchar(max)) AS sfdc_id,\n    ISNULL(segment.flash_segment,daily.flash_segment) AS flash_segment,\n    SUM(daily.arr::decimal(10,2)) AS bop\nINTO #bop\nFROM finance.arr_daily daily\n         JOIN view_dim_calendar calendar ON dateadd(day,1,daily.date) = calendar.date\n         LEFT JOIN #segment segment\n                   ON calendar.first_day_of_quarter = segment.first_day_of_quarter\n                       AND ISNULL(LEFT(daily.sfdc_id,15),daily.company_id::varchar(max)) = segment.sfdc_id AND segment.relevant_record = 1\nWHERE calendar.date = calendar.first_day_of_quarter\nGROUP BY calendar.last_day_of_quarter, ISNULL(LEFT(daily.sfdc_id,15),daily.company_id::varchar(max)), ISNULL(segment.flash_segment,daily.flash_segment)\nORDER BY last_day_of_quarter DESC, flash_segment;\n\n/*EoP Query*/\nDROP TABLE IF EXISTS #eop;\nSELECT\n    calendar.last_day_of_quarter,\n    ISNULL(LEFT(daily.sfdc_id,15),daily.company_id::varchar(max)) AS sfdc_id,\n    daily.flash_segment,\n    SUM(daily.arr::decimal(10,2)) AS eop\nINTO #eop\nFROM finance.arr_daily daily\n         JOIN view_dim_calendar calendar ON daily.date = calendar.date\nWHERE calendar.date = calendar.last_day_of_quarter\n   OR calendar.date = (SELECT MAX(date) FROM finance.arr_daily)\nGROUP BY calendar.last_day_of_quarter, ISNULL(LEFT(daily.sfdc_id,15),daily.company_id::varchar(max)), daily.flash_segment\nORDER BY last_day_of_quarter DESC, flash_segment;\n\nDROP TABLE IF EXISTS #new_logo;\nSELECT\n    eop.last_day_of_quarter,\n    eop.sfdc_id,\n    eop.flash_segment,\n    eop.EoP AS new_logo\nINTO #new_logo\nFROM #eop eop\nWHERE NOT EXISTS (SELECT 1 FROM #bop bop\n                  WHERE eop.last_day_of_quarter = bop.last_day_of_quarter AND eop.sfdc_id = bop.sfdc_id);\n\nDROP TABLE IF EXISTS #new_logo_detail;\nSELECT\n    daily.last_day_of_quarter,\n    daily.date AS new_logo_date,\n    daily.sfdc_id,\n    daily.flash_segment,\n--     daily.arr AS new_logo,\n    new_logo.new_logo AS new_logo,\n    ROW_NUMBER() OVER (PARTITION BY daily.sfdc_id, daily.last_day_of_quarter ORDER BY daily.date ASC) AS rn\nINTO #new_logo_detail\nFROM #daily_storage daily\n         LEFT JOIN #daily_storage daily_prior_day ON daily.date = dateadd(day,1,daily_prior_day.date) AND daily.sfdc_id = daily_prior_day.sfdc_id\n         JOIN #new_logo new_logo ON daily.sfdc_id = new_logo.sfdc_id AND daily.last_day_of_quarter = new_logo.last_day_of_quarter\nWHERE daily_prior_day.sfdc_id IS NULL;\n--     AND EXISTS (SELECT 1 FROM #new_logo new_logo WHERE daily.sfdc_id = new_logo.sfdc_id AND daily.last_day_of_quarter = new_logo.last_day_of_quarter);\n\nDROP TABLE IF EXISTS #expansion;\nSELECT\n    eop.last_day_of_quarter,\n    eop.sfdc_id,\n    eop.flash_segment,\n    (eop.EoP - bop.bop)::decimal(10,2) AS expansion\nINTO #expansion\nFROM #eop eop\n         JOIN #bop bop\n              ON eop.last_day_of_quarter = bop.last_day_of_quarter AND eop.sfdc_id = bop.sfdc_id AND eop.eop > bop.bop;\n\nDROP TABLE IF EXISTS #expansion_detail;\nSELECT\n    daily.last_day_of_quarter,\n    daily.date AS expansion_date,\n    daily.sfdc_id,\n    daily.flash_segment,\n--     daily.arr - daily_prior_day.arr AS expansion,\n    expansion.expansion AS expansion,\n    ROW_NUMBER() OVER (PARTITION BY daily.sfdc_id, daily.last_day_of_quarter ORDER BY daily.date ASC) AS rn\nINTO #expansion_detail\nFROM #daily_storage daily\n-- LEFT JOIN #daily_storage daily_prior_day ON daily.date = dateadd(day,1,daily_prior_day.date) AND daily.sfdc_id = daily_prior_day.sfdc_id\n         LEFT JOIN #daily_storage daily_prior_day ON daily.rn = daily_prior_day.rn + 1 AND daily.sfdc_id = daily_prior_day.sfdc_id\n         JOIN #expansion expansion ON daily.sfdc_id = expansion.sfdc_id AND daily.last_day_of_quarter = expansion.last_day_of_quarter\nWHERE daily.arr > daily_prior_day.arr;\n--   AND EXISTS (SELECT 1 FROM #expansion expansion WHERE daily.sfdc_id = expansion.sfdc_id AND daily.last_day_of_quarter = expansion.last_day_of_quarter);\n\nDROP TABLE IF EXISTS #contraction;\nSELECT\n    eop.last_day_of_quarter,\n    eop.sfdc_id,\n    eop.flash_segment,\n    (eop.EoP - bop.bop)::decimal(10,2) AS contraction\nINTO #contraction\nFROM #bop bop\n         JOIN #eop eop\n              ON eop.last_day_of_quarter = bop.last_day_of_quarter AND eop.sfdc_id = bop.sfdc_id AND eop.eop < bop.bop;\n\nDROP TABLE IF EXISTS #contraction_detail;\nSELECT\n    daily.last_day_of_quarter,\n    daily.date AS contraction_date,\n    daily.sfdc_id,\n    daily.flash_segment,\n--     daily.arr - daily_prior_day.arr AS contraction,\n    contraction.contraction AS contraction,\n    ROW_NUMBER() OVER (PARTITION BY daily.sfdc_id, daily.last_day_of_quarter ORDER BY daily.date ASC) AS rn\nINTO #contraction_detail\nFROM #daily_storage daily\n-- LEFT JOIN #daily_storage daily_prior_day ON daily.date = dateadd(day,1,daily_prior_day.date) AND daily.sfdc_id = daily_prior_day.sfdc_id\n         LEFT JOIN #daily_storage daily_prior_day ON daily.rn = daily_prior_day.rn + 1 AND daily.sfdc_id = daily_prior_day.sfdc_id\n         JOIN #contraction contraction ON daily.sfdc_id = contraction.sfdc_id AND daily.last_day_of_quarter = contraction.last_day_of_quarter\nWHERE daily.arr < daily_prior_day.arr;\n--   AND EXISTS (SELECT 1 FROM #contraction contraction WHERE daily.sfdc_id = contraction.sfdc_id AND daily.last_day_of_quarter = contraction.last_day_of_quarter);\n\nDROP TABLE IF EXISTS #churn;\nSELECT\n    bop.last_day_of_quarter,\n    bop.sfdc_id,\n    bop.flash_segment,\n    (-1 * bop.bop)::decimal(10,2) AS churn\nINTO #churn\nFROM #bop bop\nWHERE NOT EXISTS (SELECT 1 FROM #eop eop\n                  WHERE eop.last_day_of_quarter = bop.last_day_of_quarter AND eop.sfdc_id = bop.sfdc_id);\n\nDROP TABLE IF EXISTS #churn_detail;\nSELECT\n    calendar.last_day_of_quarter,\n    dateadd(day,1,daily.date)::date AS churn_date,\n    daily.sfdc_id,\n    daily.flash_segment,\n--     -1 * daily.arr AS churn,\n    churn.churn AS churn,\n    ROW_NUMBER() OVER (PARTITION BY daily.sfdc_id, daily.last_day_of_quarter ORDER BY daily.date ASC) AS rn\nINTO #churn_detail\nFROM #daily_storage daily\n         JOIN view_dim_calendar calendar ON dateadd(day,1,daily.date) = calendar.date\n         LEFT JOIN #daily_storage daily_prior_day ON calendar.date = daily_prior_day.date AND daily.sfdc_id = daily_prior_day.sfdc_id\n         JOIN #churn churn ON daily.sfdc_id = churn.sfdc_id AND calendar.last_day_of_quarter = churn.last_day_of_quarter\nWHERE daily_prior_day.sfdc_id IS NULL;\n--   AND EXISTS (SELECT 1 FROM #churn churn WHERE daily.sfdc_id = churn.sfdc_id AND daily.last_day_of_quarter = churn.last_day_of_quarter);\n\nDROP TABLE IF EXISTS #daily_temp;\nSELECT fact.*, calendar.last_day_of_quarter, ROW_NUMBER() OVER (PARTITION BY calendar.last_day_of_quarter, ISNULL(fact.sfdc_id,fact.company_id::varchar(max)) ORDER BY fact.date DESC, fact.mrr DESC) AS rn INTO #daily_temp FROM finance.arr_daily fact\n                                                                                                                                                                                                                                      JOIN view_dim_calendar calendar ON fact.date = calendar.date;\n\nDROP TABLE IF EXISTS #arr_detail;\nSELECT\n    new_logo.last_day_of_quarter,\n    new_logo.new_logo_date AS arr_date,\n    'New Logo' AS arr_category,\n    temp.sfdc_id,\n    temp.company_id,\n    temp.company,\n    temp.flash_segment,\n    new_logo.new_logo AS arr\nINTO #arr_detail\nFROM #new_logo_detail new_logo\n         LEFT JOIN #daily_temp temp ON new_logo.sfdc_id = ISNULL(LEFT(temp.sfdc_id,15),temp.company_id::varchar(max))\n    AND new_logo.last_day_of_quarter = temp.last_day_of_quarter\n    AND temp.rn = 1\nWHERE new_logo.rn = 1\nUNION\nSELECT\n    expansion.last_day_of_quarter,\n    expansion.expansion_date AS arr_date,\n    'Expansion' AS arr_category,\n    temp.sfdc_id,\n    temp.company_id,\n    temp.company,\n    temp.flash_segment,\n    expansion.expansion AS arr\nFROM #expansion_detail expansion\n         LEFT JOIN #daily_temp temp ON expansion.sfdc_id = ISNULL(LEFT(temp.sfdc_id,15),temp.company_id::varchar(max))\n    AND expansion.last_day_of_quarter = temp.last_day_of_quarter\n    AND temp.rn = 1\nWHERE expansion.rn = 1\nUNION\nSELECT\n    contraction.last_day_of_quarter,\n    contraction.contraction_date AS arr_date,\n    'Contraction' AS arr_category,\n    temp.sfdc_id,\n    temp.company_id,\n    temp.company,\n    temp.flash_segment,\n    contraction.contraction AS arr\nFROM #contraction_detail contraction\n         LEFT JOIN #daily_temp temp ON contraction.sfdc_id = ISNULL(LEFT(temp.sfdc_id,15),temp.company_id::varchar(max))\n    AND contraction.last_day_of_quarter = temp.last_day_of_quarter\n    AND temp.rn = 1\nWHERE contraction.rn = 1\nUNION\nSELECT\n    churn.last_day_of_quarter,\n    churn.churn_date AS arr_date,\n    'Churn' AS arr_category,\n    ISNULL(temp.sfdc_id,temp2.sfdc_id) AS sfdc_id,\n    ISNULL(temp.company_id,temp2.company_id) AS company_id,\n    ISNULL(temp.company,temp2.company) AS company,\n    ISNULL(temp.flash_segment,temp2.flash_segment) AS flash_segment,\n    churn.churn AS arr\nFROM #churn_detail churn\n         JOIN view_dim_calendar calendar ON dateadd(day,-1,dateadd(month,-3,dateadd(day,1,churn.last_day_of_quarter))) = calendar.date\n         LEFT JOIN #daily_temp temp ON churn.sfdc_id = ISNULL(LEFT(temp.sfdc_id,15),temp.company_id::varchar(max))\n    AND churn.last_day_of_quarter = temp.last_day_of_quarter\n    AND temp.rn = 1\n         LEFT JOIN #daily_temp temp2 ON churn.sfdc_id = ISNULL(LEFT(temp2.sfdc_id,15),temp2.company_id::varchar(max))\n    AND calendar.last_day_of_quarter = temp2.last_day_of_quarter\n    AND temp2.rn = 1\nWHERE churn.rn = 1;\n\n-- DELETE FROM finance.arr_detail\n-- WHERE EXISTS (SELECT 1 FROM #arr_detail arr\n--                                 JOIN view_dim_calendar calendar ON arr.last_day_of_quarter = calendar.date\n--                                 JOIN view_dim_calendar yesterday ON dateadd(day,-1,TRUNC(sysdate)) = yesterday.date\n--               WHERE calendar.first_day_of_quarter = yesterday.first_day_of_quarter\n--                 AND fact_arr_detail.last_day_of_quarter = calendar.last_day_of_quarter);\n\nDELETE FROM finance.arr_detail;\n\nINSERT INTO finance.arr_detail\n(\n    last_day_of_quarter,\n    year,\n    quarter,\n    flash_segment,\n    sfdc_id,\n    company_id,\n    company,\n    arr_category,\n    arr_date,\n    arr,\n    load_date\n)\nSELECT\n    calendar.last_day_of_quarter,\n    calendar.year,\n    'Q' + calendar.quarter::varchar(1) AS quarter,\n    arr.flash_segment,\n    arr.sfdc_id,\n    arr.company_id,\n    arr.company,\n    arr.arr_category,\n    arr.arr_date,\n    arr.arr,\n    sysdate\nFROM #arr_detail arr\n         JOIN view_dim_calendar calendar ON arr.last_day_of_quarter = calendar.date\n--          JOIN view_dim_calendar yesterday ON dateadd(day,-1,TRUNC(sysdate)) = yesterday.date\n-- WHERE calendar.first_day_of_quarter = yesterday.first_day_of_quarter\nORDER BY calendar.date, CASE arr.arr_category WHEN 'New Logo' THEN 1 WHEN 'Expansion' THEN 2 WHEN 'Contraction' THEN 3 ELSE 4 END, arr.sfdc_id, arr.company_id, arr.arr;\n\n{% endset %}\n{% do run_query(sql) %}\n{% do log(\"Update arr detail procedure completed\", info=True) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8422563}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8464952}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8471696}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8475647}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8478518}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8484924}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.856024}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.856548}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8576243}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8581197}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.858263}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8584049}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8590908}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8592634}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.859419}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.859574}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8597527}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n  getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8598416}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8599606}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.860168}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8609626}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8611658}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8613656}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8621485}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8624809}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.862837}, "macro.dbt_redshift.redshift__last_day": {"unique_id": "macro.dbt_redshift.redshift__last_day", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8633358}, "macro.dbt_redshift.redshift__dateadd": {"unique_id": "macro.dbt_redshift.redshift__dateadd", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8637242}, "macro.dbt_redshift.redshift__split_part": {"unique_id": "macro.dbt_redshift.redshift__split_part", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8643062}, "macro.dbt_redshift.redshift__length": {"unique_id": "macro.dbt_redshift.redshift__length", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8645937}, "macro.dbt_redshift.redshift__datediff": {"unique_id": "macro.dbt_redshift.redshift__datediff", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8649619}, "macro.dbt_redshift.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_redshift.redshift__cast_bool_to_text", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8652759}, "macro.dbt_redshift.redshift__listagg": {"unique_id": "macro.dbt_redshift.redshift__listagg", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}\n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.867031}, "macro.dbt_redshift.redshift__get_show_grant_sql": {"unique_id": "macro.dbt_redshift.redshift__get_show_grant_sql", "package_name": "dbt_redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "redshift__get_show_grant_sql", "macro_sql": "{% macro redshift__get_show_grant_sql(relation) %}\n\nwith privileges as (\n\n    -- valid options per https://docs.aws.amazon.com/redshift/latest/dg/r_HAS_TABLE_PRIVILEGE.html\n    select 'select' as privilege_type\n    union all\n    select 'insert' as privilege_type\n    union all\n    select 'update' as privilege_type\n    union all\n    select 'delete' as privilege_type\n    union all\n    select 'references' as privilege_type\n\n)\n\nselect\n    u.usename as grantee,\n    p.privilege_type\nfrom pg_user u\ncross join privileges p\nwhere has_table_privilege(u.usename, '{{ relation }}', privilege_type)\n    and u.usename != current_user\n    and not u.usesuper\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8673856}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8685372}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8743148}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.874892}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8752666}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.875627}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8762383}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8766646}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8768637}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8772645}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8777096}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.877802}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8780093}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8781328}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8790762}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8793063}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8796751}, "macro.dbt_postgres.postgres__make_backup_relation": {"unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8799906}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8804803}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8807425}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8814273}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8816621}, "macro.dbt_postgres.postgres__copy_grants": {"unique_id": "macro.dbt_postgres.postgres__copy_grants", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8818004}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.882516}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.883412}, "macro.dbt_postgres.postgres__last_day": {"unique_id": "macro.dbt_postgres.postgres__last_day", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8841014}, "macro.dbt_postgres.postgres__dateadd": {"unique_id": "macro.dbt_postgres.postgres__dateadd", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8844695}, "macro.dbt_postgres.postgres__any_value": {"unique_id": "macro.dbt_postgres.postgres__any_value", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8847556}, "macro.dbt_postgres.postgres__split_part": {"unique_id": "macro.dbt_postgres.postgres__split_part", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8853467}, "macro.dbt_postgres.postgres__datediff": {"unique_id": "macro.dbt_postgres.postgres__datediff", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8887076}, "macro.dbt_postgres.postgres__listagg": {"unique_id": "macro.dbt_postgres.postgres__listagg", "package_name": "dbt_postgres", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8895142}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8899138}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8903697}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8911016}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.891599}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8928537}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8930848}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8932562}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8934226}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.893589}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.894093}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8944507}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8948052}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.897677}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.898258}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8984735}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8987062}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.8991792}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9030735}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.90449}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9059343}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9067757}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9109936}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9127085}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9129808}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9138343}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9141288}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.914841}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.915799}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9164312}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9171314}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9219258}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.922746}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9255188}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9260314}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9262202}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9264278}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9267304}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9284537}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9289007}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9291582}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9326382}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9366193}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9376702}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9379368}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9384916}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.938722}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9388802}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.939045}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.939183}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9393723}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9395094}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9400578}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9402688}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9418917}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9424615}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9427714}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.948687}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9520288}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.952369}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.952563}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.95267}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9528418}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9529855}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9532335}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9542203}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9544404}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9547334}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9552233}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9585838}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9587834}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9590461}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9592223}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.959343}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9602215}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9604197}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9606214}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.962206}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9637012}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9659915}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9665084}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9669518}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9675245}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.967882}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9683766}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9686852}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.968857}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9692569}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9693923}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9698772}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.970071}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9704733}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.970599}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9709952}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9711225}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9717784}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9720492}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9723163}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9727407}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9728966}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.973296}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9734259}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9739065}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9741027}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9744766}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9745688}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9750044}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9751737}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.97559}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.975782}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9762223}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.976385}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.976787}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.976977}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9777231}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9782763}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.97933}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9795105}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9797006}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9798775}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9800663}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9802487}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.980436}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9806423}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9808302}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9810085}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9811957}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.981366}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9818535}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9820478}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.982487}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.982648}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9830403}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9831896}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9835727}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9837334}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9841442}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9843104}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.985589}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.986248}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9865985}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9883716}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.989743}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9906123}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9908803}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9938257}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.994023}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.994279}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9946122}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9948883}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9952602}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9954715}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.99572}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9959931}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9961827}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9964128}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9967375}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9970164}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9976504}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9979215}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9980874}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9983118}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9988396}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9990602}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.999255}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795233.9994717}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0000672}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0002277}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0004117}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0008764}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.00234}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0026498}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0028667}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0030544}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0033462}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0036347}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0038683}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0042167}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0044322}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0046234}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0054038}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0056045}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.005842}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0060382}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.006346}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0068944}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0085566}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0087042}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0089092}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.009042}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0094328}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0096502}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0097725}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0100436}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0103343}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.010592}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.010814}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0110729}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.011845}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0120642}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0123522}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0126183}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.013936}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0155754}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.015765}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0161288}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0163414}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0167294}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0169914}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0176842}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0179782}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0189576}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.01957}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0197456}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0200171}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0205026}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0211716}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0214825}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0218112}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0223339}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0226004}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0231388}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0234435}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.024093}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.024365}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.024694}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0250163}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.025626}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0264518}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0269208}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0273001}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0277905}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.028327}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0287588}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0289848}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0293932}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0295885}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0299954}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0302038}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0308514}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0316002}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0323582}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0328338}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0330415}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0336957}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0341012}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0348785}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0356734}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0384731}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0402374}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0407867}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0411394}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0417013}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0423002}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0430691}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0434723}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0440452}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0442414}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0448139}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0450084}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0455565}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0459428}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0465617}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0469103}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0475554}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0478294}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0485003}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0491343}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.050048}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0511029}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0516007}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0518138}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0525472}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.05309}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0554533}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0587866}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.059736}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0602334}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0604565}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0610673}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0615642}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0619698}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0627687}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0634754}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0637426}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0641584}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0653312}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.066312}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0670338}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.068133}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0692117}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0695362}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0702753}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0712218}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0726771}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0729988}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.07384}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.074435}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0761812}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0784736}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0790508}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.079382}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0801702}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0811484}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0823214}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0841463}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0849571}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0859313}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0863688}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.086658}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0891976}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.089454}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0896847}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0899124}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0901084}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0903084}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0908916}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0909967}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0910976}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0912004}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0918064}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0926514}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0931168}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0935163}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0942633}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0953116}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0958543}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0965347}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0970783}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.0974128}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.102774}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1033645}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.103724}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.104311}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1101336}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.110867}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.111173}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1113508}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1118047}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1120083}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.112411}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1125364}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1132026}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1133945}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1135857}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1137729}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.113995}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.114469}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1145952}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.114716}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.114836}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1152833}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1154115}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1155417}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1166368}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1180437}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.118243}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1185076}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1188939}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1192935}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1197195}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.120392}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1205306}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1206198}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1207075}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1208951}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1210272}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1211972}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.12133}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1214874}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1228716}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.12341}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.124005}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1242297}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1247182}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1248748}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1250322}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1256492}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.12644}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1265345}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1266255}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1267126}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1267972}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.126984}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1270726}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1271598}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1272576}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1274462}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.127536}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1276226}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1278095}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1278996}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1279867}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.128236}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1283247}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.128411}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.128596}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.128684}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1287696}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1292226}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1293516}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1294773}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1318192}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1320205}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1322129}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1342928}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1345296}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1349392}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.135033}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1351225}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1356409}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.135812}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1359684}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1361232}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1365788}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1367483}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1369011}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1375563}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1377194}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1379063}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1380906}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1385262}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1386898}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1388414}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.14093}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.141487}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.141825}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1422892}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1434014}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.143922}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1441197}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1446264}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1447918}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.144953}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1453516}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1455007}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1461303}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1462576}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.146379}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.146777}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.146868}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1469579}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.14744}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.147608}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1477811}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.147943}, "macro.redshift.decode_reldiststyle": {"unique_id": "macro.redshift.decode_reldiststyle", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/utilities.sql", "original_file_path": "macros/utilities.sql", "name": "decode_reldiststyle", "macro_sql": "{% macro decode_reldiststyle(diststyle_field, distkey_field) -%}\n  decode({{diststyle_field}}, 0, 'even',\n                              1, {{distkey_field}},\n                              'all')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1483555}, "macro.redshift.percentage": {"unique_id": "macro.redshift.percentage", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/utilities.sql", "original_file_path": "macros/utilities.sql", "name": "percentage", "macro_sql": "{% macro percentage(num, denom) -%}\n  (case {{denom}}\n        when 0 then 0\n        else ({{num}}::float / {{denom}}::float) * 100.0 end)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1487076}, "macro.redshift.get_data": {"unique_id": "macro.redshift.get_data", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "name": "get_data", "macro_sql": "{% macro get_data(query, columns) %}\n\n  {%- call statement('_', fetch_result=True) %}\n    {{ query }}\n  {% endcall %}\n\n  {%- set records = load_result('_') -%}\n\n  {% if not records %}\n    {{ return([]) }}\n  {% endif %}\n\n  {%- set ret = [] -%}\n  {% for record in records['data'] %}\n    {% set processing = {} %}\n    {% for column in columns %}\n        {% set _ = processing.update({column: record[loop.index0]}) %}\n    {% endfor %}\n    {% set _ = ret.append(processing) %}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1525524}, "macro.redshift.fetch_table_data": {"unique_id": "macro.redshift.fetch_table_data", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "name": "fetch_table_data", "macro_sql": "{% macro fetch_table_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        schemaname,\n        tablename,\n        description,\n        relation_type\n    from ({{ redshift.fetch_table_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set table = redshift.get_data(sql, ['schema', 'name', 'description', 'type']) %}\n  {{ return(table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_table_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.153023}, "macro.redshift.fetch_column_data": {"unique_id": "macro.redshift.fetch_column_data", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "name": "fetch_column_data", "macro_sql": "{% macro fetch_column_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        col_index,\n        col_name,\n        description,\n        col_datatype,\n        col_encoding,\n        col_default,\n        col_not_null\n    from ({{ redshift.fetch_column_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set columns = redshift.get_data(sql, ['position', 'name', 'description', 'type', 'encoding', 'default', 'not_null']) %}\n\n  {% set ret = {} %}\n  {% for column in columns %}\n      {%- set _ = ret.update({column.name: column}) -%}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_column_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1537497}, "macro.redshift.fetch_sort_dist_key_data": {"unique_id": "macro.redshift.fetch_sort_dist_key_data", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "name": "fetch_sort_dist_key_data", "macro_sql": "{% macro fetch_sort_dist_key_data(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        sort_style,\n        sort_keys,\n        diststyle,\n        dist_key\n    from ({{ redshift.fetch_sort_dist_key_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set keys = redshift.get_data(sql, ['sort_style', 'sort_keys', 'dist_style', 'dist_key']) %}\n  {% for key in keys %}\n    {% set _ = key.update({'sort_keys': key['sort_keys'].split('|')}) %}\n  {% endfor %}\n\n  {{ return(keys) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_sort_dist_key_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1544414}, "macro.redshift.fetch_constraints": {"unique_id": "macro.redshift.fetch_constraints", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "name": "fetch_constraints", "macro_sql": "{% macro fetch_constraints(schema_name, table_name) %}\n\n  {% set sql %}\n    select\n        constraint_type,\n        col_constraint\n    from ({{ redshift.fetch_constraint_data_sql() }})\n    where schemaname = '{{ schema_name }}'\n      and tablename = '{{ table_name }}'\n  {% endset %}\n\n  {% set constraints = redshift.get_data(sql, ['constraint_type', 'col_constraint']) %}\n  {{ return(constraints) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_constraint_data_sql", "macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1548872}, "macro.redshift.fetch_table_definition": {"unique_id": "macro.redshift.fetch_table_definition", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/introspection.sql", "original_file_path": "macros/introspection.sql", "name": "fetch_table_definition", "macro_sql": "{% macro fetch_table_definition(schema_name, table_name) %}\n  {% set tables = redshift.fetch_table_data(schema_name, table_name) %}\n\n  {% if (tables | length) == 0 %}\n    {{ return(none) }}\n  {% elif (tables | length) > 1 %}\n    {{ log(tables) }}\n    {{ exceptions.raise_compiler_error(\"Expected one table\") }}\n  {% endif %}\n\n  {% set table = tables[0] %}\n  {% set columns = redshift.fetch_column_data(schema_name, table_name) %}\n  {% set keys = redshift.fetch_sort_dist_key_data(schema_name, table_name) | first %}\n  {% set constraints = redshift.fetch_constraints(schema_name, table_name) %}\n\n  {% set _ = table.update({\"columns\": columns}) %}\n  {% set _ = table.update({\"keys\": keys}) %}\n  {% set _ = table.update({\"constraints\": constraints}) %}\n\n  {{ return(table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.fetch_table_data", "macro.redshift.fetch_column_data", "macro.redshift.fetch_sort_dist_key_data", "macro.redshift.fetch_constraints"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1561406}, "macro.redshift.find_analyze_recommendations": {"unique_id": "macro.redshift.find_analyze_recommendations", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "name": "find_analyze_recommendations", "macro_sql": "{% macro find_analyze_recommendations(schema, table, comprows=none) %}\n\n  {% set comprows_s = '' if comprows is none else 'comprows ' ~ comprows %}\n  {% set query %}\n    analyze compression \"{{ schema }}\".\"{{ table }}\" {{ comprows_s }}\n  {% endset %}\n\n  {% set columns = redshift.get_data(query, ['table', 'column', 'encoding', 'reduction_pct']) %}\n\n  {% set ret = {} %}\n  {% for column in columns %}\n      {%- set _ = ret.update({column.column: column}) -%}\n  {% endfor %}\n\n  {{ return(ret) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.get_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1597}, "macro.redshift.build_optimized_definition": {"unique_id": "macro.redshift.build_optimized_definition", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "name": "build_optimized_definition", "macro_sql": "{% macro build_optimized_definition(definition, recommendation) -%}\n\n    {% set optimized = {} %}\n    {% set _ = optimized.update(definition) %}\n    {% for name, column in definition['columns'].items() %}\n        {% set recommended_encoding = recommendation[name] %}\n\n        {% if recommended_encoding['encoding'] != column['encoding'] %}\n            {{ log(\"    Changing \" ~ name ~ \": \" ~ column['encoding'] ~ \" -> \" ~ recommended_encoding['encoding'] ~ \" (\" ~ recommended_encoding['reduction_pct'] ~ \"%)\") }}\n        {% else %}\n            {{ log(\"Not Changing \" ~ name ~ \": \" ~ column['encoding']) }}\n        {% endif %}\n\n        {% set _ = optimized['columns'][name].update({\"encoding\": recommended_encoding['encoding']}) %}\n    {% endfor %}\n\n    {{ return(optimized) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1607997}, "macro.redshift.insert_into_sql": {"unique_id": "macro.redshift.insert_into_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "name": "insert_into_sql", "macro_sql": "\n\n{%- macro insert_into_sql(from_schema, from_table, to_schema, to_table) -%}\n\n    insert into \"{{ to_schema }}\".\"{{ to_table }}\" (\n        select * from \"{{ from_schema }}\".\"{{ from_table }}\"\n    );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1610355}, "macro.redshift.atomic_swap_sql": {"unique_id": "macro.redshift.atomic_swap_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "name": "atomic_swap_sql", "macro_sql": "{%- macro atomic_swap_sql(schema, from_table, to_table, drop_backup) -%}\n\n    begin;\n    -- drop table if exists \"{{ schema }}\".\"{{ from_table }}__backup\" cascade;\n    alter table \"{{ schema }}\".\"{{ from_table }}\" rename to \"{{ from_table }}__backup\";\n    alter table \"{{ schema }}\".\"{{ to_table }}\" rename to \"{{ from_table }}\";\n    {% if drop_backup %}\n        drop table \"{{ schema }}\".\"{{ from_table }}__backup\" cascade;\n    {% else %}\n        {{ log('drop_backup is False -- not dropping ' ~ from_table ~ \"__backup\") }}\n    {% endif %}\n    commit;\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.161553}, "macro.redshift.compress_table": {"unique_id": "macro.redshift.compress_table", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/compression.sql", "original_file_path": "macros/compression.sql", "name": "compress_table", "macro_sql": "{%- macro compress_table(schema, table, drop_backup=False,\n                         comprows=none, sort_style=none, sort_keys=none,\n                         dist_style=none, dist_key=none) -%}\n\n  {% if not execute %}\n    {{ return(none) }}\n  {% endif %}\n\n  {% set recommendation = redshift.find_analyze_recommendations(schema, table, comprows) %}\n  {% set definition = redshift.fetch_table_definition(schema, table) %}\n\n  {% if definition is none %}\n    {{ return(none) }}\n  {% endif %}\n\n  {% set optimized = redshift.build_optimized_definition(definition, recommendation) %}\n\n  {% set _ = optimized.update({\"keys\": optimized.get('keys', {}) | default({})}) %}\n  {% if sort_style %} {% set _ = optimized['keys'].update({\"sort_style\": sort_style}) %} {% endif %}\n  {% if sort_keys %}  {% set _ = optimized['keys'].update({\"sort_keys\": sort_keys}) %} {% endif %}\n  {% if dist_style %} {% set _ = optimized['keys'].update({\"dist_style\": dist_style}) %} {% endif %}\n  {% if dist_key %}   {% set _ = optimized['keys'].update({\"dist_key\": dist_key}) %} {% endif %}\n\n  {% set new_table = table ~ \"__compressed\" %}\n  {% set _ = optimized.update({'name': new_table}) %}\n\n  {# Build the DDL #}\n  {{ redshift.build_ddl_sql(optimized) }}\n  {{ redshift.insert_into_sql(schema, table, schema, new_table) }}\n  {{ redshift.atomic_swap_sql(schema, table, new_table, drop_backup) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.find_analyze_recommendations", "macro.redshift.fetch_table_definition", "macro.redshift.build_optimized_definition", "macro.redshift.build_ddl_sql", "macro.redshift.insert_into_sql", "macro.redshift.atomic_swap_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.163729}, "macro.redshift.build_ddl_sql": {"unique_id": "macro.redshift.build_ddl_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/ddl.sql", "original_file_path": "macros/ddl.sql", "name": "build_ddl_sql", "macro_sql": "{% macro build_ddl_sql(def) %}\n\n    -- DROP\n    drop table if exists \"{{ def['schema'] }}\".\"{{ def['name'] }}\";\n    -- CREATE\n    create table \"{{ def['schema'] }}\".\"{{ def['name'] }}\" (\n        -- COLUMNS\n        {% for column in def['columns'].values() | sort(attribute='position') -%}\n            \"{{ column['name'] }}\" {{ column['type'] }}\n            {%- if column['encoding'] is not none %} encode {{ column['encoding'] }} {% endif -%}\n            {%- if column['default'] is not none %} default {{ column['default'] }} {% endif -%}\n            {%- if column['not_null'] %} not null {% endif -%}\n            {%- if not loop.last %}, {% endif %}\n        {% endfor %}\n\n        -- CONSTRAINTS\n        {% for constraint in def['constraints'] -%}\n            , {{ constraint['col_constraint'] }}\n        {% endfor %}\n    )\n\n    --KEYS\n    {% if def['keys'] %}\n        {% set dist_style = def['keys']['dist_style'] %}\n        {% set dist_key = def['keys']['dist_key'] %}\n        -- DIST\n        {% if dist_style %} diststyle {{ dist_style }} {% endif %}\n        {% if dist_key %} distkey(\"{{ dist_key }}\") {% endif %}\n\n        -- SORT\n        {% set sort_style = def['keys']['sort_style'] %}\n        {% set sort_keys = def['keys']['sort_keys'] %}\n        {% set sort_keys_s = sort_keys | join('\", \"') %}\n        {% if sort_keys %} {{ sort_style }} sortkey(\"{{ sort_keys_s }}\") {% endif %}\n    {% endif %}\n    ;\n\n    -- TABLE COMMENT\n    {% if def['description'] %}\n        comment on table \"{{ def['schema'] }}\".\"{{ def['name'] }}\" is '{{ def[\"description\"] }}';\n    {% endif %}\n\n    -- COLUMN COMMENTS\n    {% for column in def['columns'].values() -%}\n        {%- if column['description'] -%}\n            comment on column \"{{ def['schema'] }}\".\"{{ def['name'] }}\".\"{{ column['name'] }}\" is '{{ column[\"description\"] }}';\n\n        {% endif -%}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1676385}, "macro.redshift.unload_table": {"unique_id": "macro.redshift.unload_table", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/unload.sql", "original_file_path": "macros/unload.sql", "name": "unload_table", "macro_sql": "{% macro unload_table(schema,\n                table,\n                s3_path,\n                iam_role=None,\n                aws_key=None,\n                aws_secret=None,\n                aws_region=None,\n                aws_token=None,\n                manifest=False,\n                header=False,\n                format=None,\n                delimiter=\",\",\n                null_as=\"\",\n                max_file_size='6 GB',\n                escape=True,\n                compression=None,\n                add_quotes=False,\n                encrypted=False,\n                overwrite=False,\n                cleanpath=False,\n                parallel=False,\n                partition_by=None\n                ) %}\n\n  -- compile UNLOAD statement\n  UNLOAD ('SELECT * FROM \"{{ schema }}\".\"{{ table }}\"')\n  TO '{{ s3_path }}'\n  {% if iam_role %}\n  IAM_ROLE '{{ iam_role }}'\n  {% elif aws_key and aws_secret %}\n  ACCESS_KEY_ID '{{ aws_key }}'\n  SECRET_ACCESS_KEY '{{ aws_secret }}'\n  {% if aws_token %}\n    SESSION_TOKEN '{{ aws_token }}'\n  {% endif %}\n  {% else %}\n  -- Raise an error if authorization args are not present\n  {{ exceptions.raise_compiler_error(\"You must provide AWS authorization parameters via 'iam_role' or 'aws_key' and 'aws_secret'.\") }}\n  {% endif %}\n  {% if manifest %}\n  MANIFEST VERBOSE\n  {% endif %}\n  {% if header %}\n  HEADER\n  {% endif %}\n  {% if format %}\n  FORMAT AS {{format|upper}}\n  {% endif %}\n  {% if not format %}\n  DELIMITER AS '{{ delimiter }}'\n  {% endif %}\n  NULL AS '{{ null_as }}'\n  MAXFILESIZE AS {{ max_file_size }}\n  {% if escape %}\n  ESCAPE\n  {% endif %}\n  {% if compression %}\n  {{ compression|upper }}\n  {% endif %}\n  {% if add_quotes %}\n  ADDQUOTES\n  {% endif %}\n  {% if encrypted %}\n  ENCRYPTED\n  {% endif %}\n  {% if overwrite %}\n  ALLOWOVERWRITE\n  {% endif %}\n  {% if cleanpath %}\n  CLEANPATH\n  {% endif %}  \n  {% if not parallel %}\n  PARALLEL OFF\n  {% endif %}\n  {% if aws_region %}\n  REGION '{{ aws_region }}'\n  {% endif %}\n  {% if partition_by %}\n  PARTITION BY ( {{ partition_by | join(', ') }} )\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1705465}, "macro.redshift.vacuumable_tables_sql": {"unique_id": "macro.redshift.vacuumable_tables_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/redshift_maintenance_operation.sql", "original_file_path": "macros/redshift_maintenance_operation.sql", "name": "vacuumable_tables_sql", "macro_sql": "{% macro vacuumable_tables_sql() %}\n    {#-\n    Pull the arguments out of the kwargs dictionary. This allows folks to define\n    whatever arguments they want, e.g. a variable limit\n    -#}\n    {%- set exclude_schemas=kwargs.get('exclude_schemas', []) -%}\n    {%- set exclude_schemas_like=kwargs.get('exclude_schemas_like', []) -%}\n\n    select\n        current_database() as table_database,\n        table_schema,\n        table_name\n    from information_schema.tables\n    where table_type = 'BASE TABLE'\n        and table_schema not in ('information_schema', 'pg_catalog')\n        {% if exclude_schemas %}\n        and table_schema not in ('{{exclude_schemas | join(\"', '\")}}')\n        {% endif %}\n        {% for exclude_schema_like in exclude_schemas_like %}\n        and table_schema not like '{{ exclude_schema_like }}'\n        {% endfor %}\n    order by table_schema, table_name\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1721425}, "macro.redshift.redshift_maintenance": {"unique_id": "macro.redshift.redshift_maintenance", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/redshift_maintenance_operation.sql", "original_file_path": "macros/redshift_maintenance_operation.sql", "name": "redshift_maintenance", "macro_sql": "{% macro redshift_maintenance() %}\n    {#-\n    This logic means that if you add your own macro named `vacuumable_tables_sql`\n    to your project, that will be used, giving you the flexibility of defining\n    your own query. Passing it the `kwargs` variable means you can define your\n    own keyword arguments.\n    -#}\n    {% set root_project = context.project_name %}\n    {% if context.get(root_project, {}).get('vacuumable_tables_sql')  %}\n        {% set vacuumable_tables_sql=context[root_project].vacuumable_tables_sql(**kwargs) %}\n    {% else %}\n        {% set vacuumable_tables_sql=redshift.vacuumable_tables_sql(**kwargs) %}\n    {% endif %}\n\n    {% set vacuumable_tables=run_query(vacuumable_tables_sql) %}\n\n    {% for row in vacuumable_tables %}\n        {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n\n        {%- set relation_to_vacuum = adapter.get_relation(\n                                                database=row['table_database'],\n                                                schema=row['table_schema'],\n                                                identifier=row['table_name']\n                                    ) -%}\n        {% do run_query(\"commit\") %}\n\n        {% if relation_to_vacuum %}\n            {% set start=modules.datetime.datetime.now() %}\n            {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ relation_to_vacuum) }}\n            {% do run_query(\"vacuum \" ~ relation_to_vacuum) %}\n            {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ relation_to_vacuum) }}\n            {% do run_query(\"analyze \" ~ relation_to_vacuum) %}\n            {% set end=modules.datetime.datetime.now() %}\n            {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n            {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ relation_to_vacuum ~ \" in \" ~ total_seconds ~ \"s\") }}\n        {% else %}\n            {{ dbt_utils.log_info(message_prefix ~ ' Skipping relation \"' ~ row.values() | join ('\".\"') ~ '\" as it does not exist') }}\n        {% endif %}\n\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.redshift.vacuumable_tables_sql", "macro.dbt.run_query", "macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1740148}, "macro.redshift.fetch_table_data_sql": {"unique_id": "macro.redshift.fetch_table_data_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "name": "fetch_table_data_sql", "macro_sql": "{% macro fetch_table_data_sql() %}\n\n    select\n        n.nspname AS schemaname,\n        c.relname AS tablename,\n        d.description,\n        case\n            when c.relkind = 'v' then 'view'\n            when c.relkind = 'r' then 'table'\n            else null\n        end as relation_type\n\n    from pg_catalog.pg_namespace n\n    join pg_catalog.pg_class c on n.oid = c.relnamespace\n    left outer join pg_catalog.pg_description d ON (d.objoid = c.oid AND d.objsubid = 0)\n\n    where schemaname not like 'pg_%'\n      and schemaname != 'information_schema'\n      and relkind in ('v', 'r')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.174933}, "macro.redshift.fetch_column_data_sql": {"unique_id": "macro.redshift.fetch_column_data_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "name": "fetch_column_data_sql", "macro_sql": "{% macro fetch_column_data_sql() %}\n\n    with columns as (\n        select\n            n.nspname as schemaname,\n            c.relname as tablename,\n            a.attnum as col_index,\n            a.attname as col_name,\n            d.description,\n\n            case\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER VARYING', 'VARCHAR')\n\n                when strpos(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER') > 0\n                then replace(upper(format_type(a.atttypid, a.atttypmod)), 'CHARACTER', 'CHAR')\n\n                else upper(format_type(a.atttypid, a.atttypmod))\n            end as col_datatype,\n\n            case\n                when format_encoding((a.attencodingtype)::integer) = 'none' then 'raw'\n                else format_encoding((a.attencodingtype)::integer)\n            end as col_encoding,\n\n            case\n                when a.atthasdef is true then adef.adsrc\n                else null\n            end as col_default,\n\n            a.attnotnull as col_not_null\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        left outer join pg_catalog.pg_description as d ON (d.objoid = a.attrelid AND d.objsubid = a.attnum)\n        left outer join pg_catalog.pg_attrdef as adef on a.attrelid = adef.adrelid and a.attnum = adef.adnum\n        where c.relkind = 'r'\n          and a.attnum > 0\n\n    )\n    select *\n    from columns\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.175098}, "macro.redshift.fetch_constraint_data_sql": {"unique_id": "macro.redshift.fetch_constraint_data_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "name": "fetch_constraint_data_sql", "macro_sql": "{% macro fetch_constraint_data_sql() %}\n\n    select\n        c.nspname as schemaname,\n        b.relname as tablename,\n        case\n            when a.contype = 'p' then 'primary key'\n            when a.contype = 'u' then 'unique'\n            when a.contype = 'f' then 'foreign key'\n            else null\n        end as constraint_type,\n        pg_get_constraintdef(a.oid) as col_constraint\n\n    from pg_catalog.pg_constraint a\n    join pg_catalog.pg_class b on(a.conrelid=b.oid)\n    join pg_catalog.pg_namespace c on(a.connamespace=c.oid)\n    where a.contype in ('p', 'u', 'f')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.175226}, "macro.redshift.fetch_sort_dist_key_data_sql": {"unique_id": "macro.redshift.fetch_sort_dist_key_data_sql", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/queries.sql", "original_file_path": "macros/queries.sql", "name": "fetch_sort_dist_key_data_sql", "macro_sql": "{% macro fetch_sort_dist_key_data_sql() %}\n\n    with dist_config as (\n\n        -- gets distyle and distkey (if there is one)\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n\n            case\n                when c.reldiststyle = 0 then 'even'\n                when c.reldiststyle = 1 then 'key'\n                when c.reldiststyle = 8 then 'all'\n                else null\n            end as diststyle,\n\n            max(case when c.reldiststyle = 1 and a.attisdistkey IS TRUE and a.attnum > 0 then a.attname else null end) over (partition by n.nspname, c.relname) as dist_key\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n\n    ),\n\n    sort_config as (\n\n        -- get sortstyle and sortkeys\n        select distinct\n            trim(n.nspname) as schemaname,\n            trim(c.relname) as tablename,\n            case\n                when min(a.attsortkeyord) over (partition by n.nspname, c.relname) = -1 then 'interleaved'\n                else 'compound'\n            end as sort_style,\n            listagg(a.attname, '|') within group (order by a.attsortkeyord) over (partition by n.nspname, c.relname) as sort_keys\n\n        from pg_catalog.pg_namespace as n\n        inner join pg_catalog.pg_class as c on n.oid = c.relnamespace\n        inner join pg_catalog.pg_attribute as a on c.oid = a.attrelid\n        where c.relkind = 'r'\n          and abs(a.attsortkeyord) > 0\n          and a.attnum > 0\n    )\n\n    select *\n    from sort_config\n    join dist_config using (schemaname, tablename)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.175394}, "macro.redshift.try_cast": {"unique_id": "macro.redshift.try_cast", "package_name": "redshift", "root_path": "/home/mszyjkowski/workspace/data-dbt/dbt_packages/redshift", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{%- macro try_cast(str, datatype) -%}\n\n{%- if datatype == 'bigint' or datatype == 'int' -%}\n\n    case\n        when trim({{str}}) ~ '^[0-9]+$' then trim({{str}})\n        else null\n    end::{{datatype}}\n\n{% else %}\n\n    {{ exceptions.raise_compiler_error(\n            \"non-integer datatypes are not currently supported\") }}\n\n{% endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669795234.1759934}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/mszyjkowski/workspace/data-dbt/venv/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.main.health_metrics": [], "model.main.health_engage": [], "model.main.main_billing_plans": [], "model.main.edge_bill_ts": [], "model.main.transform_accounts": ["model.main.bi_billing_plans", "model.main.bi_billing_plans"], "model.main.transform_customers": ["model.main.transform_accounts"], "model.main.ff_highfivecomment": [], "model.main.ff_reportintermediatemodel": [], "model.main.ff_company": [], "model.main.ff_highfive": [], "model.main.ff_user": [], "model.main.ff_zuoraaccount": [], "model.main.ff_answer": [], "model.main.ff_highfivemention": [], "model.main.ff_report": [], "model.main.ff_salesforcecompanyaccount": [], "model.main.ff_highfivelike": [], "model.main.ff_question": [], "model.main.ff_metricsvalue": [], "model.main.company": ["model.main.edge_bill_ts", "model.main.edge_bill_ts", "model.main.ff_company", "model.main.ff_salesforcecompanyaccount", "model.main.ff_user", "model.main.ff_zuoraaccount", "model.main.main_billing_plans"], "model.main.checkin_questions": ["model.main.ff_answer", "model.main.ff_question", "model.main.ff_report"], "model.main.arr_detail": [], "model.main.highfive": ["model.main.ff_highfive", "model.main.ff_highfivecomment", "model.main.ff_highfivelike", "model.main.ff_highfivemention"], "model.main.checkin": ["model.main.checkin_questions", "model.main.ff_highfive", "model.main.ff_metricsvalue", "model.main.ff_question", "model.main.ff_report", "model.main.ff_reportintermediatemodel", "model.main.ff_user"], "model.main.products": [], "model.main.engage_campaigns": [], "model.main.user_actions": ["model.main.ff_highfive", "model.main.ff_highfivecomment", "model.main.ff_highfivemention", "model.main.ff_user"], "model.main.arr_daily": [], "model.main.user_days_seen": ["model.main.ff_company_comb", "model.main.user_activity", "model.main.user_comb"], "model.main.bi_mrr_weekly": ["model.main.bi_main_billing_plans", "model.main.bi_main_billing_plans"], "model.main.bi_main_billing_plans": ["model.main.bi_billing_plans"], "model.main.bi_wau_mau": ["model.main.company_comb", "model.main.sfdc_company_comb", "model.main.stats_point_comb", "model.main.user_activity"], "model.main.bi_mrr_history_monthly": [], "model.main.tmp_zuora_mrr": [], "model.main.bi_mrr_quarterly": ["model.main.bi_main_billing_plans", "model.main.bi_main_billing_plans"], "model.main.bi_mrr_monthly": ["model.main.bi_main_billing_plans", "model.main.bi_main_billing_plans"], "model.main.bi_billing_plans": [], "model.main.engagement_customers": ["model.main.engagement_accounts"], "model.main.engagement_accounts": ["model.main.bi_billing_plans", "model.main.bi_billing_plans"], "model.main.organizations": [], "model.main.sfdc_company_comb": [], "model.main.stats_point_comb": [], "model.main.ooo_report_comb": [], "model.main.x_comment_comb": [], "model.main.company_comb": ["model.main.engagement_customers", "model.main.transform_customers", "source.main.pg.company", "source.main.pg.company", "source.main.pg.company", "source.main.pg.company"], "model.main.user_comb": [], "model.main.ff_company_comb": [], "model.main.cycle_comb": [], "model.main.churnzero_pipeline": ["model.main.customer", "model.main.health_engage", "model.main.health_metrics"], "model.main.customer": ["model.main.activity_agg", "model.main.bi_mrr_monthly", "model.main.bsko_agg", "model.main.bsr_cycles_agg", "model.main.bsr_participants_agg", "model.main.checkins_reviewers_agg", "model.main.company_comb", "model.main.enabled_features_agg", "model.main.highfives_given_alltime_agg", "model.main.key_results_agg", "model.main.objectives_agg", "model.main.one_on_one_agg", "model.main.pendo_nps_agg", "model.main.sfdc_case_agg", "model.main.total_comments_agg", "model.main.transform_agg", "model.main.users_agg"], "model.main.enabled_features_agg": ["model.main.feature_flags_agg"], "model.main.bsko_agg": [], "model.main.pendo_nps_agg": [], "model.main.transform_agg": [], "model.main.activity_agg": ["model.main.user_activity", "model.main.user_activity", "model.main.user_activity", "model.main.user_days_seen"], "model.main.key_results_agg": [], "model.main.feature_flags_agg": [], "model.main.one_on_one_agg": ["model.main.ooo_report_comb"], "model.main.total_comments_agg": ["model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.x_comment_comb", "model.main.x_comment_comb", "model.main.x_comment_comb"], "model.main.exec_advisor_customer_details": ["model.main.arr_daily", "model.main.arr_daily", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.engage_campaigns", "model.main.products"], "model.main.sfdc_case_agg": [], "model.main.bsr_participants_agg": [], "model.main.bsr_cycles_agg": ["model.main.cycle_comb", "model.main.cycle_comb", "model.main.cycle_comb", "model.main.cycle_comb"], "model.main.objectives_agg": [], "model.main.highfives_given_alltime_agg": ["model.main.highfive"], "model.main.checkins_reviewers_agg": ["model.main.ff_user"], "model.main.product_health": [], "model.main.users_agg": ["model.main.ff_company_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb", "model.main.user_comb"], "model.main.issue": [], "model.main.changelog": [], "model.main.issue_transition": [], "model.main.project": [], "snapshot.main.customer_snapshot": ["model.main.customer"], "test.main.assert_all_zuora_records_present": [], "model.redshift.stl_explain": [], "model.redshift.pg_views": [], "model.redshift.stl_query": [], "model.redshift.stv_partitions": [], "model.redshift.redshift_cost": ["model.redshift.stl_explain"], "model.redshift.stv_tbl_perm": [], "model.redshift.pg_user": [], "model.redshift.pg_attribute": [], "model.redshift.pg_namespace": [], "model.redshift.pg_class": [], "model.redshift.svv_diskusage": [], "model.redshift.stv_blocklist": [], "model.redshift.pg_depend": [], "model.redshift.pg_tables": [], "model.redshift.stl_wlm_query": [], "model.redshift.redshift_admin_queries": ["model.redshift.pg_user", "model.redshift.redshift_cost", "model.redshift.stl_query", "model.redshift.stl_wlm_query"], "model.redshift.redshift_admin_users_schema_privileges": ["model.redshift.pg_tables", "model.redshift.pg_user", "model.redshift.pg_views"], "model.redshift.redshift_admin_users_table_view_privileges": ["model.redshift.pg_tables", "model.redshift.pg_user", "model.redshift.pg_views"], "model.redshift.redshift_admin_dependencies": ["model.redshift.pg_class", "model.redshift.pg_class", "model.redshift.pg_depend", "model.redshift.pg_depend", "model.redshift.pg_namespace", "model.redshift.pg_namespace"], "model.redshift.redshift_admin_table_stats": ["model.redshift.pg_attribute", "model.redshift.pg_class", "model.redshift.pg_namespace", "model.redshift.stv_blocklist", "model.redshift.stv_partitions", "model.redshift.stv_tbl_perm", "model.redshift.svv_diskusage"], "model.redshift.redshift_constraints": [], "model.redshift.redshift_tables": [], "model.redshift.redshift_sort_dist_keys": [], "model.redshift.redshift_columns": [], "model.main.user_activity": [], "source.main.pg.company": [], "source.main.customer.customer": []}, "child_map": {"model.main.health_metrics": ["model.main.churnzero_pipeline"], "model.main.health_engage": ["model.main.churnzero_pipeline"], "model.main.main_billing_plans": ["model.main.company"], "model.main.edge_bill_ts": ["model.main.company", "model.main.company"], "model.main.transform_accounts": ["model.main.transform_customers"], "model.main.transform_customers": ["model.main.company_comb"], "model.main.ff_highfivecomment": ["model.main.highfive", "model.main.user_actions"], "model.main.ff_reportintermediatemodel": ["model.main.checkin"], "model.main.ff_company": ["model.main.company"], "model.main.ff_highfive": ["model.main.checkin", "model.main.highfive", "model.main.user_actions"], "model.main.ff_user": ["model.main.checkin", "model.main.checkins_reviewers_agg", "model.main.company", "model.main.user_actions"], "model.main.ff_zuoraaccount": ["model.main.company"], "model.main.ff_answer": ["model.main.checkin_questions"], "model.main.ff_highfivemention": ["model.main.highfive", "model.main.user_actions"], "model.main.ff_report": ["model.main.checkin", "model.main.checkin_questions"], "model.main.ff_salesforcecompanyaccount": ["model.main.company"], "model.main.ff_highfivelike": ["model.main.highfive"], "model.main.ff_question": ["model.main.checkin", "model.main.checkin_questions"], "model.main.ff_metricsvalue": ["model.main.checkin"], "model.main.company": [], "model.main.checkin_questions": ["model.main.checkin"], "model.main.arr_detail": [], "model.main.highfive": ["model.main.highfives_given_alltime_agg"], "model.main.checkin": [], "model.main.products": ["model.main.exec_advisor_customer_details"], "model.main.engage_campaigns": ["model.main.exec_advisor_customer_details", "model.main.exec_advisor_customer_details", "model.main.exec_advisor_customer_details", "model.main.exec_advisor_customer_details", "model.main.exec_advisor_customer_details", "model.main.exec_advisor_customer_details", "model.main.exec_advisor_customer_details"], "model.main.user_actions": [], "model.main.arr_daily": ["model.main.exec_advisor_customer_details", "model.main.exec_advisor_customer_details"], "model.main.user_days_seen": ["model.main.activity_agg"], "model.main.bi_mrr_weekly": [], "model.main.bi_main_billing_plans": ["model.main.bi_mrr_monthly", "model.main.bi_mrr_monthly", "model.main.bi_mrr_quarterly", "model.main.bi_mrr_quarterly", "model.main.bi_mrr_weekly", "model.main.bi_mrr_weekly"], "model.main.bi_wau_mau": [], "model.main.bi_mrr_history_monthly": [], "model.main.tmp_zuora_mrr": [], "model.main.bi_mrr_quarterly": [], "model.main.bi_mrr_monthly": ["model.main.customer"], "model.main.bi_billing_plans": ["model.main.bi_main_billing_plans", "model.main.engagement_accounts", "model.main.engagement_accounts", "model.main.transform_accounts", "model.main.transform_accounts"], "model.main.engagement_customers": ["model.main.company_comb"], "model.main.engagement_accounts": ["model.main.engagement_customers"], "model.main.organizations": [], "model.main.sfdc_company_comb": ["model.main.bi_wau_mau"], "model.main.stats_point_comb": ["model.main.bi_wau_mau"], "model.main.ooo_report_comb": ["model.main.one_on_one_agg"], "model.main.x_comment_comb": ["model.main.total_comments_agg", "model.main.total_comments_agg", "model.main.total_comments_agg"], "model.main.company_comb": ["model.main.bi_wau_mau", "model.main.customer"], "model.main.user_comb": ["model.main.total_comments_agg", "model.main.total_comments_agg", "model.main.total_comments_agg", "model.main.user_days_seen", "model.main.users_agg", "model.main.users_agg", "model.main.users_agg", "model.main.users_agg", "model.main.users_agg", "model.main.users_agg", "model.main.users_agg"], "model.main.ff_company_comb": ["model.main.user_days_seen", "model.main.users_agg"], "model.main.cycle_comb": ["model.main.bsr_cycles_agg", "model.main.bsr_cycles_agg", "model.main.bsr_cycles_agg", "model.main.bsr_cycles_agg"], "model.main.churnzero_pipeline": [], "model.main.customer": ["model.main.churnzero_pipeline", "snapshot.main.customer_snapshot"], "model.main.enabled_features_agg": ["model.main.customer"], "model.main.bsko_agg": ["model.main.customer"], "model.main.pendo_nps_agg": ["model.main.customer"], "model.main.transform_agg": ["model.main.customer"], "model.main.activity_agg": ["model.main.customer"], "model.main.key_results_agg": ["model.main.customer"], "model.main.feature_flags_agg": ["model.main.enabled_features_agg"], "model.main.one_on_one_agg": ["model.main.customer"], "model.main.total_comments_agg": ["model.main.customer"], "model.main.exec_advisor_customer_details": [], "model.main.sfdc_case_agg": ["model.main.customer"], "model.main.bsr_participants_agg": ["model.main.customer"], "model.main.bsr_cycles_agg": ["model.main.customer"], "model.main.objectives_agg": ["model.main.customer"], "model.main.highfives_given_alltime_agg": ["model.main.customer"], "model.main.checkins_reviewers_agg": ["model.main.customer"], "model.main.product_health": [], "model.main.users_agg": ["model.main.customer"], "model.main.issue": [], "model.main.changelog": [], "model.main.issue_transition": [], "model.main.project": [], "snapshot.main.customer_snapshot": [], "test.main.assert_all_zuora_records_present": [], "model.redshift.stl_explain": ["model.redshift.redshift_cost"], "model.redshift.pg_views": ["model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.stl_query": ["model.redshift.redshift_admin_queries"], "model.redshift.stv_partitions": ["model.redshift.redshift_admin_table_stats"], "model.redshift.redshift_cost": ["model.redshift.redshift_admin_queries"], "model.redshift.stv_tbl_perm": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_user": ["model.redshift.redshift_admin_queries", "model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.pg_attribute": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_namespace": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_table_stats"], "model.redshift.pg_class": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_table_stats"], "model.redshift.svv_diskusage": ["model.redshift.redshift_admin_table_stats"], "model.redshift.stv_blocklist": ["model.redshift.redshift_admin_table_stats"], "model.redshift.pg_depend": ["model.redshift.redshift_admin_dependencies", "model.redshift.redshift_admin_dependencies"], "model.redshift.pg_tables": ["model.redshift.redshift_admin_users_schema_privileges", "model.redshift.redshift_admin_users_table_view_privileges"], "model.redshift.stl_wlm_query": ["model.redshift.redshift_admin_queries"], "model.redshift.redshift_admin_queries": [], "model.redshift.redshift_admin_users_schema_privileges": [], "model.redshift.redshift_admin_users_table_view_privileges": [], "model.redshift.redshift_admin_dependencies": [], "model.redshift.redshift_admin_table_stats": [], "model.redshift.redshift_constraints": [], "model.redshift.redshift_tables": [], "model.redshift.redshift_sort_dist_keys": [], "model.redshift.redshift_columns": [], "model.main.user_activity": ["model.main.activity_agg", "model.main.activity_agg", "model.main.activity_agg", "model.main.bi_wau_mau", "model.main.user_days_seen"], "source.main.pg.company": ["model.main.company_comb", "model.main.company_comb", "model.main.company_comb", "model.main.company_comb"], "source.main.customer.customer": []}}